(()=>{var k=Object.defineProperty;var S=(I,e)=>k(I,"name",{value:e,configurable:!0});const m=class m extends CustomModule{constructor(){super({name:"\u{1F4DD} Bio Updater",description:"Automatic bio updating with user statistics and custom templates",authors:[{name:"Bluscream"}],tags:["Automation","Social"],dependencies:[]}),this.updateTimerId=null,this.actionButtons=[new CustomActionButton({title:"Update Bio Now",color:"success",icon:"ri-refresh-line",description:"Manually trigger bio update",callback:async()=>{await this.triggerUpdate()}})]}async load(){const e=window.customjs.types.SettingType,t=`Relationship: {group1} <3
Auto Accept: {autojoin}
{autoinviteprefix}{autoinvite}

Real Rank: {rank}
Friends: {friends} | Blocked: {blocked} | Muted: {muted}
Time played: {playtime}
Date joined: {date_joined}
Last updated: {now} (every 2h)
Tagged: {tagged_users}/{tags_loaded}

User ID: {user_id}
Steam ID: {steam_id}
Oculus ID: {oculus_id}`;this.categories=this.defineSettingsCategories({timing:{name:"\u{1F4DD} Update Timing",description:"Control when and how often bio updates occur"},steam:{name:"\u{1F4DD} Steam Integration",description:"Steam API credentials for playtime tracking"},template:{name:"\u{1F4DD} Bio Template",description:"Customize your bio content and placeholders"}}),this.settings=this.defineSettings({updateInterval:{type:e.NUMBER,description:"How often to update bio (default: 2 hours in ms)",category:"timing",default:72e5},initialDelay:{type:e.NUMBER,description:"Delay before first update after login (default: 20 seconds in ms)",category:"timing",default:2e4},steamId:{type:e.STRING,description:"Your Steam ID64 (can be base64 encoded)",category:"steam",placeholder:"Steam ID64",default:""},apiKey:{type:e.STRING,description:"Your Steam Web API key (can be base64 encoded)",category:"steam",placeholder:"Steam API Key",default:""},appId:{type:e.STRING,description:"Steam app ID for VRChat (default: 438100)",category:"steam",default:"438100"},template:{type:e.STRING,description:"Bio template with placeholders (multiline text)",category:"template",default:t,variables:{"{group1}":"Favorite Group 1","{group2}":"Favorite Group 2","{group3}":"Favorite Group 3","{autojoin}":"Auto-accept friends status (alias for group2)","{autoinvite}":"Auto-invite users list","{autoinviteprefix}":"Literal text: 'Auto Invite: ' (only if autoinvite list not empty)","{rank}":"Real VRChat trust rank","{friends}":"Friend count","{blocked}":"Blocked users count","{muted}":"Muted users count","{playtime}":"Total VRChat playtime","{date_joined}":"Account creation date","{now}":"Current date/time","{tags_loaded}":"Number of custom tags loaded","{tagged_users}":"Total count of tagged users across all stores","{user_id}":"Your VRChat user ID","{steam_id}":"Your Steam ID64","{oculus_id}":"Your Oculus ID","{pico_id}":"Your Pico ID","{vive_id}":"Your Vive ID","{last_activity}":"Time since last activity"}},separator:{type:e.STRING,description:"Separator between custom bio and auto-generated content",category:"template",placeholder:`
-
`,default:`
-
`}}),this.logger.log(`\u2699\uFE0F Update interval: ${this.settings.store.updateInterval}ms`),this.logger.log(`\u2699\uFE0F Template configured: ${this.settings.store.template.length} chars`),this.logger.log("Bio updater ready (waiting for login)"),this.loaded=!0}async start(){this.utils=window.customjs.utils,this.autoInvite=await window.customjs.waitForModule("auto-invite"),this.tagManager=await window.customjs.waitForModule("tag-manager"),this.enabled=!0,this.started=!0,this.logger.log("Bio updater started (waiting for login to begin updates)")}async onLogin(e){this.logger.log(`User logged in: ${e?.displayName}`);const t=this.settings.store.updateInterval,i=this.settings.store.initialDelay;this.updateTimerId=this.registerTimer(setInterval(async()=>{await this.updateBio()},t)),this.logger.log(`Bio update timer registered (interval: ${t}ms)`),setTimeout(async()=>{await this.updateBio()},i),this.logger.log(`Initial bio update scheduled (delay: ${i}ms)`)}async stop(){this.logger.log("Stopping bio updater"),await super.stop()}async updateBio(){try{this.logger.log("Updating bio...");const e=Date.now(),t=window.$pinia?.user?.currentUser;if(!t){this.logger.warn("Current user not available, skipping bio update");return}const i=await window.database.getUserStats({id:t.id}),o=this.settings.store.separator||`
-
`,s=t.bio?t.bio.split(o):[""],r=s.length>1?s[0]:"",l=this.settings.store.steamId,d=this.settings.store.apiKey,_=this.settings.store.appId,u=await this.getSteamPlaytime(l,d,_);let c,h=null;u&&(c=`${Math.floor(u/60).toString().padStart(2,"0")}h`,h=u*60*1e3);let y=this.timeToText(h??i.timeSpent);c&&(y+=` (${c})`);const f=Array.from(window.$pinia?.moderation?.cachedPlayerModerations?.values()||[]),T=new Date(t.last_activity),g=Array.from(window.$pinia?.favorite?.favoriteFriends?.values()||[]),$=g.filter(a=>a.groupKey==="friend:group_1"),w=g.filter(a=>a.groupKey==="friend:group_2"),D=g.filter(a=>a.groupKey==="friend:group_3"),B=this.settings.store.template,v=this.autoInvite?.getAutoInviteUsersList()?.map(a=>a.displayName);let b=0;if(this.tagManager?.findTaggedUsers){const a=this.tagManager.findTaggedUsers(!1);b=Object.values(a).reduce((U,A)=>U+Object.keys(A).length,0)}const M=B.replace("{last_activity}",this.timeToText(e-T)).replace("{playtime}",y).replace("{date_joined}",t.date_joined??"Unknown").replace("{friends}",t.friends.length??"?").replace("{blocked}",f.filter(a=>a.type==="block").length??"?").replace("{muted}",f.filter(a=>a.type==="mute").length??"?").replace("{now}",this.formatDateTime()).replace("{group1}",$.map(a=>a.name).join(", ")).replace("{group2}",w.map(a=>a.name).join(", ")).replace("{group3}",D.map(a=>a.name).join(", ")).replace("{autojoin}",w.map(a=>a.name).join(", ")).replace("{autoinvite}",v.join(", ")??"").replace("{autoinviteprefix}",v.length>0?"Auto Invite: ":"").replace("{tags_loaded}",this.tagManager?.getLoadedTagsCount()??0).replace("{tagged_users}",b).replace("{user_id}",t.id).replace("{steam_id}",t.steamId).replace("{oculus_id}",t.oculusId).replace("{pico_id}",t.picoId).replace("{vive_id}",t.viveId).replace("{rank}",t.$trustLevel),j=r.trim()?o:"";let n=r+j+M;n.length>512&&(n=n.substring(0,499)+"...",this.logger.warn(`Bio truncated to 499 chars + "..." (was ${n.length} chars before truncation)`)),this.logger.log(`Updating bio (${n.length} chars)`),await this.utils.saveBio(n),this.logger.log("\u2713 Bio updated successfully"),this.emit("bio-updated",{bio:n,timestamp:e})}catch(e){this.logger.error(`Error updating bio: ${e.message}`)}}async triggerUpdate(){this.logger.log("Manual bio update triggered"),this.logger.showInfo("Updating bio..."),await this.updateBio(),this.logger.showSuccess("Bio updated successfully!")}timeToText(e){if(!e||e<0)return"0s";const t=Math.floor(e/1e3),i=Math.floor(t/60),o=Math.floor(i/60),s=Math.floor(o/24);return s>0?`${s}d ${o%24}h`:o>0?`${o}h ${i%60}m`:i>0?`${i}m ${t%60}s`:`${t}s`}formatDateTime(e=null){e=e??new Date;const t=e.getFullYear(),i=String(e.getMonth()+1).padStart(2,"0"),o=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),r=String(e.getMinutes()).padStart(2,"0"),l=String(e.getSeconds()).padStart(2,"0");return`${t}-${i}-${o} ${s}:${r}:${l} GMT+1`}tryDecodeBase64(e){if(!e||typeof e!="string"||!e.endsWith("="))return e;try{const t=atob(e);return this.logger.log("Decoded base64 string"),t}catch(t){return this.logger.warn(`Failed to decode base64: ${t.message}`),e}}async getSteamPlaytime(e,t,i="438100"){try{if(!e)return this.logger.warn("No Steam ID provided"),null;e=this.tryDecodeBase64(e),t=this.tryDecodeBase64(t);const r=(await(await fetch(`https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=${t}&steamid=${e}&format=json&include_played_free_games=1`)).json())?.response?.games?.find(d=>d.appid==i);if(!r)return this.logger.warn(`No playtime data found for app ${i}`),null;const l=r.playtime_forever;return this.logger.log(`Got Steam playtime: ${l} minutes`),l}catch(o){return this.logger.error(`Error getting Steam playtime: ${o.message}`),null}}};S(m,"BioUpdaterPlugin");let p=m;window.customjs.__LAST_PLUGIN_CLASS__=p;})();
