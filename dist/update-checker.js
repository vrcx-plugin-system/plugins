(()=>{var w=Object.defineProperty;var m=(f,g)=>w(f,"name",{value:g,configurable:!0});const p=class p extends CustomModule{constructor(){super({name:"Update Checker \u{1F504}",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],description:"Automatically checks for updates to VRCX core system and plugins with hot-reload support",tags:["Utility","Updates","Automation"],required_dependencies:["dialog-api"]});this.checkTimer=null;this.pluginCheckTimer=null;this.isCheckingCore=!1;this.isCheckingPlugins=!1;this.lastCoreCheck=0;this.lastPluginCheck=0;this.rateLimit=null;this.coreRepoOwner="";this.coreRepoName="";this.GITHUB_API="https://api.github.com";this.actionButtons=[{title:"Check Core Updates",color:"primary",icon:"ri-refresh-line",description:"Manually check for core system updates",callback:async()=>{await this.checkCoreUpdate(!0)}},{title:"Check Plugin Updates",color:"info",icon:"ri-plugin-line",description:"Manually check for plugin updates",callback:async()=>{await this.checkPluginUpdates(!0)}},{title:"Show Rate Limit Status",color:"warning",icon:"ri-time-line",description:"Display current GitHub API rate limit status",callback:()=>{this.showRateLimitStatus()}},{title:"Reset Dismissed Updates",color:"danger",icon:"ri-close-circle-line",description:"Clear the list of dismissed update notifications",callback:()=>{this.settings.store.dismissedCoreVersions="[]",this.logger.showSuccess("Dismissed updates cleared")}}]}async load(){await super.load();const e=window.customjs.types.SettingType;this.settings=this.defineSettings({checkCoreOnStartup:{type:e.BOOLEAN,description:"Automatically check for core system updates when the application starts",default:!0},coreCheckInterval:{type:e.TIMESPAN,description:"How often to check for core system updates",default:36e5,min:3e5},showCoreNotification:{type:e.BOOLEAN,description:"Display a notification when a new core version is available",default:!0},openReleasePageOnUpdate:{type:e.BOOLEAN,description:"Automatically open the GitHub release page when an update is found",default:!1},checkPluginsOnStartup:{type:e.BOOLEAN,description:"Automatically check for plugin updates when the application starts",default:!0},pluginCheckInterval:{type:e.TIMESPAN,description:"How often to check for plugin updates",default:72e5,min:3e5},autoUpdatePlugins:{type:e.BOOLEAN,description:"Automatically hot-reload updated plugins without confirmation",default:!1},showNewPlugins:{type:e.BOOLEAN,description:"Display a modal when new plugins are discovered in repositories",default:!0},githubToken:{type:e.STRING,description:"Optional: Increases API rate limit from 60 to 5000 requests/hour",default:""},showRateLimitWarnings:{type:e.BOOLEAN,description:"Display warnings when approaching GitHub API rate limits",default:!0},seenPlugins:{type:e.STRING,description:"Tracked seen plugins",default:"[]",hidden:!0},lastCoreVersion:{type:e.STRING,description:"Last seen core version",default:"",hidden:!0},dismissedCoreVersions:{type:e.STRING,description:"Dismissed core versions",default:"[]",hidden:!0}}),this.parseRepositoryInfo(),this.settings.store.checkCoreOnStartup&&setTimeout(()=>this.checkCoreUpdate(!1),5e3),this.settings.store.checkPluginsOnStartup&&setTimeout(()=>this.checkPluginUpdates(!1),7e3)}async start(){this.enabled&&(this.started=!0,this.startPeriodicChecks(),this.logger.log("Update checker started"))}async stop(){this.stopPeriodicChecks(),this.started=!1,this.logger.log("Update checker stopped")}parseRepositoryInfo(){try{const e=window.customjs?.sourceUrl||"";if(!e){this.logger.warn("No sourceUrl found in window.customjs");return}const t=e.match(/github\.com\/([^\/]+)\/([^\/]+)/);t?(this.coreRepoOwner=t[1],this.coreRepoName=t[2],this.logger.log(`Parsed repository: ${this.coreRepoOwner}/${this.coreRepoName}`)):this.logger.warn("Failed to parse repository info from sourceUrl")}catch(e){const t=e instanceof Error?e.message:String(e);this.logger.error(`Error parsing repository info: ${t}`)}}startPeriodicChecks(){this.stopPeriodicChecks(),this.checkTimer=setInterval(()=>{this.checkCoreUpdate(!1)},this.settings.store.coreCheckInterval),this.pluginCheckTimer=setInterval(()=>{this.checkPluginUpdates(!1)},this.settings.store.pluginCheckInterval)}stopPeriodicChecks(){this.checkTimer&&(clearInterval(this.checkTimer),this.checkTimer=null),this.pluginCheckTimer&&(clearInterval(this.pluginCheckTimer),this.pluginCheckTimer=null)}async fetchWithRateLimit(e){const t={Accept:"application/vnd.github.v3+json"},o=this.settings.store.githubToken;o&&(t.Authorization=`token ${o}`);const s=await fetch(e,{headers:t});return this.rateLimit={limit:parseInt(s.headers.get("X-RateLimit-Limit")||"0"),remaining:parseInt(s.headers.get("X-RateLimit-Remaining")||"0"),reset:parseInt(s.headers.get("X-RateLimit-Reset")||"0"),used:parseInt(s.headers.get("X-RateLimit-Used")||"0")},this.settings.store.showRateLimitWarnings&&this.rateLimit.remaining<10&&this.logger.showWarning(`GitHub API rate limit low: ${this.rateLimit.remaining}/${this.rateLimit.limit} remaining`),s}async checkCoreUpdate(e){if(this.isCheckingCore){e&&this.logger.showInfo("Core update check already in progress");return}if(!this.coreRepoOwner||!this.coreRepoName){e&&this.logger.showError("Repository information not available");return}this.isCheckingCore=!0;try{e&&this.logger.showInfo("Checking for core system updates...");const t=`${this.GITHUB_API}/repos/${this.coreRepoOwner}/${this.coreRepoName}/releases/latest`,o=await this.fetchWithRateLimit(t);if(!o.ok)throw new Error(`GitHub API error: ${o.status} ${o.statusText}`);const s=await o.json(),i=s.tag_name,r=window.customjs?.build||0,a=parseInt(i);this.lastCoreCheck=Date.now();const n=JSON.parse(this.settings.store.dismissedCoreVersions||"[]").includes(i);a>r&&!n?(this.settings.store.lastCoreVersion=i,await this.showCoreUpdateNotification(s,e)):e&&(n?this.logger.showInfo(`Update ${i} was previously dismissed. Current: ${r}`):this.logger.showSuccess(`Plugin System is up to date (build ${r})`))}catch(t){const o=t instanceof Error?t.message:"Unknown error";this.logger.error("Failed to check for core updates:",o),e&&this.logger.showError("Failed to check for updates: "+o)}finally{this.isCheckingCore=!1}}async showCoreUpdateNotification(e,t){const s=`A new version of the VRCX Plugin System is available!

Current: ${window.customjs?.build||0}
Latest: ${e.tag_name}

Released: ${new Date(e.published_at).toLocaleString()}`;if((this.settings.store.showCoreNotification||t)&&this.logger.showInfo("New VRCX Plugin System update available: "+e.tag_name),await this.showConfirmDialog("\u{1F504} VRCX Plugin System Update Available",s,"View Release","Dismiss"))(this.settings.store.openReleasePageOnUpdate||t)&&window.open(e.html_url,"_blank");else{const r=JSON.parse(this.settings.store.dismissedCoreVersions||"[]");r.includes(e.tag_name)||(r.push(e.tag_name),this.settings.store.dismissedCoreVersions=JSON.stringify(r))}}async checkPluginUpdates(e){if(this.isCheckingPlugins){e&&this.logger.showInfo("Plugin update check already in progress");return}this.isCheckingPlugins=!0;try{e&&this.logger.showInfo("Checking for plugin updates...");const o=(window.customjs?.repos||[]).filter(a=>a.enabled);if(o.length===0){e&&this.logger.showWarning("No enabled plugin repositories found");return}const s=[],i=[],r=new Set(JSON.parse(this.settings.store.seenPlugins||"[]"));for(const a of o)try{await a.fetch();const l=a.data?.modules||[];for(const n of l){const c=n.id||n.name;r.has(c)||(i.push({...n,repoName:a.metadata?.name||"Unknown Repo"}),r.add(c));const h=window.customjs?.modules?.find(u=>u.metadata?.id===c||u.metadata?.name===n.name);h&&this.compareVersions(h.metadata?.version,n.version)<0&&s.push({id:c,name:n.name,currentVersion:h.metadata?.version,latestVersion:n.version,needsUpdate:!0,url:n.url,repoUrl:a.url})}}catch(l){const n=l instanceof Error?l.message:String(l);this.logger.error(`Failed to check repository ${a.url}: ${n}`)}this.settings.store.seenPlugins=JSON.stringify(Array.from(r)),this.lastPluginCheck=Date.now(),s.length>0?await this.handlePluginUpdates(s,e):e&&this.logger.showSuccess("All plugins are up to date"),i.length>0&&this.settings.store.showNewPlugins&&await this.showNewPluginsModal(i)}catch(t){const o=t instanceof Error?t.message:"Unknown error";this.logger.error("Failed to check for plugin updates:",o),e&&this.logger.showError("Failed to check for plugin updates: "+o)}finally{this.isCheckingPlugins=!1}}async handlePluginUpdates(e,t){if(!window.customjs?.getModule("dialog-api")){this.logger.showWarning(`${e.length} plugin update(s) available, but dialog-api not found`);return}const s=e.map(i=>`\u2022 ${i.name}: ${i.currentVersion||"?"} \u2192 ${i.latestVersion||"?"}`).join(`
`);this.logger.showInfo(`Found ${e.length} plugin update(s)`),this.settings.store.autoUpdatePlugins&&!t?await this.applyPluginUpdates(e):await this.showConfirmDialog("\u{1F504} Plugin Updates Available",`The following plugins have updates available:

${s}

Would you like to update them now?`,"Update All","Skip")&&await this.applyPluginUpdates(e)}async applyPluginUpdates(e){this.logger.showInfo(`Updating ${e.length} plugin(s)...`);let t=0,o=0;for(const s of e)try{const i=window.customjs?.reloadModule;if(i)await i(s.id),t++,this.logger.log(`Updated plugin: ${s.name}`);else throw new Error("Reload function not available")}catch(i){o++;const r=i instanceof Error?i.message:String(i);this.logger.error(`Failed to update ${s.name}: ${r}`)}t>0&&this.logger.showSuccess(`Successfully updated ${t} plugin(s)`),o>0&&this.logger.showError(`Failed to update ${o} plugin(s)`)}async showNewPluginsModal(e){if(!window.customjs?.getModule("dialog-api"))return;const o=e.map(s=>`\u2022 ${s.name} (${s.version||"unknown"})
  From: ${s.repoName}
  ${s.description||"No description"}`).join(`

`);await this.showAlertDialog("\u2728 New Plugins Discovered",`${e.length} new plugin(s) have been found in your repositories:

${o}

You can enable them from the Plugin Manager.`,"OK")}showRateLimitStatus(){if(!this.rateLimit){this.logger.showInfo("No GitHub API requests made yet");return}const e=new Date(this.rateLimit.reset*1e3),t=Math.max(0,this.rateLimit.reset*1e3-Date.now()),o=Math.floor(t/6e4),s=!!this.settings.store.githubToken,i=`GitHub API Rate: ${this.rateLimit.used}/${this.rateLimit.limit} used, ${this.rateLimit.remaining} left | Resets in ${o} min (${e.toLocaleTimeString()}) | ${s?"\u2713 Using token":"\u26A0 No token (60/h)"}`;this.logger.showInfo(i)}compareVersions(e,t){if(!e&&!t)return 0;if(!e)return-1;if(!t)return 1;const o=e.split(".").map(i=>parseInt(i)||0),s=t.split(".").map(i=>parseInt(i)||0);for(let i=0;i<Math.max(o.length,s.length);i++){const r=o[i]||0,a=s[i]||0;if(r!==a)return r-a}return 0}};m(p,"UpdateCheckerPlugin");let d=p;window.customjs.__LAST_PLUGIN_CLASS__=d;})();
