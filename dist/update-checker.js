(()=>{var w=Object.defineProperty;var f=(m,g)=>w(m,"name",{value:g,configurable:!0});const u=class u extends CustomModule{constructor(){super({name:"Update Checker \u{1F504}",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],description:"Automatically checks for updates to VRCX core system and plugins with hot-reload support",tags:["Utility","Updates","Automation"],required_dependencies:["dialog-api"]});this.checkTimer=null;this.pluginCheckTimer=null;this.isCheckingCore=!1;this.isCheckingPlugins=!1;this.lastCoreCheck=0;this.lastPluginCheck=0;this.rateLimit=null;this.coreRepoOwner="";this.coreRepoName="";this.GITHUB_API="https://api.github.com";this.TARGET_PATH="%APPDATA%\\VRCX\\custom.js";this.actionButtons=[{title:"Check Core Updates",color:"primary",icon:"ri-refresh-line",description:"Manually check for core system updates",callback:async()=>{await this.checkCoreUpdate(!0)}},{title:"Check Plugin Updates",color:"info",icon:"ri-plugin-line",description:"Manually check for plugin updates",callback:async()=>{await this.checkPluginUpdates(!0)}},{title:"Download Core Update",color:"success",icon:"ri-download-line",description:"Download latest core system update",callback:async()=>{await this.downloadCoreUpdate()}},{title:"Show Rate Limit Status",color:"warning",icon:"ri-time-line",description:"Display current GitHub API rate limit status",callback:()=>{this.showRateLimitStatus()}},{title:"Reset Dismissed Updates",color:"danger",icon:"ri-close-circle-line",description:"Clear the list of dismissed update notifications",callback:()=>{this.settings.store.dismissedCoreVersions="[]",this.logger.showSuccess("Dismissed updates cleared")}}]}get downloadUrl(){return`https://github.com/${this.coreRepoOwner}/${this.coreRepoName}/releases/latest/download/custom.js`}async load(){await super.load();const e=window.customjs.types.SettingType;this.settings=this.defineSettings({checkCoreOnStartup:{type:e.BOOLEAN,description:"Automatically check for core system updates when the application starts",default:!0},coreCheckInterval:{type:e.TIMESPAN,description:"How often to check for core system updates",default:36e5,min:3e5},showCoreNotification:{type:e.BOOLEAN,description:"Display a notification when a new core version is available",default:!0},openReleasePageOnUpdate:{type:e.BOOLEAN,description:"Automatically open the GitHub release page when an update is found",default:!1},checkPluginsOnStartup:{type:e.BOOLEAN,description:"Automatically check for plugin updates when the application starts",default:!0},pluginCheckInterval:{type:e.TIMESPAN,description:"How often to check for plugin updates",default:72e5,min:3e5},autoUpdatePlugins:{type:e.BOOLEAN,description:"Automatically hot-reload updated plugins without confirmation",default:!1},showNewPlugins:{type:e.BOOLEAN,description:"Display a modal when new plugins are discovered in repositories",default:!0},githubToken:{type:e.STRING,description:"Optional: Increases API rate limit from 60 to 5000 requests/hour",default:""},showRateLimitWarnings:{type:e.BOOLEAN,description:"Display warnings when approaching GitHub API rate limits",default:!0},enableDesktopNotifications:{type:e.BOOLEAN,description:"Show Windows desktop notifications for updates",default:!0},enableVrNotifications:{type:e.BOOLEAN,description:"Show VR overlay notifications (XSOverlay/OVRToolkit) for updates",default:!1},vrNotificationTimeout:{type:e.NUMBER,description:"VR notification duration in seconds",default:10,min:3,max:60},announceViaIpc:{type:e.BOOLEAN,description:"Broadcast update notifications to external apps via IPC",default:!1},seenPlugins:{type:e.STRING,description:"Tracked seen plugins",default:"[]",hidden:!0},lastCoreVersion:{type:e.STRING,description:"Last seen core version",default:"",hidden:!0},dismissedCoreVersions:{type:e.STRING,description:"Dismissed core versions",default:"[]",hidden:!0}}),this.parseRepositoryInfo(),this.settings.store.checkCoreOnStartup&&setTimeout(()=>this.checkCoreUpdate(!1),5e3),this.settings.store.checkPluginsOnStartup&&setTimeout(()=>this.checkPluginUpdates(!1),7e3)}async start(){this.enabled&&(this.started=!0,this.startPeriodicChecks(),this.logger.log("Update checker started"))}async stop(){this.stopPeriodicChecks(),this.started=!1,this.logger.log("Update checker stopped")}async onLogin(){this.settings.store.checkCoreOnStartup&&setTimeout(()=>this.checkCoreUpdate(!1),5e3),this.settings.store.checkPluginsOnStartup&&setTimeout(()=>this.checkPluginUpdates(!1),7e3)}parseRepositoryInfo(){try{const e=window.customjs?.sourceUrl||"";if(!e){this.logger.warn("No sourceUrl found in window.customjs");return}const i=window.customjs?.utils;if(!i?.parseRepositoryUrl){this.logger.warn("Utils.parseRepositoryUrl not available, falling back to manual parsing");const o=e.match(/github\.com\/([^\/]+)\/([^\/]+)/);o&&(this.coreRepoOwner=o[1],this.coreRepoName=o[2]);return}const t=i.parseRepositoryUrl(e);t?(this.coreRepoOwner=t.owner,this.coreRepoName=t.repo,this.logger.log(`Parsed repository: ${this.coreRepoOwner}/${this.coreRepoName} (${t.platform})`),t.branch&&this.logger.log(`  \u2192 Branch: ${t.branch}`)):this.logger.warn("Failed to parse repository info from sourceUrl")}catch(e){const i=e instanceof Error?e.message:String(e);this.logger.error(`Error parsing repository info: ${i}`)}}startPeriodicChecks(){this.stopPeriodicChecks(),this.checkTimer=setInterval(()=>{this.checkCoreUpdate(!1)},this.settings.store.coreCheckInterval),this.pluginCheckTimer=setInterval(()=>{this.checkPluginUpdates(!1)},this.settings.store.pluginCheckInterval)}stopPeriodicChecks(){this.checkTimer&&(clearInterval(this.checkTimer),this.checkTimer=null),this.pluginCheckTimer&&(clearInterval(this.pluginCheckTimer),this.pluginCheckTimer=null)}async fetchWithRateLimit(e){const i={Accept:"application/vnd.github.v3+json"},t=this.settings.store.githubToken;t&&(i.Authorization=`token ${t}`);const o=await fetch(e,{headers:i});return this.rateLimit={limit:parseInt(o.headers.get("X-RateLimit-Limit")||"0"),remaining:parseInt(o.headers.get("X-RateLimit-Remaining")||"0"),reset:parseInt(o.headers.get("X-RateLimit-Reset")||"0"),used:parseInt(o.headers.get("X-RateLimit-Used")||"0")},this.settings.store.showRateLimitWarnings&&this.rateLimit.remaining<10&&this.logger.showWarning(`GitHub API rate limit low: ${this.rateLimit.remaining}/${this.rateLimit.limit} remaining`),o}async checkCoreUpdate(e){if(this.isCheckingCore){e&&this.logger.showInfo("Core update check already in progress");return}if(!this.coreRepoOwner||!this.coreRepoName){e&&this.logger.showError("Repository information not available");return}this.isCheckingCore=!0;try{e&&this.logger.showInfo("Checking for core system updates...");const i=`${this.GITHUB_API}/repos/${this.coreRepoOwner}/${this.coreRepoName}/releases/latest`,t=await this.fetchWithRateLimit(i);if(!t.ok)throw new Error(`GitHub API error: ${t.status} ${t.statusText}`);const o=await t.json(),s=o.tag_name,a=window.customjs?.build||0,n=parseInt(s);this.lastCoreCheck=Date.now();const r=JSON.parse(this.settings.store.dismissedCoreVersions||"[]").includes(s);n>a&&!r?(this.settings.store.lastCoreVersion=s,await this.showCoreUpdateNotification(o,e)):e&&(r?this.logger.showInfo(`Update ${s} was previously dismissed. Current: ${a}`):this.logger.showSuccess(`Plugin System is up to date (build ${a})`))}catch(i){const t=i instanceof Error?i.message:"Unknown error";this.logger.error("Failed to check for core updates:",t),e&&this.logger.showError("Failed to check for updates: "+t)}finally{this.isCheckingCore=!1}}async showCoreUpdateNotification(e,i){const t=window.customjs?.build||0,o=new Date(e.published_at).toLocaleString(),s=`A new version of the VRCX Plugin System is available!

Current: ${t}
Latest: ${e.tag_name}

Released: ${o}`;if((this.settings.store.showCoreNotification||i)&&(this.logger.showInfo("New VRCX Plugin System update available: "+e.tag_name),this.settings.store.enableDesktopNotifications&&window.AppApi?.DesktopNotification&&window.AppApi.DesktopNotification("\u{1F504} Plugin System Update Available",`${e.tag_name} is now available`,""),this.settings.store.enableVrNotifications&&this.sendVrNotification("\u{1F504} Plugin System Update",`${e.tag_name} available`),this.settings.store.announceViaIpc&&window.AppApi?.SendIpc&&window.AppApi.SendIpc("UpdateAvailable",JSON.stringify({component:"plugin-system",currentVersion:t,latestVersion:e.tag_name,releaseUrl:e.html_url}))),await this.showConfirmDialog("\u{1F504} VRCX Plugin System Update Available",s,"View Release","Dismiss"))await this.downloadCoreUpdate();else{const n=JSON.parse(this.settings.store.dismissedCoreVersions||"[]");n.includes(e.tag_name)||(n.push(e.tag_name),this.settings.store.dismissedCoreVersions=JSON.stringify(n))}}async checkPluginUpdates(e){if(this.isCheckingPlugins){e&&this.logger.showInfo("Plugin update check already in progress");return}this.isCheckingPlugins=!0;try{e&&this.logger.showInfo("Checking for plugin updates...");const t=(window.customjs?.repos||[]).filter(n=>n.enabled);if(t.length===0){e&&this.logger.showWarning("No enabled plugin repositories found");return}const o=[],s=[],a=new Set(JSON.parse(this.settings.store.seenPlugins||"[]"));for(const n of t)try{await n.fetch();const l=n.data?.modules||[];for(const r of l){const c=r.id||r.name;a.has(c)||(s.push({...r,repoName:n.metadata?.name||"Unknown Repo"}),a.add(c));const d=window.customjs?.modules?.find(p=>p.metadata?.id===c||p.metadata?.name===r.name);d&&this.compareVersions(d.metadata?.version,r.version)<0&&o.push({id:c,name:r.name,currentVersion:d.metadata?.version,latestVersion:r.version,needsUpdate:!0,url:r.url,repoUrl:n.url})}}catch(l){const r=l instanceof Error?l.message:String(l);this.logger.error(`Failed to check repository ${n.url}: ${r}`)}this.settings.store.seenPlugins=JSON.stringify(Array.from(a)),this.lastPluginCheck=Date.now(),o.length>0?await this.handlePluginUpdates(o,e):e&&this.logger.showSuccess("All plugins are up to date"),s.length>0&&this.settings.store.showNewPlugins&&await this.showNewPluginsModal(s)}catch(i){const t=i instanceof Error?i.message:"Unknown error";this.logger.error("Failed to check for plugin updates:",t),e&&this.logger.showError("Failed to check for plugin updates: "+t)}finally{this.isCheckingPlugins=!1}}async applyPluginUpdates(e){this.logger.showInfo(`Updating ${e.length} plugin(s)...`);let i=0,t=0;for(const o of e)try{const s=window.customjs?.reloadModule;if(s)await s(o.id),i++,this.logger.log(`Updated plugin: ${o.name}`);else throw new Error("Reload function not available")}catch(s){t++;const a=s instanceof Error?s.message:String(s);this.logger.error(`Failed to update ${o.name}: ${a}`)}i>0&&this.logger.showSuccess(`Successfully updated ${i} plugin(s)`),t>0&&this.logger.showError(`Failed to update ${t} plugin(s)`)}async showNewPluginsModal(e){if(!window.customjs?.getModule("dialog-api"))return;const t=e.map(o=>`\u2022 ${o.name} (${o.version||"unknown"})
  From: ${o.repoName}
  ${o.description||"No description"}`).join(`

`);await this.showAlertDialog("\u2728 New Plugins Discovered",`${e.length} new plugin(s) have been found in your repositories:

${t}

You can enable them from the Plugin Manager.`,"OK")}showRateLimitStatus(){if(!this.rateLimit){this.logger.showInfo("No GitHub API requests made yet");return}const e=new Date(this.rateLimit.reset*1e3),i=Math.max(0,this.rateLimit.reset*1e3-Date.now()),t=Math.floor(i/6e4),o=!!this.settings.store.githubToken,s=`GitHub API Rate: ${this.rateLimit.used}/${this.rateLimit.limit} used, ${this.rateLimit.remaining} left | Resets in ${t} min (${e.toLocaleTimeString()}) | ${o?"\u2713 Using token":"\u26A0 No token (60/h)"}`;this.logger.showInfo(s)}compareVersions(e,i){if(!e&&!i)return 0;if(!e)return-1;if(!i)return 1;const t=e.split(".").map(s=>parseInt(s)||0),o=i.split(".").map(s=>parseInt(s)||0);for(let s=0;s<Math.max(t.length,o.length);s++){const a=t[s]||0,n=o[s]||0;if(a!==n)return a-n}return 0}async downloadCoreUpdate(){try{this.logger.showInfo("Starting core system download...");const e=window.customjs?.utils,i=this.TARGET_PATH;if(e?.copyToClipboard?await e.copyToClipboard(i,"Install path"):navigator?.clipboard?.writeText&&await navigator.clipboard.writeText(i),await this.showAlertDialog("\u{1F4E5} Downloading Update",`The download will start in a moment.

\u2705 Install path copied to clipboard:
${i}

\u{1F4DD} When the browser's "Save As" dialog appears:
1. Paste (Ctrl+V) into the "File name:" field
2. Click "Save" to overwrite the existing file

The browser will handle the download.`,"Start Download"),e?.downloadFile){const t=await e.downloadFile(this.downloadUrl,"custom.js","application/javascript");if(t.success)this.logger.log(`Download initiated via ${t.method}`),await this.promptForReload();else throw new Error(t.error||"Download failed")}else await this.showAlertDialog("\u26A0\uFE0F Download Utility Not Available",`Please download manually from:

${this.downloadUrl}

And save to:
${i}`,"OK")}catch(e){const i=e instanceof Error?e.message:String(e);this.logger.error(`Failed to download core update: ${i}`),this.logger.showError("Download failed. Please try manually."),await this.showAlertDialog("\u26A0\uFE0F Download Failed",`Automatic download failed.

Please download manually from:
${this.downloadUrl}

And save to:
${this.TARGET_PATH}`,"OK")}}async getLatestRelease(){try{const e=`${this.GITHUB_API}/repos/${this.coreRepoOwner}/${this.coreRepoName}/releases/latest`,i=await this.fetchWithRateLimit(e);return i.ok?await i.json():null}catch{return null}}async promptForReload(){await new Promise(i=>setTimeout(i,2e3)),await this.showConfirmDialog("\u{1F504} Reload VRCX?",`The update has been downloaded.

Have you saved it to the correct location?

Reload VRCX now to apply the update?`,"Reload Now","Later")?(this.logger.showInfo("Reloading VRCX to apply core system update..."),window.location.reload()):this.logger.showInfo("Reload later to apply the update")}sendVrNotification(e,i){const t=window.AppApi;if(!t)return;const o=(this.settings.store.vrNotificationTimeout||10)*1e3;try{t.XSNotification&&t.XSNotification(e,i,o,1,"")}catch{this.logger.warn("Failed to send XSOverlay notification")}try{t.OVRTNotification&&t.OVRTNotification(!0,!0,e,i,o,1,"")}catch{this.logger.warn("Failed to send OVRToolkit notification")}}async handlePluginUpdates(e,i){if(!window.customjs?.getModule("dialog-api")){this.logger.showWarning(`${e.length} plugin update(s) available, but dialog-api not found`);return}const o=e.map(s=>`\u2022 ${s.name}: ${s.currentVersion||"?"} \u2192 ${s.latestVersion||"?"}`).join(`
`);this.logger.showInfo(`Found ${e.length} plugin update(s)`),this.settings.store.enableDesktopNotifications&&window.AppApi?.DesktopNotification&&window.AppApi.DesktopNotification("\u{1F50C} Plugin Updates Available",`${e.length} plugin(s) can be updated`,""),this.settings.store.enableVrNotifications&&this.sendVrNotification("\u{1F50C} Plugin Updates",`${e.length} update(s) available`),this.settings.store.announceViaIpc&&window.AppApi?.SendIpc&&window.AppApi.SendIpc("PluginUpdates",JSON.stringify({count:e.length,plugins:e.map(s=>({id:s.id,name:s.name,currentVersion:s.currentVersion,latestVersion:s.latestVersion}))})),this.settings.store.autoUpdatePlugins&&!i?await this.applyPluginUpdates(e):await this.showConfirmDialog("\u{1F504} Plugin Updates Available",`The following plugins have updates available:

${o}

Would you like to update them now?`,"Update All","Skip")&&await this.applyPluginUpdates(e)}};f(u,"UpdateCheckerPlugin");let h=u;window.customjs.__LAST_PLUGIN_CLASS__=h;})();
