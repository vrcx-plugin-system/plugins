(()=>{var w=Object.defineProperty;var g=(f,p)=>w(f,"name",{value:p,configurable:!0});const u=class u extends CustomModule{constructor(){super({name:"Update Checker \u{1F504}",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],description:"Automatically checks for updates to VRCX core system and plugins with hot-reload support",tags:["Utility","Updates","Automation"],required_dependencies:["dialog-api","logger"]});this.checkTimer=null;this.pluginCheckTimer=null;this.isCheckingCore=!1;this.isCheckingPlugins=!1;this.lastCoreCheck=0;this.lastPluginCheck=0;this.rateLimit=null;this.coreRepoOwner="";this.coreRepoName="";this.GITHUB_API="https://api.github.com";this.actionButtons=[{title:"Check Core Updates",color:"primary",icon:"ri-refresh-line",description:"Manually check for VRCX core system updates",callback:async()=>{await this.checkCoreUpdate(!0)}},{title:"Check Plugin Updates",color:"info",icon:"ri-plugin-line",description:"Manually check for plugin updates",callback:async()=>{await this.checkPluginUpdates(!0)}},{title:"Show Rate Limit Status",color:"warning",icon:"ri-time-line",description:"Display current GitHub API rate limit status",callback:()=>{this.showRateLimitStatus()}},{title:"Reset Dismissed Updates",color:"danger",icon:"ri-close-circle-line",description:"Clear the list of dismissed update notifications",callback:()=>{this.settings.store.dismissedCoreVersions="[]",this.logger.showSuccess("Dismissed updates cleared")}}]}async load(){await super.load();const e=window.customjs.types.SettingType;this.settings=this.defineSettings({checkCoreOnStartup:{type:e.BOOLEAN,description:"Automatically check for VRCX core system updates when the application starts",default:!0},coreCheckInterval:{type:e.TIMESPAN,description:"How often to check for core system updates",default:36e5,min:3e5},showCoreNotification:{type:e.BOOLEAN,description:"Display a notification when a new core version is available",default:!0},openReleasePageOnUpdate:{type:e.BOOLEAN,description:"Automatically open the GitHub release page when an update is found",default:!1},checkPluginsOnStartup:{type:e.BOOLEAN,description:"Automatically check for plugin updates when the application starts",default:!0},pluginCheckInterval:{type:e.TIMESPAN,description:"How often to check for plugin updates",default:72e5,min:3e5},autoUpdatePlugins:{type:e.BOOLEAN,description:"Automatically hot-reload updated plugins without confirmation",default:!1},showNewPlugins:{type:e.BOOLEAN,description:"Display a modal when new plugins are discovered in repositories",default:!0},githubToken:{type:e.STRING,description:"Optional: Increases API rate limit from 60 to 5000 requests/hour",default:""},showRateLimitWarnings:{type:e.BOOLEAN,description:"Display warnings when approaching GitHub API rate limits",default:!0},seenPlugins:{type:e.STRING,description:"Tracked seen plugins",default:"[]",hidden:!0},lastCoreVersion:{type:e.STRING,description:"Last seen core version",default:"",hidden:!0},dismissedCoreVersions:{type:e.STRING,description:"Dismissed core versions",default:"[]",hidden:!0}}),this.parseRepositoryInfo(),this.settings.store.checkCoreOnStartup&&setTimeout(()=>this.checkCoreUpdate(!1),5e3),this.settings.store.checkPluginsOnStartup&&setTimeout(()=>this.checkPluginUpdates(!1),7e3)}async start(){this.enabled&&(this.started=!0,this.startPeriodicChecks(),this.logger.log("Update checker started"))}async stop(){this.stopPeriodicChecks(),this.started=!1,this.logger.log("Update checker stopped")}parseRepositoryInfo(){try{const e=window.customjs?.sourceUrl||"";if(!e){this.logger.warn("No sourceUrl found in window.customjs");return}const t=e.match(/github\.com\/([^\/]+)\/([^\/]+)/);t?(this.coreRepoOwner=t[1],this.coreRepoName=t[2],this.logger.log(`Parsed repository: ${this.coreRepoOwner}/${this.coreRepoName}`)):this.logger.warn("Failed to parse repository info from sourceUrl")}catch(e){this.logger.error("Error parsing repository info:",e)}}startPeriodicChecks(){this.stopPeriodicChecks(),this.checkTimer=setInterval(()=>{this.checkCoreUpdate(!1)},this.settings.store.coreCheckInterval),this.pluginCheckTimer=setInterval(()=>{this.checkPluginUpdates(!1)},this.settings.store.pluginCheckInterval)}stopPeriodicChecks(){this.checkTimer&&(clearInterval(this.checkTimer),this.checkTimer=null),this.pluginCheckTimer&&(clearInterval(this.pluginCheckTimer),this.pluginCheckTimer=null)}async fetchWithRateLimit(e){const t={Accept:"application/vnd.github.v3+json"},s=this.settings.store.githubToken;s&&(t.Authorization=`token ${s}`);const o=await fetch(e,{headers:t});return this.rateLimit={limit:parseInt(o.headers.get("X-RateLimit-Limit")||"0"),remaining:parseInt(o.headers.get("X-RateLimit-Remaining")||"0"),reset:parseInt(o.headers.get("X-RateLimit-Reset")||"0"),used:parseInt(o.headers.get("X-RateLimit-Used")||"0")},this.settings.store.showRateLimitWarnings&&this.rateLimit.remaining<10&&this.logger.showWarning(`GitHub API rate limit low: ${this.rateLimit.remaining}/${this.rateLimit.limit} remaining`),o}async checkCoreUpdate(e){if(this.isCheckingCore){e&&this.logger.showInfo("Core update check already in progress");return}if(!this.coreRepoOwner||!this.coreRepoName){e&&this.logger.showError("Repository information not available");return}this.isCheckingCore=!0;try{e&&this.logger.showInfo("Checking for core system updates...");const t=`${this.GITHUB_API}/repos/${this.coreRepoOwner}/${this.coreRepoName}/releases/latest`,s=await this.fetchWithRateLimit(t);if(!s.ok)throw new Error(`GitHub API error: ${s.status} ${s.statusText}`);const o=await s.json(),i=o.tag_name,r=window.customjs?.build||0,n=parseInt(i);this.lastCoreCheck=Date.now();const a=JSON.parse(this.settings.store.dismissedCoreVersions||"[]").includes(i);n>r&&!a?(this.settings.store.lastCoreVersion=i,await this.showCoreUpdateNotification(o,e)):e&&(a?this.logger.showInfo(`Update ${i} was previously dismissed. Current: ${r}`):this.logger.showSuccess(`VRCX is up to date (build ${r})`))}catch(t){const s=t instanceof Error?t.message:"Unknown error";this.logger.error("Failed to check for core updates:",s),e&&this.logger.showError("Failed to check for updates: "+s)}finally{this.isCheckingCore=!1}}async showCoreUpdateNotification(e,t){const o=`A new version of VRCX is available!

Current: ${window.customjs?.build||0}
Latest: ${e.tag_name}

Released: ${new Date(e.published_at).toLocaleString()}`;(this.settings.store.showCoreNotification||t)&&this.logger.showInfo("New VRCX update available: "+e.tag_name);const i=window.customjs?.getModule("dialog-api");if(i)if(await i.showConfirm({title:"\u{1F504} VRCX Update Available",message:o,confirmText:"View Release",cancelText:"Dismiss",width:500}))(this.settings.store.openReleasePageOnUpdate||t)&&window.open(e.html_url,"_blank");else{const n=JSON.parse(this.settings.store.dismissedCoreVersions||"[]");n.includes(e.tag_name)||(n.push(e.tag_name),this.settings.store.dismissedCoreVersions=JSON.stringify(n))}else this.settings.store.openReleasePageOnUpdate&&window.open(e.html_url,"_blank")}async checkPluginUpdates(e){if(this.isCheckingPlugins){e&&this.logger.showInfo("Plugin update check already in progress");return}this.isCheckingPlugins=!0;try{e&&this.logger.showInfo("Checking for plugin updates...");const s=(window.customjs?.repos||[]).filter(n=>n.enabled);if(s.length===0){e&&this.logger.showWarning("No enabled plugin repositories found");return}const o=[],i=[],r=new Set(JSON.parse(this.settings.store.seenPlugins||"[]"));for(const n of s)try{await n.load();const c=n.data?.plugins||[];for(const a of c){const l=a.id||a.name;r.has(l)||(i.push({...a,repoName:n.metadata?.name||"Unknown Repo"}),r.add(l));const h=window.customjs?.modules?.find(d=>d.metadata?.id===l||d.metadata?.name===a.name);h&&this.compareVersions(h.metadata?.version,a.version)<0&&o.push({id:l,name:a.name,currentVersion:h.metadata?.version,latestVersion:a.version,needsUpdate:!0,url:a.url,repoUrl:n.url})}}catch(c){this.logger.error(`Failed to check repository ${n.url}:`,c)}this.settings.store.seenPlugins=JSON.stringify(Array.from(r)),this.lastPluginCheck=Date.now(),o.length>0?await this.handlePluginUpdates(o,e):e&&this.logger.showSuccess("All plugins are up to date"),i.length>0&&this.settings.store.showNewPlugins&&await this.showNewPluginsModal(i)}catch(t){const s=t instanceof Error?t.message:"Unknown error";this.logger.error("Failed to check for plugin updates:",s),e&&this.logger.showError("Failed to check for plugin updates: "+s)}finally{this.isCheckingPlugins=!1}}async handlePluginUpdates(e,t){const s=window.customjs?.getModule("dialog-api");if(!s){this.logger.showWarning(`${e.length} plugin update(s) available, but dialog-api not found`);return}const o=e.map(i=>`\u2022 ${i.name}: ${i.currentVersion||"?"} \u2192 ${i.latestVersion||"?"}`).join(`
`);this.logger.showInfo(`Found ${e.length} plugin update(s)`),this.settings.store.autoUpdatePlugins&&!t?await this.applyPluginUpdates(e):await s.showConfirm({title:"\u{1F504} Plugin Updates Available",message:`The following plugins have updates available:

${o}

Would you like to update them now?`,confirmText:"Update All",cancelText:"Skip",width:500})&&await this.applyPluginUpdates(e)}async applyPluginUpdates(e){this.logger.showInfo(`Updating ${e.length} plugin(s)...`);let t=0,s=0;for(const o of e)try{const i=window.customjs?.reloadModule;if(i)await i(o.id),t++,this.logger.log(`Updated plugin: ${o.name}`);else throw new Error("Reload function not available")}catch(i){s++,this.logger.error(`Failed to update ${o.name}:`,i)}t>0&&this.logger.showSuccess(`Successfully updated ${t} plugin(s)`),s>0&&this.logger.showError(`Failed to update ${s} plugin(s)`)}async showNewPluginsModal(e){const t=window.customjs?.getModule("dialog-api");if(!t)return;const s=e.map(o=>`\u2022 ${o.name} (${o.version||"unknown"})
  From: ${o.repoName}
  ${o.description||"No description"}`).join(`

`);await t.showAlert({title:"\u2728 New Plugins Discovered",message:`${e.length} new plugin(s) have been found in your repositories:

${s}

You can enable them from the Plugin Manager.`,confirmText:"OK",width:600})}showRateLimitStatus(){if(!this.rateLimit){this.logger.showInfo("No GitHub API requests made yet");return}const e=new Date(this.rateLimit.reset*1e3),t=Math.max(0,this.rateLimit.reset*1e3-Date.now()),s=Math.floor(t/6e4),o=!!this.settings.store.githubToken,i=["GitHub API Rate Limit Status","",`Used: ${this.rateLimit.used}/${this.rateLimit.limit}`,`Remaining: ${this.rateLimit.remaining}`,`Resets in: ${s} minutes`,`Reset time: ${e.toLocaleTimeString()}`,"",o?"\u2713 Using personal access token":"\u26A0 No token configured (60 req/hour limit)"].join(`
`);this.logger.showInfo(i)}compareVersions(e,t){if(!e&&!t)return 0;if(!e)return-1;if(!t)return 1;const s=e.split(".").map(i=>parseInt(i)||0),o=t.split(".").map(i=>parseInt(i)||0);for(let i=0;i<Math.max(s.length,o.length);i++){const r=s[i]||0,n=o[i]||0;if(r!==n)return r-n}return 0}};g(u,"UpdateCheckerPlugin");let m=u;})();
