(()=>{var p=Object.defineProperty;var h=(m,e)=>p(m,"name",{value:e,configurable:!0});const f=class f extends CustomModule{constructor(){super({name:"Tag Manager \u{1F3F7}\uFE0F",description:"Custom user tags management with URL-based loading",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Social","Enhancement"],required_dependencies:["tag-api"]}),this.loadedTags=new Map,this.actionButtons=[{title:"Refresh Tags",color:"success",icon:"ri-refresh-line",description:"Reload tags from all configured URLs",callback:async()=>{this.logger.showInfo("Refreshing tags from URLs..."),await this.refreshTags();const e=this.getLoadedTagsCount();this.logger.showSuccess(`Loaded ${e} tags successfully!`)}},{title:"Find Tagged Users",color:"primary",icon:"ri-search-line",description:"Search all stores for tagged users and print to console",callback:async()=>{this.logger.showInfo("Searching for tagged users...");const e=await this.findTaggedUsers(!0),r=Object.values(e).reduce((t,o)=>t+Object.keys(o).length,0);this.logger.showSuccess(`Found ${r} tagged users (see console for details)`)}}]}async load(){this.registerEvent("tags-loaded",{description:"Fired when tags are successfully loaded from URLs",payload:{totalTags:"number - Total number of tags loaded",sources:"number - Number of sources loaded from",timestamp:"number - Unix timestamp"}}),this.registerEvent("tags-applied",{description:"Fired when tags are applied to users in UI",payload:{userId:"string - User ID",tags:"array - Array of tag names applied",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("tagged-player-join",{description:"Fired when a tagged player joins your instance",payload:{userId:"string - User ID",displayName:"string - Display name",tags:"array - Array of tag names",timestamp:"number - Unix timestamp"}});const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F3F7}\uFE0F Tag Sources",description:"Configure tag loading sources"},worlds:{name:"\u{1F30D} World Tags",description:"Configure world blacklist/tag sources"},timing:{name:"\u{1F3F7}\uFE0F Update Timing",description:"Control when and how often tags are refreshed"},notifications:{name:"\u{1F3F7}\uFE0F Notifications",description:"Configure notifications for tagged players"}}),this.settings=this.defineSettings({urls_user:{type:e.CUSTOM,description:"URLs to load user tags from",category:"general",default:["https://github.com/Bluscream/FewTags/raw/refs/heads/main/usertags.json"]},urls_worlds:{type:e.CUSTOM,description:"URLs to load world blacklists from",category:"worlds",default:["https://github.com/cyberkitsune/chatbox-club-blacklist/raw/refs/heads/master/npblacklist.json"]},worldTagText:{type:e.STRING,description:"Tag text for blacklisted worlds",category:"worlds",default:"ChatBox Blacklisted"},worldTagColor:{type:e.STRING,description:"Tag color for blacklisted worlds (hex)",category:"worlds",default:"#FF0000"},updateInterval:{type:e.TIMESPAN,description:"How often to reload tags",category:"timing",default:36e5},initialDelay:{type:e.TIMESPAN,description:"Delay before first tag load after login",category:"timing",default:5e3},notifyOnPlayerJoin:{type:e.BOOLEAN,description:"Show notification when a tagged player joins your instance",category:"notifications",default:!0}}),this.logger.log(`\u2699\uFE0F Configured user tag sources: ${this.settings.store.urls_user.length}`),this.logger.log(`\u2699\uFE0F Configured world tag sources: ${this.settings.store.urls_worlds.length}`),this.logger.log("Tag Manager plugin ready"),this.loaded=!0}async start(){this.setupPlayerJoinMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("Tag Manager plugin started (waiting for login to load tags)")}async onLogin(e){this.logger.log(`User logged in: ${e?.displayName}`);const r=this.settings.store.initialDelay;setTimeout(async()=>{await this.loadAllTags(),this.startPeriodicUpdates();try{const o=`VRCX Custom Tags loaded at ${this.utils?.getTimestamp()||new Date().toISOString()}`;this.logger.log(o,{console:!0,vrcx:{message:!0}},"info")}catch{this.logger.log(`Tags loaded at ${new Date().toISOString()}`)}},r),this.logger.log(`Tag loading scheduled (delay: ${r}ms)`)}async stop(){this.logger.log("Stopping Tag Manager"),this.loadedTags.clear(),await super.stop()}async loadAllTags(){const e=this.settings.store.urls_user||[],r=this.settings.store.urls_worlds||[],t=e.length+r.length;if(t===0){this.logger.warn("No tag URLs configured");return}this.logger.log(`Loading tags from ${t} URLs...`);for(const n of e)try{await this.loadTagsFromUrl(n,"user")}catch(l){const s=l instanceof Error?l.message:String(l);this.logger.error(`Failed to load user tags from ${n}: ${s}`)}for(const n of r)try{await this.loadTagsFromUrl(n,"world")}catch(l){const s=l instanceof Error?l.message:String(l);this.logger.error(`Failed to load world tags from ${n}: ${s}`)}const o=this.getLoadedTagsCount();this.logger.log(`\u2713 Tag loading complete (${o} tags loaded)`),this.emit("tags-loaded",{totalTags:o,sources:t,timestamp:Date.now()})}async loadTagsFromUrl(e,r="user"){try{this.logger.log(`Fetching ${r} tags from: ${e}`);const t=await fetch(e);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const o=await t.json();let n;r==="world"?n=this.parseWorldData(o,e):n=this.parseTagData(o,e),n.length>0?(this.loadedTags.set(e,new Set(n)),r==="world"?await this.applyWorldTags(n):await this.applyTags(n),this.logger.log(`\u2713 Loaded ${n.length} ${r} tags from ${e}`)):this.logger.warn(`No valid ${r} tags found in ${e}`)}catch(t){const o=t instanceof Error?t.message:String(t);throw this.logger.error(`Error loading ${r} tags from ${e}: ${o}`),t}}parseTagData(e,r){const t=[];if(typeof e=="object"&&!Array.isArray(e)){for(const[o,n]of Object.entries(e))if(n&&n.tags&&Array.isArray(n.tags)){const l=n.tag||n.tags[0]||"Custom Tag",s=n.foreground_color||"#FF00C6";t.push({UserId:o,Tag:this.cleanTagText(l),TagColour:s})}}else if(Array.isArray(e))t.push(...e);else if(e.tags&&Array.isArray(e.tags))t.push(...e.tags);else if(e.data&&Array.isArray(e.data))t.push(...e.data);else return this.logger.warn(`Unknown data structure in ${r}`),[];return t.filter(o=>this.validateTag(o,r))}parseWorldData(e,r){const t=[];if(e.worlds&&Array.isArray(e.worlds)){const o=this.settings.store.worldTagText||"ChatBox Blacklisted",n=this.settings.store.worldTagColor||"#FF0000";for(const l of e.worlds)l.id&&l.id.startsWith("wrld_")&&t.push({WorldId:l.id,WorldName:l.name||l.id,Tag:o,TagColour:n,Comment:l.comment||""})}else if(Array.isArray(e)){const o=this.settings.store.worldTagText||"ChatBox Blacklisted",n=this.settings.store.worldTagColor||"#FF0000";for(const l of e)l.id&&l.id.startsWith("wrld_")&&t.push({WorldId:l.id,WorldName:l.name||l.id,Tag:o,TagColour:n,Comment:l.comment||""})}else return this.logger.warn(`Unknown world data structure in ${r}`),[];return t.filter(o=>this.validateWorldTag(o))}validateWorldTag(e){return!(!e||typeof e!="object"||!e.WorldId||typeof e.WorldId!="string"||!e.WorldId.startsWith("wrld_")||!e.Tag||typeof e.Tag!="string")}cleanTagText(e){return typeof e!="string"?"Custom Tag":e.replace(/<color=#[^>]*>/g,"").replace(/<\/color>/g,"").replace(/\*\*/g,"").replace(/\*/g,"").replace(/_/g,"").trim()}validateTag(e,r){return!e||typeof e!="object"||!e.UserId||typeof e.UserId!="string"||!e.Tag||typeof e.Tag!="string"?!1:(e.TagColour||(e.TagColour="#FF00C6"),!0)}async applyTags(e){const r=window.$pinia?.user;if(!r){this.logger.warn("User store not available, cannot apply tags");return}for(const t of e)try{r.addCustomTag({UserId:t.UserId,Tag:t.Tag,TagColour:t.TagColour})}catch(o){const n=o instanceof Error?o.message:String(o);this.logger.error(`Error applying tag for user ${t.UserId}: ${n}`)}await this.checkFriendsAndBlockedForTags()}async applyWorldTags(e){const r=window.customjs.getModule("tag-api");if(!r||!r.addWorldTag){this.logger.error("Tag API module not found or addWorldTag method missing - world tags disabled");return}for(const t of e)try{r.addWorldTag(t.WorldId,t.Tag,t.TagColour)}catch(o){const n=o instanceof Error?o.message:String(o);this.logger.error(`Error applying tag for world ${t.WorldId}: ${n}`)}this.logger.log(`Applied ${e.length} world tags via Tag API`)}async findTaggedUsers(e=!1,r=!1){const t={friends:{},blocked:{},muted:{},hideAvatar:{},interactOff:{},showAvatar:{},interactOn:{},cachedUsers:{},gameLog:{},feed:{},friendLog:{},notificationLog:{}};let o=0;const n=[],l=h((s,g,a,i)=>{try{t[s]||(t[s]={});const d=i?.tag||i?.Tag||"Unknown Tag";t[s][g]=d,o++,n.push({store:s,userId:g,displayName:a||"",tagText:d}),e&&this.logger.log(`[${s}] ${a||g} - ${d}`)}catch{}},"addTaggedUser");try{const s=window.$pinia?.user?.currentUser?.friends||[];for(const g of s){const a=this.getUserTag(g);if(a){const i=this.getFriendName(g);l("friends",g,i,a)}}}catch(s){this.logger.logError("Error checking friends:",s?.message)}try{const s=Array.from(window.$pinia?.moderation?.cachedPlayerModerations?.values()||[]);for(const g of s){const a=this.getUserTag(g.targetUserId);if(a){const i=this.getModerationStoreName(g.type);l(i,g.targetUserId,g.targetDisplayName,a)}}}catch(s){this.logger.logError("Error checking moderations:",s?.message)}try{const s=window.$pinia?.user?.cachedUsers||new Map;for(const[g,a]of s)if(g&&g.startsWith&&g.startsWith("usr_")){const i=this.getUserTag(g);i&&!t.friends[g]&&l("cachedUsers",g,a?.displayName,i)}}catch(s){this.logger.logError("Error checking cached users:",s?.message)}try{const s=window.$pinia?.gameLog?.gameLogTable||[],g=new Set;for(const a of s){const i=a.user_id||a.userId;if(i&&i.startsWith("usr_")&&!g.has(i)){const d=this.getUserTag(i);if(d){g.add(i);const c=a.display_name||a.displayName;l("gameLog",i,c,d)}}}}catch(s){this.logger.logError("Error checking game log:",s?.message)}try{const s=window.$pinia?.feed?.sharedFeed||[],g=new Set;for(const a of s){const i=a.user_id||a.userId;if(i&&i.startsWith("usr_")&&!g.has(i)){const d=this.getUserTag(i);if(d){g.add(i);const c=a.display_name||a.displayName;l("feed",i,c,d)}}}}catch(s){this.logger.logError("Error checking feed:",s?.message)}try{const s=window.$pinia?.friend?.friendLog||[],g=new Set;for(const a of s){const i=a.user_id||a.userId;if(i&&i.startsWith("usr_")&&!g.has(i)){const d=this.getUserTag(i);if(d){g.add(i);const c=a.display_name||a.displayName;l("friendLog",i,c,d)}}}}catch(s){this.logger.logError("Error checking friend log:",s?.message)}try{const s=window.$pinia?.notification?.notificationTable||[],g=new Set;for(const a of s){const i=a.sender_user_id||a.senderUserId;if(i&&i.startsWith("usr_")&&!g.has(i)){const d=this.getUserTag(i);if(d){g.add(i);const c=a.sender_username||a.senderUsername;l("notificationLog",i,c,d)}}}}catch(s){this.logger.logError("Error checking notification log:",s?.message)}if(r)try{let s=`userId,store,displayName,tagText
`;for(const a of n){const i=[(a.userId||"").replace(/"/g,'""'),(a.store||"").replace(/"/g,'""'),(a.displayName||"").replace(/"/g,'""'),(a.tagText||"").replace(/"/g,'""')].map(d=>`"${d}"`).join(",");s+=i+`
`}await window.customjs.utils.copyToClipboard(s,"Tagged users CSV")?this.logger.showSuccess(`Copied ${n.length} tagged users to clipboard as CSV`):this.logger.showWarning("Failed to copy tagged users to clipboard")}catch{this.logger.showWarning("Failed to copy tagged users to clipboard")}if(e)try{const s=Object.entries(t).filter(([g,a])=>Object.keys(a).length>0).map(([g,a])=>`${g}: ${Object.keys(a).length}`).join(" | ");this.logger.log(`
\u{1F4CA} Tagged Users Summary (${o} total)`),this.logger.log(s)}catch(s){this.logger.logError("Error printing summary:",s?.message)}return t}getModerationStoreName(e){return{block:"blocked",mute:"muted",hideAvatar:"hideAvatar",interactOff:"interactOff",showAvatar:"showAvatar",interactOn:"interactOn"}[e]||"blocked"}async checkFriendsAndBlockedForTags(){await this.findTaggedUsers(!0)}startPeriodicUpdates(){const e=this.settings.store.updateInterval,r=this.registerTimer(setInterval(async()=>{this.logger.log("Periodic tag update triggered"),await this.loadAllTags()},e));this.logger.log(`Periodic updates started (interval: ${e}ms)`)}setupPlayerJoinMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(e?.length>0){const r=e[e.length-1];r?.type==="OnPlayerJoined"&&this.handlePlayerJoin(r)}}),this.logger.log("Player join monitoring registered")}handlePlayerJoin(e){try{if(!this.settings.store.notifyOnPlayerJoin)return;const r=e.userId||e.user_id,t=e.displayName||e.display_name||"Unknown Player";if(!r)return;const o=this.getUserTag(r);if(o){const n=`${t} joined (${o.tag})`;this.logger.log(n,{console:!0,desktop:!0,xsoverlay:!0,ovrtoolkit:!0},"info"),this.emit("tagged-player-join",{userId:r,displayName:t,tags:[o.tag],timestamp:Date.now()})}}catch(r){const t=r instanceof Error?r.message:String(r);this.logger.error(`Error handling player join: ${t}`)}}getUserTag(e){const r=window.$pinia?.user?.customUserTags;return!r||r.size===0?null:r.get(e)||null}getFriendName(e){return window.$pinia?.user?.cachedUsers?.get(e)?.displayName||e}async refreshTags(){this.logger.log("Manually refreshing tags..."),await this.loadAllTags()}addTag(e,r,t="#FF00C6"){try{const o=window.$pinia?.user;if(!o){this.logger.warn("User store not available, cannot add tag");return}o.addCustomTag({UserId:e,Tag:r,TagColour:t}),this.logger.log(`Manually added tag: ${r} for user ${e}`)}catch(o){const n=o instanceof Error?o.message:String(o);this.logger.error(`Error adding manual tag: ${n}`)}}getLoadedTagsCount(){let e=0;for(const r of this.loadedTags.values())e+=r.size;return e}getActiveTagsCount(){return window.$pinia?.user?.customUserTags?.size||0}getTagsFromUrl(e){return this.loadedTags.get(e)||new Set}};h(f,"TagManagerPlugin");let u=f;window.customjs.__LAST_PLUGIN_CLASS__=u;})();
