(()=>{var f=Object.defineProperty;var c=(u,e)=>f(u,"name",{value:e,configurable:!0});const h=class h extends CustomModule{constructor(){super({name:"\u{1F3F7}\uFE0F Tag Manager",description:"Custom user tags management with URL-based loading",authors:[{name:"Bluscream"}],tags:["Social","Enhancement"],dependencies:[]}),this.loadedTags=new Map}getActionButtons(){return[{label:"Refresh Tags",color:"success",icon:"ri-refresh-line",title:"Reload tags from all configured URLs",callback:async()=>{this.logger.showInfo("Refreshing tags from URLs..."),await this.refreshTags();const e=this.getLoadedTagsCount();this.logger.showSuccess(`Loaded ${e} tags successfully!`)}},{label:"Find Tagged Users",color:"primary",icon:"ri-search-line",title:"Search all stores for tagged users and print to console",callback:async()=>{this.logger.showInfo("Searching for tagged users...");const e=this.findTaggedUsers(!0),t=Object.values(e).reduce((n,i)=>n+Object.keys(i).length,0);this.logger.showSuccess(`Found ${t} tagged users (see console for details)`)}}]}async load(){const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F3F7}\uFE0F Tag Sources",description:"Configure tag loading sources"},timing:{name:"\u{1F3F7}\uFE0F Update Timing",description:"Control when and how often tags are refreshed"},notifications:{name:"\u{1F3F7}\uFE0F Notifications",description:"Configure notifications for tagged players"}}),this.settings=this.defineSettings({urls:{type:e.CUSTOM,description:"URLs to load user tags from",category:"general",default:["https://github.com/Bluscream/FewTags/raw/refs/heads/main/usertags.json"]},updateInterval:{type:e.NUMBER,description:"How often to reload tags (default: 1 hour in ms)",category:"timing",default:36e5},initialDelay:{type:e.NUMBER,description:"Delay before first tag load after login (default: 5 seconds in ms)",category:"timing",default:5e3},notifyOnPlayerJoin:{type:e.BOOLEAN,description:"Show notification when a tagged player joins your instance",category:"notifications",default:!0}}),this.logger.log(`\u2699\uFE0F Configured tag sources: ${this.settings.store.urls.length}`),this.logger.log("Tag Manager plugin ready"),this.loaded=!0}async start(){this.setupPlayerJoinMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("Tag Manager plugin started (waiting for login to load tags)")}async onLogin(e){this.logger.log(`User logged in: ${e?.displayName}`);const t=this.settings.store.initialDelay;setTimeout(async()=>{await this.loadAllTags(),this.startPeriodicUpdates();try{const i=`VRCX Custom Tags loaded at ${this.utils?.getTimestamp()||new Date().toISOString()}`;this.logger.log(i,{console:!0,vrcx:{message:!0}},"info")}catch{this.logger.log(`Tags loaded at ${new Date().toISOString()}`)}},t),this.logger.log(`Tag loading scheduled (delay: ${t}ms)`)}async stop(){this.logger.log("Stopping Tag Manager"),this.loadedTags.clear(),await super.stop()}async loadAllTags(){const e=this.settings.store.urls;if(!e||e.length===0){this.logger.warn("No tag URLs configured");return}this.logger.log(`Loading tags from ${e.length} URLs...`);for(const t of e)try{await this.loadTagsFromUrl(t)}catch(n){this.logger.error(`Failed to load tags from ${t}:`,n)}this.logger.log(`\u2713 Tag loading complete (${this.getLoadedTagsCount()} tags loaded)`)}async loadTagsFromUrl(e){try{this.logger.log(`Fetching tags from: ${e}`);const t=await fetch(e);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const n=await t.json(),i=this.parseTagData(n,e);i.length>0?(this.loadedTags.set(e,new Set(i)),await this.applyTags(i),this.logger.log(`\u2713 Loaded ${i.length} tags from ${e}`)):this.logger.warn(`No valid tags found in ${e}`)}catch(t){throw this.logger.error(`Error loading tags from ${e}:`,t),t}}parseTagData(e,t){const n=[];if(typeof e=="object"&&!Array.isArray(e)){for(const[i,r]of Object.entries(e))if(r&&r.tags&&Array.isArray(r.tags)){const a=r.tag||r.tags[0]||"Custom Tag",o=r.foreground_color||"#FF00C6";n.push({UserId:i,Tag:this.cleanTagText(a),TagColour:o})}}else if(Array.isArray(e))n.push(...e);else if(e.tags&&Array.isArray(e.tags))n.push(...e.tags);else if(e.data&&Array.isArray(e.data))n.push(...e.data);else return this.logger.warn(`Unknown data structure in ${t}`),[];return n.filter(i=>this.validateTag(i,t))}cleanTagText(e){return typeof e!="string"?"Custom Tag":e.replace(/<color=#[^>]*>/g,"").replace(/<\/color>/g,"").replace(/\*\*/g,"").replace(/\*/g,"").replace(/_/g,"").trim()}validateTag(e,t){return!e||typeof e!="object"||!e.UserId||typeof e.UserId!="string"||!e.Tag||typeof e.Tag!="string"?!1:(e.TagColour||(e.TagColour="#FF00C6"),!0)}async applyTags(e){const t=window.$pinia?.user;if(!t){this.logger.warn("User store not available, cannot apply tags");return}for(const n of e)try{t.addCustomTag({UserId:n.UserId,Tag:n.Tag,TagColour:n.TagColour})}catch(i){this.logger.error(`Error applying tag for user ${n.UserId}:`,i)}this.checkFriendsAndBlockedForTags()}findTaggedUsers(e=!1){const t={friends:{},blocked:{},muted:{},hideAvatar:{},interactOff:{},showAvatar:{},interactOn:{},cachedUsers:{},gameLog:{},feed:{},friendLog:{},notificationLog:{}};let n=0;const i=c((r,a,o,s)=>{try{t[r]||(t[r]={});const g=s?.tag||s?.Tag||"Unknown Tag";t[r][a]=g,n++,e&&this.logger.log(`[${r}] ${o||a} - ${g}`)}catch{}},"addTaggedUser");try{const r=window.$pinia?.user?.currentUser?.friends||[];for(const a of r){const o=this.getUserTag(a);if(o){const s=this.getFriendName(a);i("friends",a,s,o)}}}catch(r){this.logger.logError("Error checking friends:",r?.message)}try{const r=Array.from(window.$pinia?.moderation?.cachedPlayerModerations?.values()||[]);for(const a of r){const o=this.getUserTag(a.targetUserId);if(o){const s=this.getModerationStoreName(a.type);i(s,a.targetUserId,a.targetDisplayName,o)}}}catch(r){this.logger.logError("Error checking moderations:",r?.message)}try{const r=window.$pinia?.user?.cachedUsers||new Map;for(const[a,o]of r)if(a&&a.startsWith&&a.startsWith("usr_")){const s=this.getUserTag(a);s&&!t.friends[a]&&i("cachedUsers",a,o?.displayName,s)}}catch(r){this.logger.logError("Error checking cached users:",r?.message)}try{const r=window.$pinia?.gameLog?.gameLogTable||[],a=new Set;for(const o of r){const s=o.user_id||o.userId;if(s&&s.startsWith("usr_")&&!a.has(s)){const g=this.getUserTag(s);if(g){a.add(s);const l=o.display_name||o.displayName;i("gameLog",s,l,g)}}}}catch(r){this.logger.logError("Error checking game log:",r?.message)}try{const r=window.$pinia?.feed?.sharedFeed||[],a=new Set;for(const o of r){const s=o.user_id||o.userId;if(s&&s.startsWith("usr_")&&!a.has(s)){const g=this.getUserTag(s);if(g){a.add(s);const l=o.display_name||o.displayName;i("feed",s,l,g)}}}}catch(r){this.logger.logError("Error checking feed:",r?.message)}try{const r=window.$pinia?.friend?.friendLog||[],a=new Set;for(const o of r){const s=o.user_id||o.userId;if(s&&s.startsWith("usr_")&&!a.has(s)){const g=this.getUserTag(s);if(g){a.add(s);const l=o.display_name||o.displayName;i("friendLog",s,l,g)}}}}catch(r){this.logger.logError("Error checking friend log:",r?.message)}try{const r=window.$pinia?.notification?.notificationTable||[],a=new Set;for(const o of r){const s=o.sender_user_id||o.senderUserId;if(s&&s.startsWith("usr_")&&!a.has(s)){const g=this.getUserTag(s);if(g){a.add(s);const l=o.sender_username||o.senderUsername;i("notificationLog",s,l,g)}}}}catch(r){this.logger.logError("Error checking notification log:",r?.message)}try{if(e){const r=Object.entries(t).filter(([a,o])=>Object.keys(o).length>0).map(([a,o])=>`${a}: ${Object.keys(o).length}`).join(" | ");this.logger.log(`
\u{1F4CA} Tagged Users Summary (${n} total)`),this.logger.log(r)}}catch(r){this.logger.logError("Error printing summary:",r?.message)}return t}getModerationStoreName(e){return{block:"blocked",mute:"muted",hideAvatar:"hideAvatar",interactOff:"interactOff",showAvatar:"showAvatar",interactOn:"interactOn"}[e]||"blocked"}checkFriendsAndBlockedForTags(){this.findTaggedUsers(!0)}startPeriodicUpdates(){const e=this.settings.store.updateInterval,t=this.registerTimer(setInterval(async()=>{this.logger.log("Periodic tag update triggered"),await this.loadAllTags()},e));this.logger.log(`Periodic updates started (interval: ${e}ms)`)}setupPlayerJoinMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(e?.length>0){const t=e[e.length-1];t?.type==="OnPlayerJoined"&&this.handlePlayerJoin(t)}}),this.logger.log("Player join monitoring registered")}handlePlayerJoin(e){try{if(!this.settings.store.notifyOnPlayerJoin)return;const t=e.userId||e.user_id,n=e.displayName||e.display_name||"Unknown Player";if(!t)return;const i=this.getUserTag(t);if(i){const r=`${n} joined (${i.tag})`;this.logger.log(r,{console:!0,desktop:!0,xsoverlay:!0,ovrtoolkit:!0},"info")}}catch(t){this.logger.error("Error handling player join:",t)}}getUserTag(e){const t=window.$pinia?.user?.customUserTags;return!t||t.size===0?null:t.get(e)||null}getFriendName(e){return window.$pinia?.user?.cachedUsers?.get(e)?.displayName||e}async refreshTags(){this.logger.log("Manually refreshing tags..."),await this.loadAllTags()}addTag(e,t,n="#FF00C6"){try{const i=window.$pinia?.user;if(!i){this.logger.warn("User store not available, cannot add tag");return}i.addCustomTag({UserId:e,Tag:t,TagColour:n}),this.logger.log(`Manually added tag: ${t} for user ${e}`)}catch(i){this.logger.error("Error adding manual tag:",i)}}getLoadedTagsCount(){let e=0;for(const t of this.loadedTags.values())e+=t.size;return e}getActiveTagsCount(){return window.$pinia?.user?.customUserTags?.size||0}getTagsFromUrl(e){return this.loadedTags.get(e)||new Set}};c(h,"TagManagerPlugin");let d=h;window.customjs.__LAST_PLUGIN_CLASS__=d;})();
