(()=>{var p=Object.defineProperty;var h=(m,e)=>p(m,"name",{value:e,configurable:!0});const f=class f extends CustomModule{constructor(){super({name:"Tag Manager \u{1F3F7}\uFE0F",description:"Custom user tags management with URL-based loading",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Social","Enhancement"],required_dependencies:[]}),this.loadedTags=new Map,this.actionButtons=[{title:"Refresh Tags",color:"success",icon:"ri-refresh-line",description:"Reload tags from all configured URLs",callback:async()=>{this.logger.showInfo("Refreshing tags from URLs..."),await this.refreshTags();const e=this.getLoadedTagsCount();this.logger.showSuccess(`Loaded ${e} tags successfully!`)}},{title:"Find Tagged Users",color:"primary",icon:"ri-search-line",description:"Search all stores for tagged users and print to console",callback:async()=>{this.logger.showInfo("Searching for tagged users...");const e=await this.findTaggedUsers(!0),t=Object.values(e).reduce((o,n)=>o+Object.keys(n).length,0);this.logger.showSuccess(`Found ${t} tagged users (see console for details)`)}}]}async load(){this.registerEvent("tags-loaded",{description:"Fired when tags are successfully loaded from URLs",payload:{totalTags:"number - Total number of tags loaded",sources:"number - Number of sources loaded from",timestamp:"number - Unix timestamp"}}),this.registerEvent("tags-applied",{description:"Fired when tags are applied to users in UI",payload:{userId:"string - User ID",tags:"array - Array of tag names applied",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("tagged-player-join",{description:"Fired when a tagged player joins your instance",payload:{userId:"string - User ID",displayName:"string - Display name",tags:"array - Array of tag names",timestamp:"number - Unix timestamp"}});const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F3F7}\uFE0F Tag Sources",description:"Configure tag loading sources"},timing:{name:"\u{1F3F7}\uFE0F Update Timing",description:"Control when and how often tags are refreshed"},notifications:{name:"\u{1F3F7}\uFE0F Notifications",description:"Configure notifications for tagged players"}}),this.settings=this.defineSettings({urls:{type:e.CUSTOM,description:"URLs to load user tags from",category:"general",default:["https://github.com/Bluscream/FewTags/raw/refs/heads/main/usertags.json"]},updateInterval:{type:e.TIMESPAN,description:"How often to reload tags",category:"timing",default:36e5},initialDelay:{type:e.TIMESPAN,description:"Delay before first tag load after login",category:"timing",default:5e3},notifyOnPlayerJoin:{type:e.BOOLEAN,description:"Show notification when a tagged player joins your instance",category:"notifications",default:!0}}),this.logger.log(`\u2699\uFE0F Configured tag sources: ${this.settings.store.urls.length}`),this.logger.log("Tag Manager plugin ready"),this.loaded=!0}async start(){this.setupPlayerJoinMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("Tag Manager plugin started (waiting for login to load tags)")}async onLogin(e){this.logger.log(`User logged in: ${e?.displayName}`);const t=this.settings.store.initialDelay;setTimeout(async()=>{await this.loadAllTags(),this.startPeriodicUpdates();try{const n=`VRCX Custom Tags loaded at ${this.utils?.getTimestamp()||new Date().toISOString()}`;this.logger.log(n,{console:!0,vrcx:{message:!0}},"info")}catch{this.logger.log(`Tags loaded at ${new Date().toISOString()}`)}},t),this.logger.log(`Tag loading scheduled (delay: ${t}ms)`)}async stop(){this.logger.log("Stopping Tag Manager"),this.loadedTags.clear(),await super.stop()}async loadAllTags(){const e=this.settings.store.urls;if(!e||e.length===0){this.logger.warn("No tag URLs configured");return}this.logger.log(`Loading tags from ${e.length} URLs...`);for(const o of e)try{await this.loadTagsFromUrl(o)}catch(n){const g=n instanceof Error?n.message:String(n);this.logger.error(`Failed to load tags from ${o}: ${g}`)}const t=this.getLoadedTagsCount();this.logger.log(`\u2713 Tag loading complete (${t} tags loaded)`),this.emit("tags-loaded",{totalTags:t,sources:e.length,timestamp:Date.now()})}async loadTagsFromUrl(e){try{this.logger.log(`Fetching tags from: ${e}`);const t=await fetch(e);if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);const o=await t.json(),n=this.parseTagData(o,e);n.length>0?(this.loadedTags.set(e,new Set(n)),await this.applyTags(n),this.logger.log(`\u2713 Loaded ${n.length} tags from ${e}`)):this.logger.warn(`No valid tags found in ${e}`)}catch(t){const o=t instanceof Error?t.message:String(t);throw this.logger.error(`Error loading tags from ${e}: ${o}`),t}}parseTagData(e,t){const o=[];if(typeof e=="object"&&!Array.isArray(e)){for(const[n,g]of Object.entries(e))if(g&&g.tags&&Array.isArray(g.tags)){const c=g.tag||g.tags[0]||"Custom Tag",s=g.foreground_color||"#FF00C6";o.push({UserId:n,Tag:this.cleanTagText(c),TagColour:s})}}else if(Array.isArray(e))o.push(...e);else if(e.tags&&Array.isArray(e.tags))o.push(...e.tags);else if(e.data&&Array.isArray(e.data))o.push(...e.data);else return this.logger.warn(`Unknown data structure in ${t}`),[];return o.filter(n=>this.validateTag(n,t))}cleanTagText(e){return typeof e!="string"?"Custom Tag":e.replace(/<color=#[^>]*>/g,"").replace(/<\/color>/g,"").replace(/\*\*/g,"").replace(/\*/g,"").replace(/_/g,"").trim()}validateTag(e,t){return!e||typeof e!="object"||!e.UserId||typeof e.UserId!="string"||!e.Tag||typeof e.Tag!="string"?!1:(e.TagColour||(e.TagColour="#FF00C6"),!0)}async applyTags(e){const t=window.$pinia?.user;if(!t){this.logger.warn("User store not available, cannot apply tags");return}for(const o of e)try{t.addCustomTag({UserId:o.UserId,Tag:o.Tag,TagColour:o.TagColour})}catch(n){const g=n instanceof Error?n.message:String(n);this.logger.error(`Error applying tag for user ${o.UserId}: ${g}`)}await this.checkFriendsAndBlockedForTags()}async findTaggedUsers(e=!1,t=!1){const o={friends:{},blocked:{},muted:{},hideAvatar:{},interactOff:{},showAvatar:{},interactOn:{},cachedUsers:{},gameLog:{},feed:{},friendLog:{},notificationLog:{}};let n=0;const g=[],c=h((s,i,r,a)=>{try{o[s]||(o[s]={});const l=a?.tag||a?.Tag||"Unknown Tag";o[s][i]=l,n++,g.push({store:s,userId:i,displayName:r||"",tagText:l}),e&&this.logger.log(`[${s}] ${r||i} - ${l}`)}catch{}},"addTaggedUser");try{const s=window.$pinia?.user?.currentUser?.friends||[];for(const i of s){const r=this.getUserTag(i);if(r){const a=this.getFriendName(i);c("friends",i,a,r)}}}catch(s){this.logger.logError("Error checking friends:",s?.message)}try{const s=Array.from(window.$pinia?.moderation?.cachedPlayerModerations?.values()||[]);for(const i of s){const r=this.getUserTag(i.targetUserId);if(r){const a=this.getModerationStoreName(i.type);c(a,i.targetUserId,i.targetDisplayName,r)}}}catch(s){this.logger.logError("Error checking moderations:",s?.message)}try{const s=window.$pinia?.user?.cachedUsers||new Map;for(const[i,r]of s)if(i&&i.startsWith&&i.startsWith("usr_")){const a=this.getUserTag(i);a&&!o.friends[i]&&c("cachedUsers",i,r?.displayName,a)}}catch(s){this.logger.logError("Error checking cached users:",s?.message)}try{const s=window.$pinia?.gameLog?.gameLogTable||[],i=new Set;for(const r of s){const a=r.user_id||r.userId;if(a&&a.startsWith("usr_")&&!i.has(a)){const l=this.getUserTag(a);if(l){i.add(a);const d=r.display_name||r.displayName;c("gameLog",a,d,l)}}}}catch(s){this.logger.logError("Error checking game log:",s?.message)}try{const s=window.$pinia?.feed?.sharedFeed||[],i=new Set;for(const r of s){const a=r.user_id||r.userId;if(a&&a.startsWith("usr_")&&!i.has(a)){const l=this.getUserTag(a);if(l){i.add(a);const d=r.display_name||r.displayName;c("feed",a,d,l)}}}}catch(s){this.logger.logError("Error checking feed:",s?.message)}try{const s=window.$pinia?.friend?.friendLog||[],i=new Set;for(const r of s){const a=r.user_id||r.userId;if(a&&a.startsWith("usr_")&&!i.has(a)){const l=this.getUserTag(a);if(l){i.add(a);const d=r.display_name||r.displayName;c("friendLog",a,d,l)}}}}catch(s){this.logger.logError("Error checking friend log:",s?.message)}try{const s=window.$pinia?.notification?.notificationTable||[],i=new Set;for(const r of s){const a=r.sender_user_id||r.senderUserId;if(a&&a.startsWith("usr_")&&!i.has(a)){const l=this.getUserTag(a);if(l){i.add(a);const d=r.sender_username||r.senderUsername;c("notificationLog",a,d,l)}}}}catch(s){this.logger.logError("Error checking notification log:",s?.message)}if(t)try{let s=`userId,store,displayName,tagText
`;for(const r of g){const a=[(r.userId||"").replace(/"/g,'""'),(r.store||"").replace(/"/g,'""'),(r.displayName||"").replace(/"/g,'""'),(r.tagText||"").replace(/"/g,'""')].map(l=>`"${l}"`).join(",");s+=a+`
`}await window.customjs.utils.copyToClipboard(s,"Tagged users CSV")?this.logger.showSuccess(`Copied ${g.length} tagged users to clipboard as CSV`):this.logger.showWarning("Failed to copy tagged users to clipboard")}catch{this.logger.showWarning("Failed to copy tagged users to clipboard")}if(e)try{const s=Object.entries(o).filter(([i,r])=>Object.keys(r).length>0).map(([i,r])=>`${i}: ${Object.keys(r).length}`).join(" | ");this.logger.log(`
\u{1F4CA} Tagged Users Summary (${n} total)`),this.logger.log(s)}catch(s){this.logger.logError("Error printing summary:",s?.message)}return o}getModerationStoreName(e){return{block:"blocked",mute:"muted",hideAvatar:"hideAvatar",interactOff:"interactOff",showAvatar:"showAvatar",interactOn:"interactOn"}[e]||"blocked"}async checkFriendsAndBlockedForTags(){await this.findTaggedUsers(!0)}startPeriodicUpdates(){const e=this.settings.store.updateInterval,t=this.registerTimer(setInterval(async()=>{this.logger.log("Periodic tag update triggered"),await this.loadAllTags()},e));this.logger.log(`Periodic updates started (interval: ${e}ms)`)}setupPlayerJoinMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(e?.length>0){const t=e[e.length-1];t?.type==="OnPlayerJoined"&&this.handlePlayerJoin(t)}}),this.logger.log("Player join monitoring registered")}handlePlayerJoin(e){try{if(!this.settings.store.notifyOnPlayerJoin)return;const t=e.userId||e.user_id,o=e.displayName||e.display_name||"Unknown Player";if(!t)return;const n=this.getUserTag(t);if(n){const g=`${o} joined (${n.tag})`;this.logger.log(g,{console:!0,desktop:!0,xsoverlay:!0,ovrtoolkit:!0},"info"),this.emit("tagged-player-join",{userId:t,displayName:o,tags:[n.tag],timestamp:Date.now()})}}catch(t){const o=t instanceof Error?t.message:String(t);this.logger.error(`Error handling player join: ${o}`)}}getUserTag(e){const t=window.$pinia?.user?.customUserTags;return!t||t.size===0?null:t.get(e)||null}getFriendName(e){return window.$pinia?.user?.cachedUsers?.get(e)?.displayName||e}async refreshTags(){this.logger.log("Manually refreshing tags..."),await this.loadAllTags()}addTag(e,t,o="#FF00C6"){try{const n=window.$pinia?.user;if(!n){this.logger.warn("User store not available, cannot add tag");return}n.addCustomTag({UserId:e,Tag:t,TagColour:o}),this.logger.log(`Manually added tag: ${t} for user ${e}`)}catch(n){const g=n instanceof Error?n.message:String(n);this.logger.error(`Error adding manual tag: ${g}`)}}getLoadedTagsCount(){let e=0;for(const t of this.loadedTags.values())e+=t.size;return e}getActiveTagsCount(){return window.$pinia?.user?.customUserTags?.size||0}getTagsFromUrl(e){return this.loadedTags.get(e)||new Set}};h(f,"TagManagerPlugin");let u=f;window.customjs.__LAST_PLUGIN_CLASS__=u;})();
