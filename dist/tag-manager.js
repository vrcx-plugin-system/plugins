(()=>{var p=Object.defineProperty;var h=(m,e)=>p(m,"name",{value:e,configurable:!0});const f=class f extends CustomModule{constructor(){super({name:"Tag Manager \u{1F3F7}\uFE0F",description:"Custom user tags management with URL-based loading",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Social","Enhancement"],required_dependencies:["tag-api"]}),this.loadedTags=new Map,this.actionButtons=[{title:"Refresh Tags",color:"success",icon:"ri-refresh-line",description:"Reload tags from all configured URLs",callback:async()=>{this.logger.showInfo("Refreshing tags from URLs..."),await this.refreshTags();const e=this.getLoadedTagsCount();this.logger.showSuccess(`Loaded ${e} tags successfully!`)}},{title:"Find Tagged Users",color:"primary",icon:"ri-search-line",description:"Search all stores for tagged users and print to console",callback:async()=>{this.logger.showInfo("Searching for tagged users...");const e=await this.findTaggedUsers(!0),t=Object.values(e).reduce((s,a)=>s+Object.keys(a).length,0);this.logger.showSuccess(`Found ${t} tagged users (see console for details)`)}}]}async load(){this.registerEvent("tags-loaded",{description:"Fired when tags are successfully loaded from URLs",payload:{totalTags:"number - Total number of tags loaded",sources:"number - Number of sources loaded from",timestamp:"number - Unix timestamp"}}),this.registerEvent("tags-applied",{description:"Fired when tags are applied to users in UI",payload:{userId:"string - User ID",tags:"array - Array of tag names applied",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("tagged-player-join",{description:"Fired when a tagged player joins your instance",payload:{userId:"string - User ID",displayName:"string - Display name",tags:"array - Array of tag names",timestamp:"number - Unix timestamp"}});const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F3F7}\uFE0F Tag Sources",description:"Configure tag loading sources"},worlds:{name:"\u{1F30D} World Tags",description:"Configure world blacklist/tag sources"},timing:{name:"\u{1F3F7}\uFE0F Update Timing",description:"Control when and how often tags are refreshed"},notifications:{name:"\u{1F3F7}\uFE0F Notifications",description:"Configure notifications for tagged players"}}),this.settings=this.defineSettings({urls_user:{type:e.CUSTOM,description:"URLs to load user tags from",category:"general",default:["https://github.com/Bluscream/FewTags/raw/refs/heads/main/usertags.json"]},urls_worlds:{type:e.CUSTOM,description:"URLs to load world blacklists from",category:"worlds",default:["https://github.com/cyberkitsune/chatbox-club-blacklist/raw/refs/heads/master/npblacklist.json"]},worldTagText:{type:e.STRING,description:"Tag text for blacklisted worlds",category:"worlds",default:"ChatBox Blacklisted"},worldTagColor:{type:e.STRING,description:"Tag color for blacklisted worlds (hex)",category:"worlds",default:"#FF0000"},updateInterval:{type:e.TIMESPAN,description:"How often to reload tags",category:"timing",default:36e5},initialDelay:{type:e.TIMESPAN,description:"Delay before first tag load after login",category:"timing",default:5e3},notifyOnPlayerJoin:{type:e.BOOLEAN,description:"Show notification when a tagged player joins your instance",category:"notifications",default:!0}}),this.logger.log(`\u2699\uFE0F Configured user tag sources: ${this.settings.store.urls_user.length}`),this.logger.log(`\u2699\uFE0F Configured world tag sources: ${this.settings.store.urls_worlds.length}`),this.logger.log("Tag Manager plugin ready"),this.loaded=!0}async start(){this.setupPlayerJoinMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("Tag Manager plugin started (waiting for login to load tags)")}async onLogin(e){this.logger.log(`User logged in: ${e?.displayName}`);const t=this.settings.store.initialDelay;setTimeout(async()=>{await this.loadAllTags(),this.startPeriodicUpdates();try{const a=`VRCX Custom Tags loaded at ${this.utils?.getTimestamp()||new Date().toISOString()}`;this.logger.log(a,{console:!0,vrcx:{message:!0}},"info")}catch{this.logger.log(`Tags loaded at ${new Date().toISOString()}`)}},t),this.logger.log(`Tag loading scheduled (delay: ${t}ms)`)}async stop(){this.logger.log("Stopping Tag Manager"),this.loadedTags.clear(),await super.stop()}async loadAllTags(){const e=this.settings.store.urls_user||[],t=this.settings.store.urls_worlds||[],s=e.length+t.length;if(s===0){this.logger.warn("No tag URLs configured");return}this.logger.log(`Loading tags from ${s} URLs...`);for(const g of e)try{await this.loadTagsFromUrl(g,"user")}catch(l){const r=l instanceof Error?l.message:String(l);this.logger.error(`Failed to load user tags from ${g}: ${r}`)}for(const g of t)try{await this.loadTagsFromUrl(g,"world")}catch(l){const r=l instanceof Error?l.message:String(l);this.logger.error(`Failed to load world tags from ${g}: ${r}`)}const a=this.getLoadedTagsCount();this.logger.log(`\u2713 Tag loading complete (${a} tags loaded)`),this.emit("tags-loaded",{totalTags:a,sources:s,timestamp:Date.now()})}async loadTagsFromUrl(e,t="user"){try{this.logger.log(`Fetching ${t} tags from: ${e}`);const s=await fetch(e);if(!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);const a=await s.json();let g;t==="world"?g=this.parseWorldData(a,e):g=this.parseTagData(a,e),g.length>0?(this.loadedTags.set(e,new Set(g)),t==="world"?await this.applyWorldTags(g):await this.applyTags(g),this.logger.log(`\u2713 Loaded ${g.length} ${t} tags from ${e}`)):this.logger.warn(`No valid ${t} tags found in ${e}`)}catch(s){const a=s instanceof Error?s.message:String(s);throw this.logger.error(`Error loading ${t} tags from ${e}: ${a}`),s}}parseTagData(e,t){const s=[];if(typeof e=="object"&&!Array.isArray(e)){for(const[a,g]of Object.entries(e))if(g&&g.tags&&Array.isArray(g.tags)){for(const l of g.tags)if(typeof l=="string"){const r=l.match(/<color=(#[0-9A-Fa-f]{6})>(.*?)<\/color>/);let o=l,i=g.foreground_color||"#FF00C6";r?(i=r[1],o=r[2]):o=l.replace(/<[^>]*>/g,""),s.push({UserId:a,Tag:this.cleanTagText(o),TagColour:i})}}}else if(Array.isArray(e))s.push(...e);else if(e.tags&&Array.isArray(e.tags))s.push(...e.tags);else if(e.data&&Array.isArray(e.data))s.push(...e.data);else return this.logger.warn(`Unknown data structure in ${t}`),[];return s.filter(a=>this.validateTag(a,t))}parseWorldData(e,t){const s=[];if(e.worlds&&Array.isArray(e.worlds)){const a=this.settings.store.worldTagText||"ChatBox Blacklisted",g=this.settings.store.worldTagColor||"#FF0000";for(const l of e.worlds)l.id&&l.id.startsWith("wrld_")&&s.push({WorldId:l.id,WorldName:l.name||l.id,Tag:a,TagColour:g,Comment:l.comment||""})}else if(Array.isArray(e)){const a=this.settings.store.worldTagText||"ChatBox Blacklisted",g=this.settings.store.worldTagColor||"#FF0000";for(const l of e)l.id&&l.id.startsWith("wrld_")&&s.push({WorldId:l.id,WorldName:l.name||l.id,Tag:a,TagColour:g,Comment:l.comment||""})}else return this.logger.warn(`Unknown world data structure in ${t}`),[];return s.filter(a=>this.validateWorldTag(a))}validateWorldTag(e){return!(!e||typeof e!="object"||!e.WorldId||typeof e.WorldId!="string"||!e.WorldId.startsWith("wrld_")||!e.Tag||typeof e.Tag!="string")}cleanTagText(e){return typeof e!="string"?"Custom Tag":e.replace(/<color=#[^>]*>/g,"").replace(/<\/color>/g,"").replace(/\*\*/g,"").replace(/\*/g,"").replace(/_/g,"").trim()}validateTag(e,t){return!e||typeof e!="object"||!e.UserId||typeof e.UserId!="string"||!e.Tag||typeof e.Tag!="string"?!1:(e.TagColour||(e.TagColour="#FF00C6"),!0)}async applyTags(e){const t=window.$pinia?.user;if(!t){this.logger.warn("User store not available, cannot apply tags");return}for(const s of e)try{t.addCustomTag({UserId:s.UserId,Tag:s.Tag,TagColour:s.TagColour})}catch(a){const g=a instanceof Error?a.message:String(a);this.logger.error(`Error applying tag for user ${s.UserId}: ${g}`)}await this.checkFriendsAndBlockedForTags()}async applyWorldTags(e){const t=window.customjs.getModule("tag-api");if(!t||!t.addWorldTag){this.logger.error("Tag API module not found or addWorldTag method missing - world tags disabled");return}for(const s of e)try{t.addWorldTag(s.WorldId,s.Tag,s.TagColour)}catch(a){const g=a instanceof Error?a.message:String(a);this.logger.error(`Error applying tag for world ${s.WorldId}: ${g}`)}this.logger.log(`Applied ${e.length} world tags via Tag API`)}async findTaggedUsers(e=!1,t=!1){const s={friends:{},blocked:{},muted:{},hideAvatar:{},interactOff:{},showAvatar:{},interactOn:{},cachedUsers:{},gameLog:{},feed:{},friendLog:{},notificationLog:{}};let a=0;const g=[],l=h((r,o,i,n)=>{try{s[r]||(s[r]={});const d=n?.tag||n?.Tag||"Unknown Tag";s[r][o]=d,a++,g.push({store:r,userId:o,displayName:i||"",tagText:d}),e&&this.logger.log(`[${r}] ${i||o} - ${d}`)}catch{}},"addTaggedUser");try{const r=window.$pinia?.user?.currentUser?.friends||[];for(const o of r){const i=this.getUserTag(o);if(i){const n=this.getFriendName(o);l("friends",o,n,i)}}}catch(r){this.logger.logError("Error checking friends:",r?.message)}try{const r=Array.from(window.$pinia?.moderation?.cachedPlayerModerations?.values()||[]);for(const o of r){const i=this.getUserTag(o.targetUserId);if(i){const n=this.getModerationStoreName(o.type);l(n,o.targetUserId,o.targetDisplayName,i)}}}catch(r){this.logger.logError("Error checking moderations:",r?.message)}try{const r=window.$pinia?.user?.cachedUsers||new Map;for(const[o,i]of r)if(o&&o.startsWith&&o.startsWith("usr_")){const n=this.getUserTag(o);n&&!s.friends[o]&&l("cachedUsers",o,i?.displayName,n)}}catch(r){this.logger.logError("Error checking cached users:",r?.message)}try{const r=window.$pinia?.gameLog?.gameLogTable||[],o=new Set;for(const i of r){const n=i.user_id||i.userId;if(n&&n.startsWith("usr_")&&!o.has(n)){const d=this.getUserTag(n);if(d){o.add(n);const c=i.display_name||i.displayName;l("gameLog",n,c,d)}}}}catch(r){const o=r instanceof Error?r.message:String(r);this.logger.error(`Error checking game log: ${o}`)}try{const r=window.$pinia?.feed?.sharedFeed||[],o=new Set;for(const i of r){const n=i.user_id||i.userId;if(n&&n.startsWith("usr_")&&!o.has(n)){const d=this.getUserTag(n);if(d){o.add(n);const c=i.display_name||i.displayName;l("feed",n,c,d)}}}}catch(r){const o=r instanceof Error?r.message:String(r);this.logger.error(`Error checking feed: ${o}`)}try{const r=window.$pinia?.friend?.friendLog||[],o=new Set;for(const i of r){const n=i.user_id||i.userId;if(n&&n.startsWith("usr_")&&!o.has(n)){const d=this.getUserTag(n);if(d){o.add(n);const c=i.display_name||i.displayName;l("friendLog",n,c,d)}}}}catch(r){const o=r instanceof Error?r.message:String(r);this.logger.error(`Error checking friend log: ${o}`)}try{const r=window.$pinia?.notification?.notificationTable||[],o=new Set;for(const i of r){const n=i.sender_user_id||i.senderUserId;if(n&&n.startsWith("usr_")&&!o.has(n)){const d=this.getUserTag(n);if(d){o.add(n);const c=i.sender_username||i.senderUsername;l("notificationLog",n,c,d)}}}}catch(r){const o=r instanceof Error?r.message:String(r);this.logger.error(`Error checking notification log: ${o}`)}if(t)try{let r=`userId,store,displayName,tagText
`;for(const i of g){const n=[(i.userId||"").replace(/"/g,'""'),(i.store||"").replace(/"/g,'""'),(i.displayName||"").replace(/"/g,'""'),(i.tagText||"").replace(/"/g,'""')].map(d=>`"${d}"`).join(",");r+=n+`
`}await window.customjs.utils.copyToClipboard(r,"Tagged users CSV")?this.logger.showSuccess(`Copied ${g.length} tagged users to clipboard as CSV`):this.logger.showWarning("Failed to copy tagged users to clipboard")}catch{this.logger.showWarning("Failed to copy tagged users to clipboard")}if(e)try{const r=Object.entries(s).filter(([o,i])=>Object.keys(i).length>0).map(([o,i])=>`${o}: ${Object.keys(i).length}`).join(" | ");this.logger.log(`
\u{1F4CA} Tagged Users Summary (${a} total)`),this.logger.log(r)}catch(r){this.logger.logError("Error printing summary:",r?.message)}return s}getModerationStoreName(e){return{block:"blocked",mute:"muted",hideAvatar:"hideAvatar",interactOff:"interactOff",showAvatar:"showAvatar",interactOn:"interactOn"}[e]||"blocked"}async checkFriendsAndBlockedForTags(){await this.findTaggedUsers(!0)}startPeriodicUpdates(){const e=this.settings.store.updateInterval,t=this.registerTimer(setInterval(async()=>{this.logger.log("Periodic tag update triggered"),await this.loadAllTags()},e));this.logger.log(`Periodic updates started (interval: ${e}ms)`)}setupPlayerJoinMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(e?.length>0){const t=e[e.length-1];t?.type==="OnPlayerJoined"&&this.handlePlayerJoin(t)}}),this.logger.log("Player join monitoring registered")}handlePlayerJoin(e){try{if(!this.settings.store.notifyOnPlayerJoin)return;const t=e.userId||e.user_id,s=e.displayName||e.display_name||"Unknown Player";if(!t)return;const a=this.getUserTag(t);if(a){const g=`${s} joined (${a.tag})`;this.logger.log(g,{console:!0,desktop:!0,xsoverlay:!0,ovrtoolkit:!0},"info"),this.emit("tagged-player-join",{userId:t,displayName:s,tags:[a.tag],timestamp:Date.now()})}}catch(t){const s=t instanceof Error?t.message:String(t);this.logger.error(`Error handling player join: ${s}`)}}getUserTag(e){const t=window.$pinia?.user?.customUserTags;return!t||t.size===0?null:t.get(e)||null}getFriendName(e){return window.$pinia?.user?.cachedUsers?.get(e)?.displayName||e}async refreshTags(){this.logger.log("Manually refreshing tags..."),await this.loadAllTags()}addTag(e,t,s="#FF00C6"){try{const a=window.$pinia?.user;if(!a){this.logger.warn("User store not available, cannot add tag");return}a.addCustomTag({UserId:e,Tag:t,TagColour:s}),this.logger.log(`Manually added tag: ${t} for user ${e}`)}catch(a){const g=a instanceof Error?a.message:String(a);this.logger.error(`Error adding manual tag: ${g}`)}}getLoadedTagsCount(){let e=0;for(const t of this.loadedTags.values())e+=t.size;return e}getActiveTagsCount(){return window.$pinia?.user?.customUserTags?.size||0}getTagsFromUrl(e){return this.loadedTags.get(e)||new Set}};h(f,"TagManagerPlugin");let u=f;window.customjs.__LAST_PLUGIN_CLASS__=u;})();
