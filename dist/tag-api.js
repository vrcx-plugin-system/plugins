(()=>{var i=Object.defineProperty;var l=(g,r)=>i(g,"name",{value:r,configurable:!0});const d=class d extends CustomModule{constructor(){super({name:"Tag API \u{1F3F7}\uFE0F",description:"Provides custom tag API for users and worlds",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["API","Enhancement"],required_dependencies:[]}),this.customWorldTags=new Map}async load(){this.registerEvent("world-tag-added",{description:"Fired when a custom world tag is added",payload:{worldId:"string - World ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.loaded=!0,this.logger.log("Tag API plugin loaded")}async start(){this.patchWorldStore(),this.enabled=!0,this.started=!0,this.logger.log("Tag API started")}patchWorldStore(){const r=window.$pinia?.world;if(!r){this.logger.warn("World store not available");return}const o=this;r.addCustomWorldTag=function(t){!t||!t.WorldId||(o.customWorldTags.set(t.WorldId,{tag:t.Tag||"",colour:t.TagColour||"#FF0000",timestamp:Date.now()}),o.emit("world-tag-added",{worldId:t.WorldId,tag:t.Tag,color:t.TagColour,timestamp:Date.now()}))},r.getCustomWorldTag=function(t){return o.customWorldTags.get(t)},r.removeCustomWorldTag=function(t){return o.customWorldTags.delete(t)},r.getAllCustomWorldTags=function(){return Array.from(o.customWorldTags.entries()).map(([t,s])=>({worldId:t,...s}))},this.logger.log("World store patched with custom tag support")}addWorldTag(r,o,t="#FF0000"){const s=window.$pinia?.world;if(!s||!s.addCustomWorldTag)return this.logger.error("World store not available or not patched"),!1;try{return s.addCustomWorldTag({WorldId:r,Tag:o,TagColour:t}),!0}catch(e){const n=e instanceof Error?e.message:String(e);return this.logger.error(`Failed to add world tag: ${n}`),!1}}getWorldTag(r){return this.customWorldTags.get(r)}removeWorldTag(r){return this.customWorldTags.delete(r)}getAllWorldTags(){return Array.from(this.customWorldTags.entries()).map(([r,o])=>({worldId:r,tag:o.tag,colour:o.colour,timestamp:o.timestamp}))}clearAllWorldTags(){this.customWorldTags.clear(),this.logger.log("All custom world tags cleared")}async stop(){await super.stop(),this.logger.log("Tag API stopped")}};l(d,"TagAPIPlugin");let a=d;window.customjs.__LAST_PLUGIN_CLASS__=a;})();
