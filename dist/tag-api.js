(()=>{var d=Object.defineProperty;var c=(u,s)=>d(u,"name",{value:s,configurable:!0});const n=class n extends CustomModule{constructor(){super({name:"Tag API \u{1F3F7}\uFE0F",description:"Provides custom tag API for users, worlds, and avatars",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["API","Enhancement"],required_dependencies:["dialog-events-api"]}),this.customWorldTags=new Map,this.customUserTags=new Map,this.customAvatarTags=new Map}async load(){this.registerEvent("world-tag-added",{description:"Fired when a custom world tag is added",payload:{worldId:"string - World ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("user-tag-added",{description:"Fired when a custom user tag is added",payload:{userId:"string - User ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("avatar-tag-added",{description:"Fired when a custom avatar tag is added",payload:{avatarId:"string - Avatar ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.loaded=!0,this.logger.log("Tag API plugin loaded")}async start(){this.patchWorldStore(),this.patchUserStore(),this.patchAvatarStore(),this.setupWorldDialogWatcher(),this.setupUserDialogWatcher(),this.setupAvatarDialogWatcher(),this.enabled=!0,this.started=!0,this.logger.log("Tag API started")}patchWorldStore(){const s=window.$pinia?.world;if(!s){this.logger.warn("World store not available");return}const r=this;s.addCustomWorldTag=function(t){if(!t||!t.WorldId)return;const a=t.WorldId,g={tag:t.Tag||"",colour:t.TagColour||"#FF0000",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},e=r.customWorldTags.get(a)||[];e.some(i=>i.tag===g.tag)||(e.push(g),r.customWorldTags.set(a,e),r.emit("world-tag-added",{worldId:a,tag:g.tag,color:g.colour,timestamp:Date.now()}))},s.getCustomWorldTags=function(t){return r.customWorldTags.get(t)||[]},s.removeCustomWorldTag=function(t,a){const g=r.customWorldTags.get(t);if(!g)return!1;const e=g.filter(o=>o.tag!==a);return e.length===0?r.customWorldTags.delete(t):r.customWorldTags.set(t,e),!0},s.getAllCustomWorldTags=function(){return Array.from(r.customWorldTags.entries()).map(([t,a])=>({worldId:t,tags:a}))},this.logger.log("World store patched with custom tag support")}patchUserStore(){const s=window.$pinia?.user;if(!s){this.logger.warn("User store not available");return}const r=this;s.addCustomUserTag=function(t){if(!t||!t.UserId)return;const a=t.UserId,g={tag:t.Tag||"",colour:t.TagColour||"#FF00C6",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},e=r.customUserTags.get(a)||[];e.some(i=>i.tag===g.tag)||(e.push(g),r.customUserTags.set(a,e),r.emit("user-tag-added",{userId:a,tag:g.tag,color:g.colour,timestamp:Date.now()}))},s.getCustomUserTags=function(t){return r.customUserTags.get(t)||[]},s.removeCustomUserTag=function(t,a){const g=r.customUserTags.get(t);if(!g)return!1;const e=g.filter(o=>o.tag!==a);return e.length===0?r.customUserTags.delete(t):r.customUserTags.set(t,e),!0},s.getAllCustomUserTags=function(){return Array.from(r.customUserTags.entries()).map(([t,a])=>({userId:t,tags:a}))},this.logger.log("User store patched with custom tag support")}setupWorldDialogWatcher(){this.on("ShowWorldDialog",s=>{if(this.logger.log(`[DEBUG] ShowWorldDialog event received for worldId: ${s?.worldId}`),s?.worldId){const r=this.customWorldTags.get(s.worldId);this.logger.log(`[DEBUG] World has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomWorldTag(s.worldId),100)}}),this.logger.log("World dialog watcher setup")}patchAvatarStore(){const s=window.$pinia?.avatar;if(!s){this.logger.warn("Avatar store not available");return}const r=this;s.addCustomAvatarTag=function(t){if(!t||!t.AvatarId)return;const a=t.AvatarId,g={tag:t.Tag||"",colour:t.TagColour||"#00C6FF",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},e=r.customAvatarTags.get(a)||[];e.some(i=>i.tag===g.tag)||(e.push(g),r.customAvatarTags.set(a,e),r.emit("avatar-tag-added",{avatarId:a,tag:g.tag,color:g.colour,timestamp:Date.now()}))},s.getCustomAvatarTags=function(t){return r.customAvatarTags.get(t)||[]},s.removeCustomAvatarTag=function(t,a){const g=r.customAvatarTags.get(t);if(!g)return!1;const e=g.filter(o=>o.tag!==a);return e.length===0?r.customAvatarTags.delete(t):r.customAvatarTags.set(t,e),!0},s.getAllCustomAvatarTags=function(){return Array.from(r.customAvatarTags.entries()).map(([t,a])=>({avatarId:t,tags:a}))},this.logger.log("Avatar store patched with custom tag support")}setupUserDialogWatcher(){this.on("ShowUserDialog",s=>{if(this.logger.log(`[DEBUG] ShowUserDialog event received for userId: ${s?.userId}`),s?.userId){const r=this.customUserTags.get(s.userId);this.logger.log(`[DEBUG] User has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomUserTags(s.userId),100)}}),this.logger.log("User dialog watcher setup")}setupAvatarDialogWatcher(){this.on("ShowAvatarDialog",s=>{if(this.logger.log(`[DEBUG] ShowAvatarDialog event received for avatarId: ${s?.avatarId}`),s?.avatarId){const r=this.customAvatarTags.get(s.avatarId);this.logger.log(`[DEBUG] Avatar has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomAvatarTags(s.avatarId),100)}}),this.logger.log("Avatar dialog watcher setup")}injectCustomWorldTag(s){const r=this.customWorldTags.get(s);if(!r||r.length===0)return;const t=document.querySelectorAll(".el-dialog__body > div > div > div");if(t.length<2)return;const a=t[1];a.querySelectorAll(".vrcx-custom-world-tag").forEach(e=>e.remove());for(const e of r){const o=document.createElement("span");o.className="el-tag el-tag--danger el-tag--plain el-tag--small vrcx-custom-world-tag",o.style.marginRight="5px",o.style.marginTop="5px",o.style.color=e.colour,o.style.borderColor=e.colour,o.textContent=e.tag,e.tooltip&&(o.title=e.tooltip),e.url&&(o.style.cursor="pointer",o.addEventListener("click",i=>{i.stopPropagation(),window.open(e.url,"_blank")})),a.firstChild?a.insertBefore(o,a.firstChild):a.appendChild(o)}}injectCustomUserTags(s){this.logger.log(`[DEBUG] injectCustomUserTags called for userId: ${s}`);const r=this.customUserTags.get(s);if(this.logger.log(`[DEBUG] Found ${r?.length||0} tags to inject`),!r||r.length===0)return;const t=document.querySelectorAll(".el-dialog__body > div > div");if(this.logger.log(`[DEBUG] Found ${t.length} tag containers`),t.length<2)return;const a=t[1];a.querySelectorAll(".vrcx-custom-user-tag").forEach(e=>e.remove());for(const e of r){const o=document.createElement("span");o.className="el-tag el-tag--info el-tag--plain el-tag--small vrcx-custom-user-tag",o.style.marginRight="5px",o.style.marginTop="5px",o.style.color=e.colour,o.style.borderColor=e.colour,o.textContent=e.tag,e.tooltip&&(o.title=e.tooltip),e.url&&(o.style.cursor="pointer",o.addEventListener("click",i=>{i.stopPropagation(),window.open(e.url,"_blank")})),a.appendChild(o)}}injectCustomAvatarTags(s){const r=this.customAvatarTags.get(s);if(!r||r.length===0)return;const t=document.querySelectorAll(".el-dialog__body > div > div");if(t.length<2)return;const a=t[1];a.querySelectorAll(".vrcx-custom-avatar-tag").forEach(e=>e.remove());for(const e of r){const o=document.createElement("span");o.className="el-tag el-tag--success el-tag--plain el-tag--small vrcx-custom-avatar-tag",o.style.marginRight="5px",o.style.marginTop="5px",o.style.color=e.colour,o.style.borderColor=e.colour,o.textContent=e.tag,e.tooltip&&(o.title=e.tooltip),e.url&&(o.style.cursor="pointer",o.addEventListener("click",i=>{i.stopPropagation(),window.open(e.url,"_blank")})),a.appendChild(o)}}addWorldTag(s,r,t="#FF0000",a="",g=""){const e=window.$pinia?.world;if(!e||!e.addCustomWorldTag)return this.logger.error("World store not available or not patched"),!1;try{return e.addCustomWorldTag({WorldId:s,Tag:r,TagColour:t,Url:a,Tooltip:g}),!0}catch(o){const i=o instanceof Error?o.message:String(o);return this.logger.error(`Failed to add world tag: ${i}`),!1}}getWorldTags(s){return this.customWorldTags.get(s)||[]}removeWorldTag(s,r){const t=this.customWorldTags.get(s);if(!t)return!1;const a=t.filter(g=>g.tag!==r);return a.length===0?this.customWorldTags.delete(s):this.customWorldTags.set(s,a),!0}removeAllWorldTags(s){return this.customWorldTags.delete(s)}getAllWorldTags(){return Array.from(this.customWorldTags.entries()).map(([s,r])=>({worldId:s,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllWorldTags(){this.customWorldTags.clear(),this.logger.log("All custom world tags cleared")}addUserTag(s,r,t="#FF00C6",a="",g=""){const e=window.$pinia?.user;if(!e||!e.addCustomUserTag)return this.logger.error("User store not available or not patched"),!1;try{return e.addCustomUserTag({UserId:s,Tag:r,TagColour:t,Url:a,Tooltip:g}),!0}catch(o){const i=o instanceof Error?o.message:String(o);return this.logger.error(`Failed to add user tag: ${i}`),!1}}getUserTags(s){return this.customUserTags.get(s)||[]}removeUserTag(s,r){const t=this.customUserTags.get(s);if(!t)return!1;const a=t.filter(g=>g.tag!==r);return a.length===0?this.customUserTags.delete(s):this.customUserTags.set(s,a),!0}removeAllUserTags(s){return this.customUserTags.delete(s)}getAllUserTags(){return Array.from(this.customUserTags.entries()).map(([s,r])=>({userId:s,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllUserTags(){this.customUserTags.clear(),this.logger.log("All custom user tags cleared")}addAvatarTag(s,r,t="#00C6FF",a="",g=""){const e=window.$pinia?.avatar;if(!e||!e.addCustomAvatarTag)return this.logger.error("Avatar store not available or not patched"),!1;try{return e.addCustomAvatarTag({AvatarId:s,Tag:r,TagColour:t,Url:a,Tooltip:g}),!0}catch(o){const i=o instanceof Error?o.message:String(o);return this.logger.error(`Failed to add avatar tag: ${i}`),!1}}getAvatarTags(s){return this.customAvatarTags.get(s)||[]}removeAvatarTag(s,r){const t=this.customAvatarTags.get(s);if(!t)return!1;const a=t.filter(g=>g.tag!==r);return a.length===0?this.customAvatarTags.delete(s):this.customAvatarTags.set(s,a),!0}removeAllAvatarTags(s){return this.customAvatarTags.delete(s)}getAllAvatarTags(){return Array.from(this.customAvatarTags.entries()).map(([s,r])=>({avatarId:s,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllAvatarTags(){this.customAvatarTags.clear(),this.logger.log("All custom avatar tags cleared")}async stop(){await super.stop(),this.logger.log("Tag API stopped")}};c(n,"TagAPIPlugin");let l=n;window.customjs.__LAST_PLUGIN_CLASS__=l;})();
