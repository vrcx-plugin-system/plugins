(()=>{var p=Object.defineProperty;var m=(h,e)=>p(h,"name",{value:e,configurable:!0});const d=class d extends CustomModule{constructor(){super({name:"Tag API \u{1F3F7}\uFE0F",description:"Provides custom tag API for users, worlds, and avatars",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["API","Enhancement"],required_dependencies:["dialog-events-api"]}),this.customWorldTags=new Map,this.customUserTags=new Map,this.customAvatarTags=new Map}async load(){this.registerEvent("world-tag-added",{description:"Fired when a custom world tag is added",payload:{worldId:"string - World ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("user-tag-added",{description:"Fired when a custom user tag is added",payload:{userId:"string - User ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("avatar-tag-added",{description:"Fired when a custom avatar tag is added",payload:{avatarId:"string - Avatar ID",tag:"string - Tag text",color:"string - Tag color",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.loaded=!0,this.logger.log("Tag API plugin loaded")}async start(){this.patchWorldStore(),this.patchUserStore(),this.patchAvatarStore(),this.setupWorldDialogWatcher(),this.setupUserDialogWatcher(),this.setupAvatarDialogWatcher(),this.enabled=!0,this.started=!0,this.logger.log("Tag API started")}patchWorldStore(){const e=window.$pinia?.world;if(!e){this.logger.warn("World store not available");return}const r=this;e.addCustomWorldTag=function(t){if(!t||!t.WorldId)return;const o=t.WorldId,g={tag:t.Tag||"",colour:t.TagColour||"#FF0000",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},s=r.customWorldTags.get(o)||[];s.some(i=>i.tag===g.tag)||(s.push(g),r.customWorldTags.set(o,s),r.emit("world-tag-added",{worldId:o,tag:g.tag,color:g.colour,timestamp:Date.now()}))},e.getCustomWorldTags=function(t){return r.customWorldTags.get(t)||[]},e.removeCustomWorldTag=function(t,o){const g=r.customWorldTags.get(t);if(!g)return!1;const s=g.filter(a=>a.tag!==o);return s.length===0?r.customWorldTags.delete(t):r.customWorldTags.set(t,s),!0},e.getAllCustomWorldTags=function(){return Array.from(r.customWorldTags.entries()).map(([t,o])=>({worldId:t,tags:o}))},this.logger.log("World store patched with custom tag support")}patchUserStore(){const e=window.$pinia?.user;if(!e){this.logger.warn("User store not available");return}const r=this;e.addCustomUserTag=function(t){if(!t||!t.UserId)return;const o=t.UserId,g={tag:t.Tag||"",colour:t.TagColour||"#FF00C6",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},s=r.customUserTags.get(o)||[];s.some(i=>i.tag===g.tag)||(s.push(g),r.customUserTags.set(o,s),r.emit("user-tag-added",{userId:o,tag:g.tag,color:g.colour,timestamp:Date.now()}))},e.getCustomUserTags=function(t){return r.customUserTags.get(t)||[]},e.removeCustomUserTag=function(t,o){const g=r.customUserTags.get(t);if(!g)return!1;const s=g.filter(a=>a.tag!==o);return s.length===0?r.customUserTags.delete(t):r.customUserTags.set(t,s),!0},e.getAllCustomUserTags=function(){return Array.from(r.customUserTags.entries()).map(([t,o])=>({userId:t,tags:o}))},this.logger.log("User store patched with custom tag support")}setupWorldDialogWatcher(){this.on("ShowWorldDialog",e=>{if(this.logger.log(`[DEBUG] ShowWorldDialog event received for worldId: ${e?.worldId}`),e?.worldId){const r=this.customWorldTags.get(e.worldId);this.logger.log(`[DEBUG] World has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomWorldTag(e.worldId),100)}}),this.logger.log("World dialog watcher setup")}patchAvatarStore(){const e=window.$pinia?.avatar;if(!e){this.logger.warn("Avatar store not available");return}const r=this;e.addCustomAvatarTag=function(t){if(!t||!t.AvatarId)return;const o=t.AvatarId,g={tag:t.Tag||"",colour:t.TagColour||"#00C6FF",url:t.Url||"",tooltip:t.Tooltip||"",timestamp:Date.now()},s=r.customAvatarTags.get(o)||[];s.some(i=>i.tag===g.tag)||(s.push(g),r.customAvatarTags.set(o,s),r.emit("avatar-tag-added",{avatarId:o,tag:g.tag,color:g.colour,timestamp:Date.now()}))},e.getCustomAvatarTags=function(t){return r.customAvatarTags.get(t)||[]},e.removeCustomAvatarTag=function(t,o){const g=r.customAvatarTags.get(t);if(!g)return!1;const s=g.filter(a=>a.tag!==o);return s.length===0?r.customAvatarTags.delete(t):r.customAvatarTags.set(t,s),!0},e.getAllCustomAvatarTags=function(){return Array.from(r.customAvatarTags.entries()).map(([t,o])=>({avatarId:t,tags:o}))},this.logger.log("Avatar store patched with custom tag support")}setupUserDialogWatcher(){this.on("ShowUserDialog",e=>{if(this.logger.log(`[DEBUG] ShowUserDialog event received for userId: ${e?.userId}`),e?.userId){const r=this.customUserTags.get(e.userId);this.logger.log(`[DEBUG] User has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomUserTags(e.userId),100)}}),this.logger.log("User dialog watcher setup")}setupAvatarDialogWatcher(){this.on("ShowAvatarDialog",e=>{if(this.logger.log(`[DEBUG] ShowAvatarDialog event received for avatarId: ${e?.avatarId}`),e?.avatarId){const r=this.customAvatarTags.get(e.avatarId);this.logger.log(`[DEBUG] Avatar has ${r?.length||0} custom tags`),setTimeout(()=>this.injectCustomAvatarTags(e.avatarId),100)}}),this.logger.log("Avatar dialog watcher setup")}injectCustomWorldTag(e){const r=document.querySelector(".x-world-dialog");if(!r){this.logger.log("[DEBUG] World dialog not found in DOM, skipping injection");return}this.logger.log("[DEBUG] World dialog found, searching for tag container...");const t=Array.from(r.querySelectorAll(".el-dialog__body div"));this.logger.log(`[DEBUG] Found ${t.length} divs in dialog body`);let o=null;for(let a=0;a<t.length;a++){const i=t[a],l=Array.from(i.children).filter(n=>n.classList.contains("el-tag"));if(l.length>0&&(this.logger.log(`[DEBUG] Found candidate div #${a} with ${l.length} direct .el-tag children`),l.some(c=>c.classList.contains("el-tag--success")||c.classList.contains("el-tag--info")||c.textContent?.includes("Public")||c.textContent?.includes("PC")))){this.logger.log("[DEBUG] This div contains status/platform tags - using it!"),o=i;break}}if(!o){this.logger.log(`[DEBUG] Native tag container not found in world dialog after checking ${t.length} divs`);return}o.querySelectorAll(".vrcx-custom-world-tag").forEach(a=>a.remove());const s=this.customWorldTags.get(e);if(!(!s||s.length===0)){this.logger.log(`[DEBUG] Injecting ${s.length} world tags into dialog`);for(const a of s){const i=document.createElement("span");i.className="el-tag el-tag--danger el-tag--plain el-tag--small vrcx-custom-world-tag",i.style.marginRight="5px",i.style.marginTop="5px",i.style.color=a.colour,i.style.borderColor=a.colour,i.textContent=a.tag,a.tooltip&&(i.title=a.tooltip),a.url&&(i.style.cursor="pointer",i.addEventListener("click",l=>{l.stopPropagation(),window.open(a.url,"_blank")})),o.appendChild(i)}}}injectCustomUserTags(e){this.logger.log(`[DEBUG] injectCustomUserTags called for userId: ${e}`);const r=document.querySelector(".x-user-dialog");if(!r){this.logger.log("[DEBUG] User dialog not found in DOM, skipping injection");return}const t=Array.from(r.querySelectorAll('div[style*="margin-top: 5px"]'));let o=null;for(const i of t)if(i.querySelector(".el-tag")){o=i;break}if(!o){this.logger.log("[DEBUG] Native tag container not found in user dialog");return}o.querySelectorAll(".vrcx-custom-user-tag").forEach(i=>i.remove());const s=this.customUserTags.get(e);if(this.logger.log(`[DEBUG] Found ${s?.length||0} tags to inject`),!s||s.length===0)return;this.logger.log(`[DEBUG] Injecting ${s.length} user tags into dialog`);const a=o.querySelector("br");for(const i of s){const l=document.createElement("span");l.className="el-tag el-tag--info el-tag--plain el-tag--small vrcx-custom-user-tag",l.style.marginRight="5px",l.style.marginTop="5px",l.style.color=i.colour,l.style.borderColor=i.colour,l.textContent=i.tag,i.tooltip&&(l.title=i.tooltip),i.url&&(l.style.cursor="pointer",l.addEventListener("click",n=>{n.stopPropagation(),window.open(i.url,"_blank")})),a?o.insertBefore(l,a):o.appendChild(l)}}injectCustomAvatarTags(e){const r=document.querySelector(".x-avatar-dialog");if(!r){this.logger.log("[DEBUG] Avatar dialog not found in DOM, skipping injection");return}const t=r.querySelector(".el-dialog__body > div > div:nth-child(2)");if(!t){this.logger.log("[DEBUG] Tag container not found in avatar dialog");return}t.querySelectorAll(".vrcx-custom-avatar-tag").forEach(s=>s.remove());const g=this.customAvatarTags.get(e);if(!(!g||g.length===0)){this.logger.log(`[DEBUG] Injecting ${g.length} avatar tags into dialog`);for(const s of g){const a=document.createElement("span");a.className="el-tag el-tag--success el-tag--plain el-tag--small vrcx-custom-avatar-tag",a.style.marginRight="5px",a.style.marginTop="5px",a.style.color=s.colour,a.style.borderColor=s.colour,a.textContent=s.tag,s.tooltip&&(a.title=s.tooltip),s.url&&(a.style.cursor="pointer",a.addEventListener("click",i=>{i.stopPropagation(),window.open(s.url,"_blank")})),t.appendChild(a)}}}addWorldTag(e,r,t="#FF0000",o="",g=""){const s=window.$pinia?.world;if(!s||!s.addCustomWorldTag)return this.logger.error("World store not available or not patched"),!1;try{return s.addCustomWorldTag({WorldId:e,Tag:r,TagColour:t,Url:o,Tooltip:g}),!0}catch(a){const i=a instanceof Error?a.message:String(a);return this.logger.error(`Failed to add world tag: ${i}`),!1}}getWorldTags(e){return this.customWorldTags.get(e)||[]}removeWorldTag(e,r){const t=this.customWorldTags.get(e);if(!t)return!1;const o=t.filter(g=>g.tag!==r);return o.length===0?this.customWorldTags.delete(e):this.customWorldTags.set(e,o),!0}removeAllWorldTags(e){return this.customWorldTags.delete(e)}getAllWorldTags(){return Array.from(this.customWorldTags.entries()).map(([e,r])=>({worldId:e,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllWorldTags(){this.customWorldTags.clear(),this.logger.log("All custom world tags cleared")}addUserTag(e,r,t="#FF00C6",o="",g=""){const s=window.$pinia?.user;if(!s||!s.addCustomUserTag)return this.logger.error("User store not available or not patched"),!1;try{return s.addCustomUserTag({UserId:e,Tag:r,TagColour:t,Url:o,Tooltip:g}),!0}catch(a){const i=a instanceof Error?a.message:String(a);return this.logger.error(`Failed to add user tag: ${i}`),!1}}getUserTags(e){return this.customUserTags.get(e)||[]}removeUserTag(e,r){const t=this.customUserTags.get(e);if(!t)return!1;const o=t.filter(g=>g.tag!==r);return o.length===0?this.customUserTags.delete(e):this.customUserTags.set(e,o),!0}removeAllUserTags(e){return this.customUserTags.delete(e)}getAllUserTags(){return Array.from(this.customUserTags.entries()).map(([e,r])=>({userId:e,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllUserTags(){this.customUserTags.clear(),this.logger.log("All custom user tags cleared")}addAvatarTag(e,r,t="#00C6FF",o="",g=""){const s=window.$pinia?.avatar;if(!s||!s.addCustomAvatarTag)return this.logger.error("Avatar store not available or not patched"),!1;try{return s.addCustomAvatarTag({AvatarId:e,Tag:r,TagColour:t,Url:o,Tooltip:g}),!0}catch(a){const i=a instanceof Error?a.message:String(a);return this.logger.error(`Failed to add avatar tag: ${i}`),!1}}getAvatarTags(e){return this.customAvatarTags.get(e)||[]}removeAvatarTag(e,r){const t=this.customAvatarTags.get(e);if(!t)return!1;const o=t.filter(g=>g.tag!==r);return o.length===0?this.customAvatarTags.delete(e):this.customAvatarTags.set(e,o),!0}removeAllAvatarTags(e){return this.customAvatarTags.delete(e)}getAllAvatarTags(){return Array.from(this.customAvatarTags.entries()).map(([e,r])=>({avatarId:e,tags:r.map(t=>({tag:t.tag,colour:t.colour,timestamp:t.timestamp}))}))}clearAllAvatarTags(){this.customAvatarTags.clear(),this.logger.log("All custom avatar tags cleared")}async stop(){await super.stop(),this.logger.log("Tag API stopped")}};m(d,"TagAPIPlugin");let u=d;window.customjs.__LAST_PLUGIN_CLASS__=u;})();
