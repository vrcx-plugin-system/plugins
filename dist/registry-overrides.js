(()=>{var h=Object.defineProperty;var y=(d,e)=>h(d,"name",{value:e,configurable:!0});const o=class o extends Plugin{constructor(){super({name:"\u2699\uFE0F Registry Overrides",description:"VRChat registry settings management with event-based triggers (disabled by default)",authors:[{name:"Bluscream"}],build:"1760846455",tags:["Game","Config","Automation"],dependencies:[]}),this.eventHandlers=new Map,this._lastGameRunning=!1}async load(){const e=window.customjs.SettingType,t={};this.settings=this.defineSettings({overrides:{type:e.STRING,description:"Dictionary of registry key overrides with their values and trigger events",default:JSON.stringify(t)}}),this.logger.log(`\u2699\uFE0F Loaded ${Object.keys(JSON.parse(this.settings.store.overrides||"{}")).length} registry overrides`),this.setupEventHandlers(),this.logger.log("Registry Overrides plugin ready"),this.loaded=!0}async start(){await this.applyRegistrySettings("VRCX_START"),this.setupGameStateMonitoring();const e=this.registerTimer(setInterval(async()=>{await this.applyRegistrySettings("PERIODIC")},2500));this.enabled=!0,this.started=!0,this.logger.log("Registry Overrides plugin started, periodic updates and game monitoring enabled")}async onLogin(e){}async stop(){this.logger.log("Stopping Registry Overrides plugin"),await super.stop()}setupEventHandlers(){this.eventHandlers.set("VRCX_START",()=>this.applyRegistrySettings("VRCX_START")),this.eventHandlers.set("GAME_START",()=>this.applyRegistrySettings("GAME_START")),this.eventHandlers.set("INSTANCE_SWITCH_PUBLIC",()=>this.applyRegistrySettings("INSTANCE_SWITCH_PUBLIC")),this.eventHandlers.set("INSTANCE_SWITCH_PRIVATE",()=>this.applyRegistrySettings("INSTANCE_SWITCH_PRIVATE")),this.logger.log("Event handlers registered")}setupGameStateMonitoring(){this.subscribe("GAME",({isGameRunning:e})=>{e&&!this._lastGameRunning&&(this.logger.log("Game started detected"),this.triggerEvent("GAME_START")),this._lastGameRunning=e})}triggerEvent(e){const t=this.eventHandlers.get(e);t?(this.logger.log(`Triggering event: ${e}`),t()):this.logger.warn(`Unknown event: ${e}`)}async applyRegistrySettings(e="PERIODIC"){try{const t=JSON.parse(this.settings.store.overrides||"{}");if(!t||Object.keys(t).length===0)return;for(const[i,r]of Object.entries(t))try{let s,n;if(typeof r=="object"&&r!==null&&r.value!==void 0?(s=r.value,n=r.events||["PERIODIC"]):(s=r,n=["PERIODIC"]),!n.includes(e)&&!n.includes("PERIODIC"))continue;const l=await window.AppApi.GetVRChatRegistryKey(i);if(l===s)continue;this.logger.log(`[${e}] ${i}: ${l} \u2192 ${s}`);let a=3;typeof s=="string"?a=1:typeof s=="number"&&(a=3),await window.AppApi.SetVRChatRegistryKey(i,s,a)}catch(s){this.logger.error(`Error setting registry key ${i}:`,s)}}catch(t){this.logger.error("Error applying registry settings:",t)}}async getRegistryValue(e){try{return await window.AppApi.GetVRChatRegistryKey(e)}catch(t){return this.logger.error(`Error getting registry key ${e}:`,t),null}}async setRegistryValue(e,t,i=3){try{return await window.AppApi.SetVRChatRegistryKey(e,t,i),this.logger.log(`Set registry key ${e} = ${t}`),!0}catch(r){return this.logger.error(`Error setting registry key ${e}:`,r),!1}}};y(o,"RegistryOverridesPlugin");let g=o;window.customjs.__LAST_PLUGIN_CLASS__=g;})();
