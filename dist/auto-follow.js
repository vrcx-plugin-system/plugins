(()=>{var w=Object.defineProperty;var d=(g,e)=>w(g,"name",{value:e,configurable:!0});const u=class u extends CustomModule{constructor(){super({name:"\u{1F465} Auto Follow",description:"Automatically sends you invites when followed users join worlds (or requests invites for private instances)",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Automation","Social"],dependencies:["context-menu-api"]}),this.autoFollowUsers=new Map,this.lastRequestedFrom=new Map,this.checkInterval=1e4}getActionButtons(){return[{label:"Clear All",color:"warning",icon:"ri-user-unfollow-line",title:"Clear all auto-follow users from the list",callback:async()=>{const e=this.autoFollowUsers.size;if(e===0){this.logger.showInfo("Auto Follow list is already empty");return}confirm(`Remove all ${e} user(s) from Auto Follow list?`)&&this.clearAllAutoFollows()}}]}async load(){const e=window.customjs.types.SettingType;this.settings=this.defineSettings({customInviteRequestMessage:{type:e.STRING,description:"Message template for invite requests when following users",placeholder:"Can I join you?",default:"Can I join you?",variables:{"{userId}":"Target user ID being followed","{userName}":"Target user display name","{userDisplayName}":"Target user display name","{worldName}":"World name they traveled to","{worldId}":"World ID","{instanceId}":"Full instance ID","{myUserId}":"Your user ID","{myUserName}":"Your display name","{myDisplayName}":"Your display name","{now}":"Formatted date/time","{date}":"Current date","{time}":"Current time","{timestamp}":"Unix timestamp","{iso}":"ISO 8601 date/time"}}}),this.logger.log(`\u2699\uFE0F Custom invite message: "${this.settings.store.customInviteRequestMessage}"`),this.logger.log("Auto Follow plugin ready"),this.loaded=!0}async start(){this.utils=window.customjs.utils,this.contextMenuApi=await window.customjs.waitForModule("context-menu-api"),this.setupUserButtons(),this.setupLocationMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("Auto Follow plugin started, location monitoring active")}async onLogin(e){}async stop(){this.logger.log("Stopping Auto Follow plugin");const e=window.customjs?.pluginManager?.getPlugin("context-menu-api");e&&(e.removeUserItem("autoFollow"),e.removeUserItem("clearAutoFollow")),this.autoFollowUsers.clear(),this.lastRequestedFrom.clear(),await super.stop()}setupUserButtons(){try{return this.autoFollowItem&&this.clearAutoFollowItem?!0:this.contextMenuApi?(this.autoFollowItem=this.contextMenuApi.addUserItem("autoFollow",{text:"Auto Follow",icon:"el-icon-position",onClick:e=>this.toggleAutoFollow(e)}),this.clearAutoFollowItem=this.contextMenuApi.addUserItem("clearAutoFollow",{text:"Clear AutoFollow",icon:"el-icon-delete",onClick:()=>this.clearAllAutoFollows()}),this.logger.log("Auto Follow context menu buttons added"),!0):(this.logger.warn("Context Menu API not available"),!1)}catch(e){return this.logger.error("Error setting up Auto Follow buttons:",e),(!this.autoFollowItem||!this.clearAutoFollowItem)&&setTimeout(()=>this.setupUserButtons(),2e3),!1}}setupLocationMonitoring(){const e=this.registerTimer(setInterval(()=>{this.checkFollowedUsersLocations()},this.checkInterval));this.logger.log(`Location monitoring started (interval: ${this.checkInterval}ms)`)}async checkFollowedUsersLocations(){if(this.autoFollowUsers.size!==0)try{for(const[e,o]of this.autoFollowUsers.entries())await this.checkUserLocation(e,o)}catch(e){this.logger.error(`Error checking locations: ${e.message}`)}}async checkUserLocation(e,o){try{const s=await window.request.userRequest.getUser({userId:e});if(!s||!s.json)return;const r=s.json,t=r.location;if(!t||t==="offline"||t==="private")return;o.lastLocation!==t&&(this.logger.log(`User ${r.displayName} moved from ${o.lastLocation||"unknown"} to ${t}`),o.lastLocation=t,o.user=r,this.autoFollowUsers.set(e,o),this.lastRequestedFrom.get(e)!==t&&await this.requestInviteToUser(r,t))}catch(s){this.logger.warn(`Failed to check location for user ${e}: ${s.message}`)}}async requestInviteToUser(e,o){const s=e.displayName,r=window.$pinia?.user?.currentUser;if(r?.location===o){this.logger.log(`Already in the same instance as ${s}, skipping`);return}const t=window.utils.parseLocation(o);if(t.isTraveling){this.logger.log(`${s} is traveling, waiting for destination...`),this.logger.log("User object while traveling:",e),console.log("User object while traveling:",e);return}if(!t.isRealInstance){this.logger.warn(`Invalid instance location for ${s}: ${o}`);return}let i="Unknown World";try{const l=await window.request.worldRequest.getCachedWorld({worldId:t.worldId});l?.ref?.name?i=l.ref.name:l?.json?.name&&(i=l.json.name)}catch(l){this.logger.warn(`Failed to get world name: ${l.message}`)}const h=t.accessType==="invite"&&!t.canRequestInvite;if(["public","friends","friends+","invite+","group","groupPublic","groupPlus"].includes(t.accessType)||t.accessType==="group"&&t.groupId){this.logger.log(`Sending self-invite to join ${s} in "${i}" (${t.accessType})`);try{await window.request.instanceRequest.selfInvite({instanceId:t.instanceId,worldId:t.worldId}),this.lastRequestedFrom.set(e.id,o),this.logger.showSuccess(`Sent self-invite to join ${s} in ${i}`),this.logger.log(`\u2713 Successfully sent self-invite to ${s}`)}catch(l){this.logger.error(`Failed to send self-invite to ${i}: ${l.message}`)}}else if(h||t.accessType==="invite"){this.logger.log(`Requesting invite from ${s} to private instance "${i}"`);try{const l=this.settings.store.customInviteRequestMessage||"Can I join you?",a=this.processInviteMessageTemplate(l,e,i,o),c={instanceId:o,worldId:t.worldId,worldName:i};a&&(c.message=a),await window.request.notificationRequest.sendRequestInvite(c,e.id),this.lastRequestedFrom.set(e.id,o),this.logger.showSuccess(`Requested invite from ${s} to ${i}`),this.logger.log(`\u2713 Successfully requested invite from ${s}`),this.logger.addNotificationLog({id:e.id,displayName:e.displayName,type:"requestInvite",created_at:new Date().toJSON(),message:a||"Auto Follow: Requested invite",senderUserId:r?.id,senderUsername:r?.displayName,details:{worldId:t.worldId,worldName:i}})}catch(l){this.logger.error(`Failed to request invite from ${s}: ${l.message}`)}}else this.logger.warn(`Unknown instance type "${t.accessType}" for ${s} in ${i}, skipping`)}processInviteMessageTemplate(e,o,s,r){const t=window.$pinia?.user?.currentUser,i=new Date;return e.replace("{userId}",o.id||"").replace("{userName}",o.displayName||"").replace("{userDisplayName}",o.displayName||"").replace("{worldName}",s||"").replace("{worldId}",r.split(":")[0]||"").replace("{instanceId}",r||"").replace("{myUserId}",t?.id||"").replace("{myUserName}",t?.displayName||"").replace("{myDisplayName}",t?.displayName||"").replace("{now}",this.utils?.formatDateTime?.()||i.toISOString()).replace("{date}",i.toLocaleDateString()).replace("{time}",i.toLocaleTimeString()).replace("{timestamp}",i.getTime().toString()).replace("{iso}",i.toISOString())}toggleAutoFollow(e){if(this.contextMenuApi){if(this.utils.isEmpty(e)){this.logger.showError("Invalid user");return}this.autoFollowUsers.has(e.id)?(this.autoFollowUsers.delete(e.id),this.lastRequestedFrom.delete(e.id),this.logger.log(`Removed ${e.displayName} from Auto Follow list`),this.logger.showInfo(`Removed ${e.displayName} from Auto Follow list`)):(this.autoFollowUsers.set(e.id,{user:e,lastLocation:null}),this.logger.log(`Added ${e.displayName} to Auto Follow list`),this.logger.showSuccess(`Added ${e.displayName} to Auto Follow list`),this.checkUserLocation(e.id,{user:e,lastLocation:null})),this.updateAutoFollowButtonText()}}updateAutoFollowButtonText(){if(this.contextMenuApi)if(this.autoFollowUsers.size===0)this.contextMenuApi.updateUserItem("autoFollow",{text:"Auto Follow",icon:"el-icon-position"});else if(this.autoFollowUsers.size===1){const e=Array.from(this.autoFollowUsers.values())[0];this.contextMenuApi.updateUserItem("autoFollow",{text:`Auto Follow: ${e.user.displayName}`,icon:"el-icon-position"})}else this.contextMenuApi.updateUserItem("autoFollow",{text:`Auto Follow (${this.autoFollowUsers.size} users)`,icon:"el-icon-position"})}clearAllAutoFollows(){if(this.autoFollowUsers.size===0){this.logger.showInfo("Auto Follow list is already empty");return}const e=this.autoFollowUsers.size;this.autoFollowUsers.clear(),this.lastRequestedFrom.clear(),this.logger.log(`Cleared ${e} user(s) from Auto Follow list`),this.logger.showSuccess(`Cleared ${e} user(s) from Auto Follow list`),this.updateAutoFollowButtonText()}getAutoFollowUsers(){return this.autoFollowUsers}getAutoFollowUsersList(){return Array.from(this.autoFollowUsers.values()).map(e=>e.user)}addAutoFollowUser(e){!e||!e.id||(this.autoFollowUsers.set(e.id,{user:e,lastLocation:null}),this.logger.log(`Auto-follow user added: ${e?.displayName}`),this.updateAutoFollowButtonText(),this.checkUserLocation(e.id,{user:e,lastLocation:null}))}removeAutoFollowUser(e){if(this.autoFollowUsers.has(e)){const o=this.autoFollowUsers.get(e);this.autoFollowUsers.delete(e),this.lastRequestedFrom.delete(e),this.logger.log(`Auto-follow user removed: ${o?.user?.displayName}`),this.updateAutoFollowButtonText()}}clearAutoFollowUsers(){this.clearAllAutoFollows()}getcustomInviteRequestMessage(){return this.settings.store.customInviteRequestMessage}async setcustomInviteRequestMessage(e){this.settings.store.customInviteRequestMessage=e||"Can I join you?",e===null?this.logger.log("Custom invite message disabled"):this.logger.log(`Custom invite message updated: "${e}"`)}setCheckInterval(e){e<5e3&&(this.logger.warn("Interval too short, setting to minimum 5000ms"),e=5e3),this.checkInterval=e,this.logger.log(`Check interval updated to ${e}ms`),this.started&&this.logger.log("Restarting location monitoring with new interval...")}};d(u,"AutoFollowPlugin");let n=u;window.customjs.__LAST_PLUGIN_CLASS__=n;})();
