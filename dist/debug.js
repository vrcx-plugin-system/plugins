(()=>{var $=Object.defineProperty;var d=(k,e)=>$(k,"name",{value:e,configurable:!0});const w=class w extends Plugin{constructor(){super({name:"\u{1F41B} Debug Plugin",description:"Debug utilities, IPC logging, global scope search, and console commands for development",authors:[{name:"Bluscream"}],build:"1760846455",dependencies:[]})}async load(){window.customjs.debug={printDebugInfo:()=>this.printDebugInfo(),listPlugins:()=>this.listPlugins(),getPlugin:e=>this.getPlugin(e),listEvents:()=>this.listEvents(),listHooks:()=>this.listHooks(),testEvent:(e,o)=>this.testEvent(e,o),getCurrentUser:()=>window.$pinia?.user?.currentUser,getCurrentLocation:()=>window.$app?.lastLocation,getFriends:()=>window.$pinia?.user?.currentUser?.friends,getCustomTags:()=>window.$pinia?.user?.customUserTags,getStores:()=>window.$pinia,getUserTag:e=>window.customjs.pluginManager.getPlugin("tag-manager")?.getUserTag(e),clearProcessedMenus:()=>window.customjs.pluginManager.getPlugin("context-menu-api")?.clearProcessedMenus(),triggerRegistryEvent:e=>window.customjs.pluginManager.getPlugin("registry-overrides")?.triggerEvent(e),refreshTags:()=>window.customjs.pluginManager.getPlugin("tag-manager")?.refreshTags(),getLoadedTagsCount:()=>window.customjs.pluginManager.getPlugin("tag-manager")?.getLoadedTagsCount(),getActiveTagsCount:()=>window.customjs.pluginManager.getPlugin("tag-manager")?.getActiveTagsCount(),getPluginManager:()=>window.customjs?.pluginManager,getPluginList:()=>window.customjs?.pluginManager?.getPluginList(),inspectPlugin:e=>this.inspectPlugin(e),searchVariable:(e,o)=>this.searchVariable(e,o)},this.logger.log("Debug utilities ready"),this.loaded=!0}async start(){this.setupIPCLogging(),this.enabled=!0,this.started=!0,this.logger.log("Debug plugin started (access via window.customjs.debug)"),this.printDebugInfo()}setupIPCLogging(){this.registerPreHook("AppApi.SendIpc",e=>{console.log("[IPC OUT]",e)}),this.logger.log("IPC logging hook registered (will activate when function available)")}async stop(){this.logger.log("Stopping Debug plugin"),window.customjs?.debug&&delete window.customjs.debug,await super.stop()}printDebugInfo(){this.logger.log("=== DEBUG INFO ==="),this.logger.log(`Plugins loaded: ${window.customjs.plugins.length}`),this.logger.log(`Events registered: ${Object.keys(window.customjs.events).length}`),this.logger.log(`Hooks registered: pre=${Object.keys(window.customjs.hooks.pre).length}, post=${Object.keys(window.customjs.hooks.post).length}`),this.logger.log(`Functions backed up: ${Object.keys(window.customjs.functions).length}`),window.customjs.plugins.forEach(e=>{this.logger.log(`  - ${e.metadata.name} (build: ${e.metadata.build}) (${e.enabled?"enabled":"disabled"}, ${e.loaded?"loaded":"not loaded"}, ${e.started?"started":"not started"})`)})}listPlugins(){return window.customjs.plugins.map(e=>({id:e.metadata.id,name:e.metadata.name,build:e.metadata.build,enabled:e.enabled,loaded:e.loaded,started:e.started}))}getPlugin(e){return window.customjs.pluginManager.getPlugin(e)}listEvents(){window.AppApi?.ShowDevTools&&window.AppApi.ShowDevTools();const e=window.customjs?.events||{};return console.group("Custom Events"),Object.keys(e).forEach(o=>{console.log(`${o}: ${e[o].length} listeners`)}),console.groupEnd(),e}listHooks(){return window.AppApi?.ShowDevTools&&window.AppApi.ShowDevTools(),console.group("Registered Hooks"),console.log("Pre-hooks:"),console.dir(Object.keys(window.customjs?.hooks?.pre||{})),console.log("Post-hooks:"),console.dir(Object.keys(window.customjs?.hooks?.post||{})),console.log("Void-hooks:"),console.dir(Object.keys(window.customjs?.hooks?.void||{})),console.log("Replace-hooks:"),console.dir(Object.keys(window.customjs?.hooks?.replace||{})),console.groupEnd(),window.customjs?.hooks}testEvent(e,o){this.emit(e,o),this.logger.log(`Emitted event: ${e}`,o)}inspectPlugin(e){window.AppApi?.ShowDevTools&&window.AppApi.ShowDevTools();const o=window.customjs?.plugins?.find(i=>i.metadata.id===e);return o?(console.group(`Plugin: ${o.metadata.name}`),console.log("Metadata:"),console.dir(o.metadata),console.table({enabled:o.enabled,loaded:o.loaded,started:o.started}),console.log("Resources:"),console.dir(o.resources),console.groupEnd()):console.warn(`Plugin not found: ${e}`),o}searchVariable(e,o={}){const{maxDepth:i=5,caseSensitive:p=!1,exactMatch:v=!1,root:j=window}=o,g=[],h=new WeakSet,m=p?e:e.toLowerCase(),f=d((t,P,l)=>{if(!(l>i)&&t!=null&&!(typeof t!="object"&&typeof t!="function")&&!h.has(t)){h.add(t);try{const y=Object.getOwnPropertyNames(t);for(const n of y)try{const c=P?`${P}.${n}`:n,b=p?n:n.toLowerCase();if(v?b===m:b.includes(m)){let s,r;try{const a=Object.getOwnPropertyDescriptor(t,n);a&&a.get&&!a.set?(s="[Getter]",r="getter"):(s=t[n],r=typeof s)}catch{s="[Access Error]",r="error"}g.push({path:c,key:n,type:r,value:s})}if(l<i)try{const s=t[n];s&&(typeof s=="object"||typeof s=="function")&&f(s,c,l+1)}catch{}}catch{}}catch{}}},"search");return this.logger.log(`Searching for "${e}" (max depth: ${i})...`),f(j,"",0),window.AppApi?.ShowDevTools&&window.AppApi.ShowDevTools(),console.group(`Search results for "${e}" (${g.length} matches)`),g.forEach(t=>{t.type==="getter"||t.type==="error"?console.log(`${t.path} [${t.type}]`):console.log(`${t.path} [${t.type}]`,t.value)}),console.groupEnd(),this.logger.log(`Found ${g.length} matches for "${e}"`),g}};d(w,"DebugPlugin");let u=w;window.customjs.__LAST_PLUGIN_CLASS__=u;})();
