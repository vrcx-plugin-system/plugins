(()=>{var p=Object.defineProperty;var c=(f,e)=>p(f,"name",{value:e,configurable:!0});const d=class d extends Plugin{constructor(){super({name:"\u{1F9ED} Navigation Menu API",description:"API for adding custom navigation menu items to VRCX",authors:[{name:"Bluscream"}],build:"1760846455",tags:["API","Core","Navigation","Library"],dependencies:[]}),this.customItems=new Map,this.contentContainers=new Map,this.navMenu=null,this.contentParent=null,this.currentActiveIndex=null}async load(){this.logger.log("Navigation Menu API ready"),this.loaded=!0}async start(){await this.waitForNavMenu(),await this.setupContentArea(),this.setupObserver(),this.renderAllItems(),this.enabled=!0,this.started=!0,this.logger.log("Navigation Menu API started")}async onLogin(e){this.logger.log(`Setting up menu watcher for user: ${e?.displayName}`),this.watchMenuChanges()}async stop(){this.logger.log("Stopping Navigation Menu API"),this.clearAllItems(),await super.stop()}async waitForNavMenu(){return new Promise(e=>{let n=0;const t=50,i=c(()=>{this.navMenu=document.querySelector(".el-menu"),this.navMenu?this.navMenu.querySelectorAll(".el-menu-item").length>0?(this.logger.log("Navigation menu found with items"),e()):n<t?(n++,setTimeout(i,100)):(this.logger.log("Navigation menu found (no items yet, proceeding anyway)"),e()):setTimeout(i,500)},"checkNav");setTimeout(i,1e3)})}async setupContentArea(){return new Promise(e=>{const n=c(()=>{this.contentParent=document.querySelector(".el-splitter"),this.contentParent?(this.logger.log("Content area found, ready to add tab content"),e()):setTimeout(n,500)},"findContentArea");setTimeout(n,1e3)})}setupObserver(){const e=new MutationObserver(()=>{this.navMenu&&!document.contains(this.navMenu)&&(this.navMenu=null,this.waitForNavMenu().then(()=>this.renderAllItems()))});this.registerObserver(e),e.observe(document.body,{childList:!0,subtree:!0}),this.logger.log("Mutation observer setup complete")}watchMenuChanges(){this.subscribe("UI",n=>{const t=n?.menuActiveIndex||window.$pinia?.ui?.menuActiveIndex;t&&this.updateContentVisibility(t)});const e=window.$pinia?.ui?.menuActiveIndex;e&&this.updateContentVisibility(e),this.logger.log("Menu watcher setup complete")}updateContentVisibility(e){const n=this.currentActiveIndex;this.currentActiveIndex=e,this.customItems.has(e)&&this.contentParent&&this.contentParent.querySelectorAll(".x-container").forEach(s=>{(!s.id||!s.id.startsWith("custom-nav-content-"))&&(s.style.display="none")}),this.contentContainers.forEach((i,s)=>{const l=e===s,h=n===s;if(i.style.display=l?"block":"none",l&&!h){const r=this.customItems.get(s);if(r?.onShow)try{r.onShow()}catch(o){this.logger.error(`Error in onShow callback for ${s}:`,o)}}else if(!l&&h){const r=this.customItems.get(s);if(r?.onHide)try{r.onHide()}catch(o){this.logger.error(`Error in onHide callback for ${s}:`,o)}}}),this.customItems.forEach((i,s)=>{const l=this.navMenu?.querySelector(`[data-custom-nav-item="${s}"]`);l&&(e===s?l.classList.add("is-active"):l.classList.remove("is-active"))})}addItem(e,n){const t={id:e,label:n.label||e,icon:n.icon||"ri-plugin-line",onClick:n.onClick||null,content:n.content||null,onShow:n.onShow||null,onHide:n.onHide||null,position:n.position!==void 0?n.position:null,before:n.before||null,after:n.after||null,enabled:n.enabled!==!1};return this.customItems.set(e,t),this.logger.log(`Added item: ${e}`),this.navMenu&&this.renderItem(t),t.content&&this.contentParent?this.createContentContainer(e,t.content):t.content&&!this.contentParent&&setTimeout(()=>{this.contentParent&&this.createContentContainer(e,t.content)},2e3),t}createContentContainer(e,n){if(!this.contentParent){this.logger.warn(`Content parent not ready for ${e}`);return}const t=document.createElement("div");if(t.id=`custom-nav-content-${e}`,t.className="x-container",t.style.cssText=`
      display: none;
      padding: 20px;
      height: 100%;
      overflow-y: auto;
    `,typeof n=="function"){const s=n();s instanceof HTMLElement?t.appendChild(s):typeof s=="string"&&(t.innerHTML=s)}else n instanceof HTMLElement?t.appendChild(n):typeof n=="string"&&(t.innerHTML=n);const i=this.contentParent.querySelector(".el-splitter-panel");i&&(i.appendChild(t),this.contentContainers.set(e,t),this.logger.log(`Created content container for: ${e}`))}removeItem(e){if(!this.customItems.has(e))return this.logger.warn(`Item not found: ${e}`),!1;this.customItems.delete(e);const n=this.navMenu?.querySelector(`[data-custom-nav-item="${e}"]`);n&&n.remove();const t=this.contentContainers.get(e);return t&&(t.remove(),this.contentContainers.delete(e)),this.logger.log(`Removed item: ${e}`),!0}updateItem(e,n){const t=this.customItems.get(e);if(!t)return this.logger.warn(`Item not found: ${e}`),!1;Object.assign(t,n);const i=this.navMenu?.querySelector(`[data-custom-nav-item="${e}"]`);return i&&(i.remove(),this.renderItem(t)),this.logger.log(`Updated item: ${e}`),!0}hasItem(e){return this.customItems.has(e)}getAllItems(){return Array.from(this.customItems.values())}clearAllItems(){const e=Array.from(this.customItems.keys());e.forEach(n=>this.removeItem(n)),this.logger.log(`Cleared all ${e.length} custom items`)}renderItem(e){if(!this.navMenu||!e.enabled||this.navMenu.querySelector(`[data-custom-nav-item="${e.id}"]`))return;if(e.position!==null||e.before||e.after){const o=this.navMenu.querySelectorAll(".el-menu-item");if(Array.from(o).filter(u=>!u.hasAttribute("data-custom-nav-item")).length===0)if(e._retryCount||(e._retryCount=0),e._retryCount<50){e._retryCount++,setTimeout(()=>this.renderItem(e),100);return}else this.logger.log(`Timed out waiting for VRCX items, appending ${e.id} to end`)}const t=document.createElement("li");t.className="el-menu-item",t.setAttribute("data-custom-nav-item",e.id),t.setAttribute("role","menuitem"),t.setAttribute("tabindex","-1");const i=document.createElement("i");i.className=e.icon,i.style.fontSize="19px",i.style.width="24px",i.style.height="24px",i.style.display="inline-flex",i.style.alignItems="center",i.style.justifyContent="center";const s=document.createElement("span");s.className="el-tooltip__trigger",s.textContent=e.label,s.style.display="none",t.appendChild(i),t.appendChild(s);const l=c(o=>{o.preventDefault(),o.stopPropagation(),this.logger.log(`Nav item clicked: "${e.id}" (label: "${e.label}", hasContent: ${!!e.content})`),e.content?(this.customItems.forEach((a,u)=>{const g=this.navMenu?.querySelector(`[data-custom-nav-item="${u}"]`);g&&g.classList.remove("is-active")}),t.classList.add("is-active"),window.$pinia?.ui?.selectMenu&&window.$pinia.ui.selectMenu(e.id)):(t.classList.add("is-active"),setTimeout(()=>{t.classList.remove("is-active")},200)),e.onClick&&e.onClick()},"clickHandler");this.registerListener(t,"click",l);const h=c(()=>{t.setAttribute("title",e.label)},"hoverHandler");this.registerListener(t,"mouseenter",h);let r=null;if(e.position!==null){const o=this.navMenu.querySelectorAll(".el-menu-item");if(e.position>=0&&e.position<o.length)r=o[e.position];else if(e.position<0){const a=o.length+e.position;a>=0&&(r=o[a])}}else if(e.before){const o=this.navMenu.querySelectorAll(".el-menu-item");for(const a of o)if(a.getAttribute("index")===e.before){r=a;break}}else if(e.after){const o=this.navMenu.querySelectorAll(".el-menu-item");for(const a of o)if(a.getAttribute("index")===e.after){r=a.nextSibling;break}}r?this.navMenu.insertBefore(t,r):this.navMenu.appendChild(t),this.logger.log(`Rendered item: ${e.id}`)}renderAllItems(){this.customItems.forEach(e=>{this.renderItem(e)})}};c(d,"NavMenuApiPlugin");let m=d;window.customjs.__LAST_PLUGIN_CLASS__=m;})();
