(()=>{var g=Object.defineProperty;var d=(l,e)=>g(l,"name",{value:e,configurable:!0});const c=class c extends CustomModule{constructor(){super({name:"OSC Bridge \u{1F39B}\uFE0F",description:"Bridges VRCX with external OSC application for VRChat OSC communication",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Integration","OSC","VRChat"],required_dependencies:[]}),this.oscReady=!1,this.pendingMessages=[],this.stats={messagesSent:0,messagesReceived:0,errors:0,lastSent:null,lastReceived:null},this.actionButtons=[{title:"Test Connection",color:"primary",icon:"ri-signal-tower-line",description:"Send test ping to OSC application",callback:async()=>{this.sendChatBox("VRCX Plugin Test"),this.logger.showInfo("Test message sent to OSC app")}},{title:"Reset Stats",color:"warning",icon:"ri-refresh-line",description:"Reset statistics",callback:async()=>{this.stats.messagesSent=0,this.stats.messagesReceived=0,this.stats.errors=0,this.logger.showSuccess("Statistics reset")}}]}async load(){this.registerEvent("osc-param-changed",{description:"Fired when VRChat OSC parameter changes",payload:{path:'string - OSC parameter path (e.g., "/avatar/parameters/VRChatting")',type:"string - Value type (bool, int, float)",value:"any - Parameter value",timestamp:"number - Unix timestamp"}}),this.registerEvent("osc-ready",{description:"Fired when OSC bridge is connected",payload:{timestamp:"number - Unix timestamp"}}),this.registerEvent("osc-error",{description:"Fired when OSC error occurs",payload:{error:"string - Error message",timestamp:"number - Unix timestamp"}}),this.registerEvent("command-received",{description:"Fired when VRCOSC sends a command to VRCX",payload:{command:"string - Command name",args:"any - Command arguments",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!0});const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({connection:{name:"\u{1F39B}\uFE0F Connection",description:"OSC connection settings"},chatbox:{name:"\u{1F39B}\uFE0F ChatBox",description:"VRChat ChatBox integration"},advanced:{name:"\u{1F39B}\uFE0F Advanced",description:"Advanced OSC settings"}}),this.settings=this.defineSettings({enabled:{type:e.BOOLEAN,description:"Enable OSC bridge",category:"connection",default:!0},autoReconnect:{type:e.BOOLEAN,description:"Auto-reconnect to OSC app if disconnected",category:"connection",default:!0},logOscParams:{type:e.BOOLEAN,description:"Log all OSC parameter changes to console",category:"advanced",default:!1},logCommands:{type:e.BOOLEAN,description:"Log VRCOSC commands to console",category:"advanced",default:!0}}),this.setupIpcListener(),this.loaded=!0,this.logger.log("OSC Bridge plugin loaded")}async start(){this.oscReady=!1,this.pendingMessages=[],this.sendIpcToOSC("INIT",{timestamp:Date.now()}),this.logger.log("Waiting for VRCOSC to connect...")}async stop(){this.sendIpcToOSC("SHUTDOWN",{timestamp:Date.now()}),await super.stop(),this.logger.log("OSC Bridge stopped")}setupIpcListener(){this.onIpc(e=>{e.type?.startsWith("OSC_")&&this.handleIpcMessage(e)}),this.logger.log("IPC listener registered for OSC messages")}handleIpcMessage(e){try{switch(e.type){case"OSC_READY":this.oscReady=!0,this.logger.showSuccess("OSC application connected!"),this.emit("osc-ready",{timestamp:Date.now()}),this.pendingMessages.length>0&&(this.logger.log(`Sending ${this.pendingMessages.length} pending messages`),this.pendingMessages.forEach(t=>this.sendIpcToOSC("SEND",t)),this.pendingMessages=[]);break;case"OSC_RECEIVED":this.settings.store.logOscParams&&this.logger.log(`OSC \u2190 VRChat: ${e.payload.address} = ${JSON.stringify(e.payload.value)} (${e.payload.type})`),this.emit("osc-param-changed",{path:e.payload.address,type:e.payload.type,value:e.payload.value,timestamp:Date.now()});break;case"OSC_COMMAND":this.settings.store.logCommands&&this.logger.log(`Command \u2190 VRCOSC: ${e.payload.command}`),this.handleCommand(e.payload);break;case"OSC_ERROR":this.logger.error(`OSC Error: ${e.payload.error}`),this.emit("osc-error",{error:e.payload.error,timestamp:Date.now()});break;case"OSC_DISCONNECTED":this.oscReady=!1,this.logger.showWarning("OSC application disconnected"),this.settings.store.autoReconnect&&setTimeout(()=>{this.sendIpcToOSC("INIT",{timestamp:Date.now()})},5e3);break;default:this.logger.warn(`Unknown OSC IPC message: ${e.type}`)}}catch(t){const s=t instanceof Error?t.message:String(t);this.logger.error(`Error handling IPC message: ${s}`)}}async handleCommand(e){const{command:t,args:s,requestId:n}=e;let a={success:!1,error:"Unknown command"};try{switch(this.logger.log(`Command from VRCOSC: ${t}`,s),this.emit("command-received",{command:t,args:s,timestamp:Date.now()}),t){case"SEND_INVITE":a=await this.executeVRChatInvite(s);break;case"SEND_FRIEND_REQUEST":a=await this.executeVRChatFriendRequest(s);break;case"GET_USER_INFO":a=await this.executeGetUserInfo(s);break;case"GET_WORLD_INFO":a=await this.executeGetWorldInfo(s);break;case"GET_CURRENT_LOCATION":a=this.executeGetCurrentLocation();break;case"GET_FRIENDS_LIST":a=this.executeGetFriendsList(s);break;case"SHOW_NOTIFICATION":a=this.executeShowNotification(s);break;case"SHOW_TOAST":a=this.executeShowToast(s);break;case"OPEN_USER_DIALOG":a=this.executeOpenUserDialog(s);break;case"OPEN_WORLD_DIALOG":a=this.executeOpenWorldDialog(s);break;case"GET_PLUGIN_LIST":a=this.executeGetPluginList();break;case"GET_ONLINE_FRIENDS":a=this.executeGetOnlineFriends();break;case"QUERY_DATABASE":a=await this.executeQueryDatabase(s);break;default:a={success:!1,error:`Unknown command: ${t}`}}}catch(r){const i=r instanceof Error?r.message:String(r);a={success:!1,error:i},this.logger.error(`Command execution failed: ${i}`)}n&&this.sendIpcToOSC("RESPONSE",{requestId:n,result:a})}async executeVRChatInvite(e){const{userId:t,instanceId:s,worldId:n,worldName:a,message:r}=e,i={instanceId:s,worldId:n,worldName:a};return r&&(i.message=r),await window.request.notificationRequest.sendInvite(i,t),{success:!0,message:`Invite sent to ${t}`}}async executeVRChatFriendRequest(e){const{userId:t}=e;return await window.request.friendRequest.sendFriendRequest(t),{success:!0,message:`Friend request sent to ${t}`}}async executeGetUserInfo(e){const{userId:t}=e;return{success:!0,data:await window.request.apiRequest.getUser(t)}}async executeGetWorldInfo(e){const{worldId:t}=e;return{success:!0,data:await window.request.apiRequest.getWorld(t)}}executeGetCurrentLocation(){const e=window.$pinia?.user?.currentUser;return{success:!0,data:{userId:e?.id,displayName:e?.displayName,location:e?.location,worldId:window.$pinia?.location?.worldId,instanceId:window.$pinia?.location?.instanceId}}}executeGetFriendsList(e){const{onlineOnly:t=!1}=e||{},s=window.$pinia?.friends?.friends||[];return{success:!0,data:(t?s.filter(a=>a.location&&a.location!=="offline"&&a.location!=="private"):s).map(a=>({id:a.id,displayName:a.displayName,location:a.location,status:a.status,statusDescription:a.statusDescription}))}}executeShowNotification(e){const{title:t,message:s,type:n="info"}=e,a=window.AppApi;return a?.DesktopNotification&&a.DesktopNotification(t,s),{success:!0}}executeShowToast(e){const{message:t,type:s="info"}=e;switch(s){case"success":this.logger.showSuccess(t);break;case"warning":this.logger.showWarning(t);break;case"error":this.logger.showError(t);break;default:this.logger.showInfo(t);break}return{success:!0}}executeOpenUserDialog(e){const{userId:t}=e,s=window.$pinia?.user;return s?.showUserDialog?(s.showUserDialog(t),{success:!0}):{success:!1,error:"User dialog not available"}}executeOpenWorldDialog(e){const{worldId:t}=e,s=window.$pinia?.world;return s?.showWorldDialog?(s.showWorldDialog(t),{success:!0}):{success:!1,error:"World dialog not available"}}executeGetPluginList(){return{success:!0,data:(window.customjs?.modules||[]).map(t=>({id:t.metadata.id,name:t.metadata.name,enabled:t.enabled,started:t.started}))}}executeGetOnlineFriends(){const t=(window.$pinia?.friends?.friends||[]).filter(s=>s.location&&s.location!=="offline"&&s.location!=="private");return{success:!0,count:t.length,data:t.map(s=>({id:s.id,displayName:s.displayName,location:s.location,worldId:s.worldId}))}}async executeQueryDatabase(e){const{query:t,params:s=[]}=e;try{const n=window.SQLite;return n?{success:!0,data:await n.Execute(t,s)}:{success:!1,error:"SQLite not available"}}catch(n){return{success:!1,error:n instanceof Error?n.message:String(n)}}}sendIpcToOSC(e,t){try{const s=window.AppApi;return s?.SendIpc?(s.SendIpc(`OSC_${e}`,JSON.stringify(t)),!0):(this.logger.error("AppApi.SendIpc not available"),!1)}catch(s){const n=s instanceof Error?s.message:String(s);return this.logger.error(`Failed to send IPC: ${n}`),!1}}sendOSC(e,t){if(!this.settings.store.enabled)return this.logger.warn("OSC Bridge is disabled"),!1;const s={address:e,value:t,timestamp:Date.now()};if(!this.oscReady)return this.pendingMessages.push(s),this.logger.log(`OSC app not ready, message queued (${this.pendingMessages.length} pending)`),!1;const n=this.sendIpcToOSC("SEND",s);return n&&(this.stats.messagesSent++,this.stats.lastSent=Date.now(),this.settings.store.logOscParams&&this.logger.log(`OSC \u2192 VRChat: ${e} = ${JSON.stringify(t)}`)),n}sendChatBox(e,t=!0){const s=this.settings.store.chatboxPrefix||"",n=this.settings.store.chatboxSuffix||"",r=(s+e+n).substring(0,144);return this.sendOSC("/chatbox/input",[r,t,!1])}clearChatBox(){return this.sendOSC("/chatbox/input",["",!0,!1])}setAvatarParameter(e,t){return this.sendOSC(`/avatar/parameters/${e}`,t)}getStats(){return{oscReady:this.oscReady,messagesSent:this.stats.messagesSent,messagesReceived:this.stats.messagesReceived,errors:this.stats.errors,lastSent:this.stats.lastSent,lastReceived:this.stats.lastReceived,pendingMessages:this.pendingMessages.length}}};d(c,"OSCBridgePlugin");let o=c;window.customjs.__LAST_PLUGIN_CLASS__=o;})();
