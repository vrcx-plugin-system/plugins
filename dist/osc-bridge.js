(()=>{var g=Object.defineProperty;var l=(d,s)=>g(d,"name",{value:s,configurable:!0});const c=class c extends CustomModule{constructor(){super({name:"OSC Bridge \u{1F39B}\uFE0F",description:"Bridges VRCX with external OSC application for VRChat OSC communication",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Integration","OSC","VRChat"],required_dependencies:[]}),this.oscReady=!1,this.pendingMessages=[],this.stats={messagesSent:0,messagesReceived:0,errors:0,lastSent:null,lastReceived:null},this.actionButtons=[{title:"Test Connection",color:"primary",icon:"ri-signal-tower-line",description:"Send test ping to OSC application",callback:async()=>{this.sendChatBox("VRCX Plugin Test"),this.logger.showInfo("Test message sent to OSC app")}},{title:"Reset Stats",color:"warning",icon:"ri-refresh-line",description:"Reset statistics",callback:async()=>{this.stats.messagesSent=0,this.stats.messagesReceived=0,this.stats.errors=0,this.logger.showSuccess("Statistics reset")}}]}async load(){this.registerEvent("osc-param-changed",{description:"Fired when VRChat OSC parameter changes",payload:{path:'string - OSC parameter path (e.g., "/avatar/parameters/VRChatting")',type:"string - Value type (bool, int, float)",value:"any - Parameter value",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("osc-ready",{description:"Fired when OSC bridge is connected",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("osc-error",{description:"Fired when OSC error occurs",payload:{error:"string - Error message",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("command-received",{description:"Fired when VRCOSC sends a command to VRCX",payload:{command:"string - Command name",args:"any - Command arguments",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!0});const s=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({connection:{name:"\u{1F39B}\uFE0F Connection",description:"OSC connection settings"},chatbox:{name:"\u{1F39B}\uFE0F ChatBox",description:"VRChat ChatBox integration"},advanced:{name:"\u{1F39B}\uFE0F Advanced",description:"Advanced OSC settings"}}),this.settings=this.defineSettings({enabled:{type:s.BOOLEAN,description:"Enable OSC bridge",category:"connection",default:!0},autoReconnect:{type:s.BOOLEAN,description:"Auto-reconnect to OSC app if disconnected",category:"connection",default:!0},ipcMessageType:{type:s.STRING,description:"IPC message type for bulk events (Event7List=silent, VrcxMessage=verbose)",category:"advanced",default:"Event7List"},logOscParams:{type:s.BOOLEAN,description:"Log all OSC parameter changes to console",category:"advanced",default:!1},logCommands:{type:s.BOOLEAN,description:"Log VRCOSC commands to console",category:"advanced",default:!0}}),this.setupIpcListener(),this.patchIpcLogging(),this.loaded=!0,this.logger.log("OSC Bridge plugin loaded")}async start(){this.oscReady=!1,this.pendingMessages=[],this.sendIpcToOSC("INIT",{timestamp:Date.now()}),this.logger.log("Waiting for VRCOSC to connect...")}async stop(){this.sendIpcToOSC("SHUTDOWN",{timestamp:Date.now()}),await super.stop(),this.logger.log("OSC Bridge stopped")}setupIpcListener(){this.onIpc(s=>{if(s.type?.startsWith("OSC_"))this.handleIpcMessage(s);else{const t=this.settings?.store?.ipcMessageType||"Event7List";s.type===t&&s.raw?.MsgType==="OSC_RECEIVED_BULK"&&this.handleIpcMessage({type:s.raw.MsgType,payload:JSON.parse(s.raw.Data)})}}),this.logger.log("IPC listener registered for OSC messages")}patchIpcLogging(){const s=console.log,t=this;console.log=function(...e){if(e.length>=2&&e[0]==="IPC:"&&typeof e[1]=="object"){const n=e[1],a=t.settings?.store?.ipcMessageType||"Event7List";if(n?.Type===a&&n?.MsgType==="OSC_RECEIVED_BULK"&&!t.settings?.store?.logOscParams)return}s.apply(console,e)},this.logger.log("IPC logging filter installed")}handleIpcMessage(s){try{switch(s.type){case"OSC_READY":this.oscReady=!0,this.logger.showSuccess("OSC application connected!"),this.emit("osc-ready",{timestamp:Date.now()}),this.pendingMessages.length>0&&(this.logger.log(`Sending ${this.pendingMessages.length} pending messages`),this.pendingMessages.forEach(e=>this.sendIpcToOSC("SEND",e)),this.pendingMessages=[]);break;case"OSC_RECEIVED":this.settings.store.logOscParams&&this.logger.log(`OSC \u2190 VRChat: ${s.payload.address} = ${JSON.stringify(s.payload.value)} (${s.payload.type})`),this.emit("osc-param-changed",{path:s.payload.address,type:s.payload.type,value:s.payload.value,timestamp:Date.now()});break;case"OSC_RECEIVED_BULK":const t=s.payload.events;if(Array.isArray(t)){this.settings.store.logOscParams&&this.logger.log(`OSC \u2190 VRChat: Received ${t.length} bulk events`);for(const e of t)this.settings.store.logOscParams&&this.logger.log(`  ${e.Address} = ${JSON.stringify(e.Value)} (${e.Type})`),this.emit("osc-param-changed",{path:e.Address,type:e.Type,value:e.Value,timestamp:e.Timestamp||Date.now()});this.stats.messagesReceived+=t.length,this.stats.lastReceived=Date.now()}break;case"OSC_COMMAND":this.settings.store.logCommands&&this.logger.log(`Command \u2190 VRCOSC: ${s.payload.command}`),this.handleCommand(s.payload);break;case"OSC_ERROR":this.logger.error(`OSC Error: ${s.payload.error}`),this.emit("osc-error",{error:s.payload.error,timestamp:Date.now()});break;case"OSC_DISCONNECTED":this.oscReady=!1,this.logger.showWarning("OSC application disconnected"),this.settings.store.autoReconnect&&setTimeout(()=>{this.sendIpcToOSC("INIT",{timestamp:Date.now()})},5e3);break;default:this.logger.warn(`Unknown OSC IPC message: ${s.type}`)}}catch(t){const e=t instanceof Error?t.message:String(t);this.logger.error(`Error handling IPC message: ${e}`)}}async handleCommand(s){const{command:t,args:e,requestId:n}=s;let a={success:!1,error:"Unknown command"};try{switch(this.logger.log(`Command from VRCOSC: ${t}`,e),this.emit("command-received",{command:t,args:e,timestamp:Date.now()}),t){case"SEND_INVITE":a=await this.executeVRChatInvite(e);break;case"SEND_FRIEND_REQUEST":a=await this.executeVRChatFriendRequest(e);break;case"GET_USER_INFO":a=await this.executeGetUserInfo(e);break;case"GET_WORLD_INFO":a=await this.executeGetWorldInfo(e);break;case"GET_CURRENT_LOCATION":a=this.executeGetCurrentLocation();break;case"GET_FRIENDS_LIST":a=this.executeGetFriendsList(e);break;case"SHOW_NOTIFICATION":a=this.executeShowNotification(e);break;case"SHOW_TOAST":a=this.executeShowToast(e);break;case"OPEN_USER_DIALOG":a=this.executeOpenUserDialog(e);break;case"OPEN_WORLD_DIALOG":a=this.executeOpenWorldDialog(e);break;case"GET_PLUGIN_LIST":a=this.executeGetPluginList();break;case"GET_ONLINE_FRIENDS":a=this.executeGetOnlineFriends();break;case"QUERY_DATABASE":a=await this.executeQueryDatabase(e);break;default:a={success:!1,error:`Unknown command: ${t}`}}}catch(i){const o=i instanceof Error?i.message:String(i);a={success:!1,error:o},this.logger.error(`Command execution failed: ${o}`)}n&&this.sendIpcToOSC("RESPONSE",{requestId:n,result:a})}async executeVRChatInvite(s){const{userId:t,instanceId:e,worldId:n,worldName:a,message:i}=s,o={instanceId:e,worldId:n,worldName:a};return i&&(o.message=i),await window.request.notificationRequest.sendInvite(o,t),{success:!0,message:`Invite sent to ${t}`}}async executeVRChatFriendRequest(s){const{userId:t}=s;return await window.request.friendRequest.sendFriendRequest(t),{success:!0,message:`Friend request sent to ${t}`}}async executeGetUserInfo(s){const{userId:t}=s;return{success:!0,data:await window.request.apiRequest.getUser(t)}}async executeGetWorldInfo(s){const{worldId:t}=s;return{success:!0,data:await window.request.apiRequest.getWorld(t)}}executeGetCurrentLocation(){const s=window.$pinia?.user?.currentUser;return{success:!0,data:{userId:s?.id,displayName:s?.displayName,location:s?.location,worldId:window.$pinia?.location?.worldId,instanceId:window.$pinia?.location?.instanceId}}}executeGetFriendsList(s){const{onlineOnly:t=!1}=s||{},e=window.$pinia?.friends?.friends||[];return{success:!0,data:(t?e.filter(a=>a.location&&a.location!=="offline"&&a.location!=="private"):e).map(a=>({id:a.id,displayName:a.displayName,location:a.location,status:a.status,statusDescription:a.statusDescription}))}}executeShowNotification(s){const{title:t,message:e,type:n="info"}=s,a=window.AppApi;return a?.DesktopNotification&&a.DesktopNotification(t,e),{success:!0}}executeShowToast(s){const{message:t,type:e="info"}=s;switch(e){case"success":this.logger.showSuccess(t);break;case"warning":this.logger.showWarning(t);break;case"error":this.logger.showError(t);break;default:this.logger.showInfo(t);break}return{success:!0}}executeOpenUserDialog(s){const{userId:t}=s,e=window.$pinia?.user;return e?.showUserDialog?(e.showUserDialog(t),{success:!0}):{success:!1,error:"User dialog not available"}}executeOpenWorldDialog(s){const{worldId:t}=s,e=window.$pinia?.world;return e?.showWorldDialog?(e.showWorldDialog(t),{success:!0}):{success:!1,error:"World dialog not available"}}executeGetPluginList(){return{success:!0,data:(window.customjs?.modules||[]).map(t=>({id:t.metadata.id,name:t.metadata.name,enabled:t.enabled,started:t.started}))}}executeGetOnlineFriends(){const t=(window.$pinia?.friends?.friends||[]).filter(e=>e.location&&e.location!=="offline"&&e.location!=="private");return{success:!0,count:t.length,data:t.map(e=>({id:e.id,displayName:e.displayName,location:e.location,worldId:e.worldId}))}}async executeQueryDatabase(s){const{query:t,params:e=[]}=s;try{const n=window.SQLite;return n?{success:!0,data:await n.Execute(t,e)}:{success:!1,error:"SQLite not available"}}catch(n){return{success:!1,error:n instanceof Error?n.message:String(n)}}}sendIpcToOSC(s,t){try{const e=window.AppApi;return e?.SendIpc?(e.SendIpc(`OSC_${s}`,JSON.stringify(t)),!0):(this.logger.error("AppApi.SendIpc not available"),!1)}catch(e){const n=e instanceof Error?e.message:String(e);return this.logger.error(`Failed to send IPC: ${n}`),!1}}sendOSC(s,t){if(!this.settings.store.enabled)return this.logger.warn("OSC Bridge is disabled"),!1;const e={address:s,value:t,timestamp:Date.now()};if(!this.oscReady)return this.pendingMessages.push(e),this.logger.log(`OSC app not ready, message queued (${this.pendingMessages.length} pending)`),!1;const n=this.sendIpcToOSC("SEND",e);return n&&(this.stats.messagesSent++,this.stats.lastSent=Date.now(),this.settings.store.logOscParams&&this.logger.log(`OSC \u2192 VRChat: ${s} = ${JSON.stringify(t)}`)),n}sendChatBox(s,t=!0){const e=this.settings.store.chatboxPrefix||"",n=this.settings.store.chatboxSuffix||"",i=(e+s+n).substring(0,144);return this.sendOSC("/chatbox/input",[i,t,!1])}clearChatBox(){return this.sendOSC("/chatbox/input",["",!0,!1])}setAvatarParameter(s,t){return this.sendOSC(`/avatar/parameters/${s}`,t)}getStats(){return{oscReady:this.oscReady,messagesSent:this.stats.messagesSent,messagesReceived:this.stats.messagesReceived,errors:this.stats.errors,lastSent:this.stats.lastSent,lastReceived:this.stats.lastReceived,pendingMessages:this.pendingMessages.length}}};l(c,"OSCBridgePlugin");let r=c;window.customjs.__LAST_PLUGIN_CLASS__=r;})();
