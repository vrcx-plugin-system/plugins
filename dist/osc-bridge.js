(()=>{var h=Object.defineProperty;var g=(d,l)=>h(d,"name",{value:l,configurable:!0});const c=class c extends CustomModule{constructor(){super({name:"OSC Bridge \u{1F39B}\uFE0F",description:"Bridges VRCX with external OSC application for VRChat OSC communication",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Integration","OSC","VRChat"],required_dependencies:[]});this.pendingCommands=new Map;this.oscReady=!1,this.pendingMessages=[],this.stats={messagesSent:0,messagesReceived:0,errors:0,lastSent:null,lastReceived:null},this.actionButtons=[{title:"Test Connection",color:"primary",icon:"ri-signal-tower-line",description:"Send test ping to OSC application",callback:async()=>{this.sendChatBox("VRCX Plugin Test"),this.logger.showInfo("Test message sent to OSC app")}},{title:"Reset Stats",color:"warning",icon:"ri-refresh-line",description:"Reset statistics",callback:async()=>{this.stats.messagesSent=0,this.stats.messagesReceived=0,this.stats.errors=0,this.logger.showSuccess("Statistics reset")}}]}async load(){this.registerEvent("osc-param-changed",{description:"Fired when VRChat OSC parameter changes",payload:{path:'string - OSC parameter path (e.g., "/avatar/parameters/VRChatting")',type:"string - Value type (bool, int, float)",value:"any - Parameter value",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("osc-ready",{description:"Fired when OSC bridge is connected",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("osc-error",{description:"Fired when OSC error occurs",payload:{error:"string - Error message",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1}),this.registerEvent("command-received",{description:"Fired when VRCOSC sends a command to VRCX",payload:{command:"string - Command name",args:"any - Command arguments",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!0});const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({connection:{name:"\u{1F39B}\uFE0F Connection",description:"OSC connection settings"},chatbox:{name:"\u{1F4AC} ChatBox",description:"VRChat ChatBox integration (deprecated methods)"},variables:{name:"\u{1F4DD} Variables",description:"ChatBox variable storage (recommended)"},advanced:{name:"\u{1F39B}\uFE0F Advanced",description:"Advanced OSC settings"}}),this.settings=this.defineSettings({enabled:{type:e.BOOLEAN,description:"Enable OSC bridge",category:"connection",default:!0},autoReconnect:{type:e.BOOLEAN,description:"Auto-reconnect to OSC app if disconnected",category:"connection",default:!0},ipcMessageType:{type:e.STRING,description:"IPC message type for bulk events (Event7List=silent, VrcxMessage=verbose)",category:"advanced",default:"Event7List"},logOscParams:{type:e.BOOLEAN,description:"Log all OSC parameter changes to console",category:"advanced",default:!1},logCommands:{type:e.BOOLEAN,description:"Log VRCOSC commands to console",category:"advanced",default:!0},enableDirectChatBox:{type:e.BOOLEAN,description:"\u26A0\uFE0F Enable deprecated direct ChatBox methods (sendChatBox/clearChatBox). Use storeChatVariable() instead.",category:"chatbox",default:!1}}),this.setupIpcListener(),this.patchIpcLogging(),this.loaded=!0,this.logger.log("OSC Bridge plugin loaded")}async start(){this.oscReady=!1,this.pendingMessages=[],this.sendIpcToOSC("INIT",{timestamp:Date.now()}),this.logger.log("Waiting for VRCOSC to connect...")}async stop(){this.sendIpcToOSC("SHUTDOWN",{timestamp:Date.now()}),await super.stop(),this.logger.log("OSC Bridge stopped")}setupIpcListener(){this.onIpc(e=>{if(e.type?.startsWith("OSC_"))this.handleIpcMessage(e);else{const s=this.settings?.store?.ipcMessageType||"Event7List";e.type===s&&e.raw?.MsgType==="OSC_RECEIVED_BULK"&&this.handleIpcMessage({type:e.raw.MsgType,payload:JSON.parse(e.raw.Data)})}}),this.logger.log("IPC listener registered for OSC messages")}patchIpcLogging(){const e=console.log,s=this;console.log=function(...t){if(t.length>=2&&t[0]==="IPC:"&&typeof t[1]=="object"){const r=t[1],a=s.settings?.store?.ipcMessageType||"Event7List";if(r?.Type===a&&r?.MsgType==="OSC_RECEIVED_BULK"&&!s.settings?.store?.logOscParams)return}e.apply(console,t)},this.logger.log("IPC logging filter installed")}handleIpcMessage(e){try{switch(e.type){case"OSC_READY":this.oscReady=!0,this.logger.showSuccess("OSC application connected!"),this.emit("osc-ready",{timestamp:Date.now()}),this.pendingMessages.length>0&&(this.logger.log(`Sending ${this.pendingMessages.length} pending messages`),this.pendingMessages.forEach(r=>this.sendIpcToOSC("SEND",r)),this.pendingMessages=[]);break;case"OSC_RECEIVED":this.settings.store.logOscParams&&this.logger.log(`OSC \u2190 VRChat: ${e.payload.address} = ${JSON.stringify(e.payload.value)} (${e.payload.type})`),this.emit("osc-param-changed",{path:e.payload.address,type:e.payload.type,value:e.payload.value,timestamp:Date.now()});break;case"OSC_RECEIVED_BULK":const s=e.payload.events;if(Array.isArray(s)){this.settings.store.logOscParams&&this.logger.log(`OSC \u2190 VRChat: Received ${s.length} bulk events`);for(const r of s)this.settings.store.logOscParams&&this.logger.log(`  ${r.Address} = ${JSON.stringify(r.Value)} (${r.Type})`),this.emit("osc-param-changed",{path:r.Address,type:r.Type,value:r.Value,timestamp:r.Timestamp||Date.now()});this.stats.messagesReceived+=s.length,this.stats.lastReceived=Date.now()}break;case"OSC_COMMAND":this.settings.store.logCommands&&this.logger.log(`Command \u2190 VRCOSC: ${e.payload.command}`),this.handleCommand(e.payload);break;case"OSC_RESPONSE":const t=e.payload.requestId;if(t&&this.pendingCommands.has(t)){const r=this.pendingCommands.get(t);clearTimeout(r.timeout),r.resolve(e.payload.result),this.pendingCommands.delete(t)}break;case"OSC_ERROR":this.logger.error(`OSC Error: ${e.payload.error}`),this.emit("osc-error",{error:e.payload.error,timestamp:Date.now()});break;case"OSC_DISCONNECTED":this.oscReady=!1,this.logger.showWarning("OSC application disconnected"),this.settings.store.autoReconnect&&setTimeout(()=>{this.sendIpcToOSC("INIT",{timestamp:Date.now()})},5e3);break;default:this.logger.warn(`Unknown OSC IPC message: ${e.type}`)}}catch(s){const t=s instanceof Error?s.message:String(s);this.logger.error(`Error handling IPC message: ${t}`)}}async handleCommand(e){const{command:s,args:t,requestId:r}=e;let a={success:!1,error:"Unknown command"};try{switch(this.logger.log(`Command from VRCOSC: ${s}`,t),this.emit("command-received",{command:s,args:t,timestamp:Date.now()}),s){case"SEND_INVITE":a=await this.executeVRChatInvite(t);break;case"SEND_FRIEND_REQUEST":a=await this.executeVRChatFriendRequest(t);break;case"GET_USER_INFO":a=await this.executeGetUserInfo(t);break;case"GET_WORLD_INFO":a=await this.executeGetWorldInfo(t);break;case"GET_CURRENT_LOCATION":a=this.executeGetCurrentLocation();break;case"GET_FRIENDS_LIST":a=this.executeGetFriendsList(t);break;case"SHOW_NOTIFICATION":a=this.executeShowNotification(t);break;case"SHOW_TOAST":a=this.executeShowToast(t);break;case"OPEN_USER_DIALOG":a=this.executeOpenUserDialog(t);break;case"OPEN_WORLD_DIALOG":a=this.executeOpenWorldDialog(t);break;case"GET_PLUGIN_LIST":a=this.executeGetPluginList();break;case"GET_ONLINE_FRIENDS":a=this.executeGetOnlineFriends();break;case"QUERY_DATABASE":a=await this.executeQueryDatabase(t);break;default:a={success:!1,error:`Unknown command: ${s}`}}}catch(n){const o=n instanceof Error?n.message:String(n);a={success:!1,error:o},this.logger.error(`Command execution failed: ${o}`)}r&&this.sendIpcToOSC("RESPONSE",{requestId:r,result:a})}async executeVRChatInvite(e){const{userId:s,instanceId:t,worldId:r,worldName:a,message:n}=e,o={instanceId:t,worldId:r,worldName:a};return n&&(o.message=n),await window.request.notificationRequest.sendInvite(o,s),{success:!0,message:`Invite sent to ${s}`}}async executeVRChatFriendRequest(e){const{userId:s}=e;return await window.request.friendRequest.sendFriendRequest(s),{success:!0,message:`Friend request sent to ${s}`}}async executeGetUserInfo(e){const{userId:s}=e;return{success:!0,data:await window.request.apiRequest.getUser(s)}}async executeGetWorldInfo(e){const{worldId:s}=e;return{success:!0,data:await window.request.apiRequest.getWorld(s)}}executeGetCurrentLocation(){const e=window.$pinia?.user?.currentUser;return{success:!0,data:{userId:e?.id,displayName:e?.displayName,location:e?.location,worldId:window.$pinia?.location?.worldId,instanceId:window.$pinia?.location?.instanceId}}}executeGetFriendsList(e){const{onlineOnly:s=!1}=e||{},t=window.$pinia?.friends?.friends||[];return{success:!0,data:(s?t.filter(a=>a.location&&a.location!=="offline"&&a.location!=="private"):t).map(a=>({id:a.id,displayName:a.displayName,location:a.location,status:a.status,statusDescription:a.statusDescription}))}}executeShowNotification(e){const{title:s,message:t,type:r="info"}=e,a=window.AppApi;return a?.DesktopNotification&&a.DesktopNotification(s,t),{success:!0}}executeShowToast(e){const{message:s,type:t="info"}=e;switch(t){case"success":this.logger.showSuccess(s);break;case"warning":this.logger.showWarning(s);break;case"error":this.logger.showError(s);break;default:this.logger.showInfo(s);break}return{success:!0}}executeOpenUserDialog(e){const{userId:s}=e,t=window.$pinia?.user;return t?.showUserDialog?(t.showUserDialog(s),{success:!0}):{success:!1,error:"User dialog not available"}}executeOpenWorldDialog(e){const{worldId:s}=e,t=window.$pinia?.world;return t?.showWorldDialog?(t.showWorldDialog(s),{success:!0}):{success:!1,error:"World dialog not available"}}executeGetPluginList(){return{success:!0,data:(window.customjs?.modules||[]).map(s=>({id:s.metadata.id,name:s.metadata.name,enabled:s.enabled,started:s.started}))}}executeGetOnlineFriends(){const s=(window.$pinia?.friends?.friends||[]).filter(t=>t.location&&t.location!=="offline"&&t.location!=="private");return{success:!0,count:s.length,data:s.map(t=>({id:t.id,displayName:t.displayName,location:t.location,worldId:t.worldId}))}}async executeQueryDatabase(e){const{query:s,params:t=[]}=e;try{const r=window.SQLite;return r?{success:!0,data:await r.Execute(s,t)}:{success:!1,error:"SQLite not available"}}catch(r){return{success:!1,error:r instanceof Error?r.message:String(r)}}}sendIpcToOSC(e,s){try{const t=window.AppApi;return t?.SendIpc?(t.SendIpc(`OSC_${e}`,JSON.stringify(s)),!0):(this.logger.error("AppApi.SendIpc not available"),!1)}catch(t){const r=t instanceof Error?t.message:String(t);return this.logger.error(`Failed to send IPC: ${r}`),!1}}sendOSC(e,s){if(!this.settings.store.enabled)return this.logger.warn("OSC Bridge is disabled"),!1;const t={address:e,value:s,timestamp:Date.now()};if(!this.oscReady)return this.pendingMessages.push(t),this.logger.log(`OSC app not ready, message queued (${this.pendingMessages.length} pending)`),!1;const r=this.sendIpcToOSC("SEND",t);return r&&(this.stats.messagesSent++,this.stats.lastSent=Date.now(),this.settings.store.logOscParams&&this.logger.log(`OSC \u2192 VRChat: ${e} = ${JSON.stringify(s)}`)),r}sendChatBox(e,s=!0){if(!this.settings.store.enableDirectChatBox)return this.logger.showWarning("Direct ChatBox methods are disabled. Use storeChatVariable() or enable in settings."),this.logger.warn("\u26A0\uFE0F sendChatBox() is deprecated. Use storeChatVariable() + ChatBox timeline for proper integration."),!1;this.logger.warn("\u26A0\uFE0F Using deprecated sendChatBox(). Consider using storeChatVariable() + ChatBox timeline instead.");const t=this.settings.store.chatboxPrefix||"",r=this.settings.store.chatboxSuffix||"",n=(t+e+r).substring(0,144);return this.sendOSC("/chatbox/input",[n,s,!1])}clearChatBox(){return this.settings.store.enableDirectChatBox?(this.logger.warn("\u26A0\uFE0F Using deprecated clearChatBox(). Consider using storeChatVariable('', '') instead."),this.sendOSC("/chatbox/input",["",!0,!1])):(this.logger.showWarning("Direct ChatBox methods are disabled. Use storeChatVariable('', '') or enable in settings."),this.logger.warn("\u26A0\uFE0F clearChatBox() is deprecated. Use storeChatVariable() + ChatBox timeline instead."),!1)}setAvatarParameter(e,s){return this.sendOSC(`/avatar/parameters/${e}`,s)}getStats(){return{oscReady:this.oscReady,messagesSent:this.stats.messagesSent,messagesReceived:this.stats.messagesReceived,errors:this.stats.errors,lastSent:this.stats.lastSent,lastReceived:this.stats.lastReceived,pendingMessages:this.pendingMessages.length}}async fetchChatVariable(e){if(!this.oscReady)return this.logger.warn("OSC app not ready"),null;try{const s=this.generateRequestId(),t=await this.sendCommandToOSC("GET_VARIABLE",{name:e},s);return t?.success?t.value:(this.logger.warn(`Variable '${e}' not found: ${t?.error||"Unknown error"}`),null)}catch(s){const t=s instanceof Error?s.message:String(s);return this.logger.error(`Failed to fetch variable '${e}': ${t}`),null}}async storeChatVariable(e,s){if(!this.oscReady)return this.logger.warn("OSC app not ready - variable will be queued"),!1;try{const t=this.generateRequestId(),r=await this.sendCommandToOSC("SET_VARIABLE",{name:e,value:s},t);return r?.success?(this.settings.store.logCommands&&this.logger.log(`\u2713 ChatBox variable 'vrcx_${e}' stored: ${JSON.stringify(s)}`),!0):(this.logger.error(`Failed to store variable '${e}': ${r?.error||"Unknown error"}`),!1)}catch(t){const r=t instanceof Error?t.message:String(t);return this.logger.error(`Failed to store variable '${e}': ${r}`),!1}}async getChatVariables(){if(!this.oscReady)return this.logger.warn("OSC app not ready"),null;try{const e=this.generateRequestId(),s=await this.sendCommandToOSC("GET_VARIABLES",{},e);return s?.success?s.variables||[]:(this.logger.error(`Failed to get variables: ${s?.error||"Unknown error"}`),null)}catch(e){const s=e instanceof Error?e.message:String(e);return this.logger.error(`Failed to get variables: ${s}`),null}}async setChatState(e,s){if(!this.oscReady)return this.logger.warn("OSC app not ready"),!1;try{const t=this.generateRequestId(),r=await this.sendCommandToOSC("SET_STATE",{name:e,displayName:s},t);return r?.success?(this.settings.store.logCommands&&this.logger.log(`\u2713 Changed to state 'vrcx_${e}'`),!0):(this.logger.error(`Failed to set state '${e}': ${r?.error||"Unknown error"}`),!1)}catch(t){const r=t instanceof Error?t.message:String(t);return this.logger.error(`Failed to set state '${e}': ${r}`),!1}}async triggerChatEvent(e,s){if(!this.oscReady)return this.logger.warn("OSC app not ready"),!1;try{const t=this.generateRequestId(),r=await this.sendCommandToOSC("TRIGGER_EVENT",{name:e,displayName:s},t);return r?.success?(this.settings.store.logCommands&&this.logger.log(`\u2713 Triggered event 'vrcx_${e}'`),!0):(this.logger.error(`Failed to trigger event '${e}': ${r?.error||"Unknown error"}`),!1)}catch(t){const r=t instanceof Error?t.message:String(t);return this.logger.error(`Failed to trigger event '${e}': ${r}`),!1}}async getChatStates(){if(!this.oscReady)return this.logger.warn("OSC app not ready"),null;try{const e=this.generateRequestId(),s=await this.sendCommandToOSC("GET_STATES",{},e);return s?.success?s.states||[]:(this.logger.error(`Failed to get states: ${s?.error||"Unknown error"}`),null)}catch(e){const s=e instanceof Error?e.message:String(e);return this.logger.error(`Failed to get states: ${s}`),null}}async getChatEvents(){if(!this.oscReady)return this.logger.warn("OSC app not ready"),null;try{const e=this.generateRequestId(),s=await this.sendCommandToOSC("GET_EVENTS",{},e);return s?.success?s.events||[]:(this.logger.error(`Failed to get events: ${s?.error||"Unknown error"}`),null)}catch(e){const s=e instanceof Error?e.message:String(e);return this.logger.error(`Failed to get events: ${s}`),null}}generateRequestId(){return`req_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async sendCommandToOSC(e,s,t){return new Promise((r,a)=>{const n=setTimeout(()=>{this.pendingCommands.delete(t),a(new Error("Command timeout"))},5e3);this.pendingCommands.set(t,{resolve:r,reject:a,timeout:n}),this.sendIpcToOSC("COMMAND",{command:e,args:s,requestId:t})})}};g(c,"OSCBridgePlugin");let i=c;window.customjs.__LAST_PLUGIN_CLASS__=i;})();
