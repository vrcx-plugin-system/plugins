(()=>{var d=Object.defineProperty;var a=(r,t)=>d(r,"name",{value:t,configurable:!0});const o=class o extends Plugin{constructor(){super({name:"\u{1F4C4} Template Plugin",description:"Example plugin demonstrating all available features and lifecycle events",authors:[{name:"Bluscream"}],build:"1760846455",dependencies:[]}),this.counter=0,this.timerInterval=null,this.exampleData={startTime:null,loginTime:null,eventsReceived:0},this.logger.log("\u{1F528} Constructor called - Plugin instance created")}async load(){this.logger.log("\u{1F4E6} load() called - Setting up plugin...");const t=this.get("quick.value","default");this.logger.log(`Quick setting: ${t}`);const e=window.customjs.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F4C4} General Settings",description:"Basic plugin configuration"},advanced:{name:"\u{1F4C4} Advanced Options",description:"Advanced configuration for power users"}}),this.settings=this.defineSettings({updateInterval:{type:e.NUMBER,description:"How often to update in milliseconds",category:"general",default:6e4},username:{type:e.STRING,description:"Your username",category:"general",placeholder:"Enter username...",default:"Guest"},showDesktop:{type:e.BOOLEAN,description:"Show desktop notifications",category:"general",default:!1},soundEnabled:{type:e.BOOLEAN,description:"Play sound for notifications",category:"advanced",default:!0},volume:{type:e.SLIDER,description:"Notification volume",category:"advanced",default:.5,markers:[0,.25,.5,.75,1]},mode:{type:e.SELECT,description:"Operating mode",options:[{label:"Auto",value:"auto",default:!0},{label:"Manual",value:"manual"},{label:"Advanced",value:"advanced"}]},message:{type:e.STRING,description:"Custom message template with variables",placeholder:"Hello {userName}!",default:"Welcome {userName}!",variables:{"{userName}":"User's display name","{userId}":"User's ID","{now}":"Current date/time","{count}":"Timer count"}},totalRuns:{type:e.NUMBER,description:"Total times plugin ran (hidden stat)",default:0,hidden:!0},lastRunTime:{type:e.NUMBER,description:"Last run timestamp (hidden stat)",default:0,hidden:!0}}),this.logger.log(`\u2699\uFE0F Update interval: ${this.settings.store.updateInterval}ms`),this.logger.log(`\u2699\uFE0F Username: ${this.settings.store.username}`),this.logger.log(`\u2699\uFE0F Volume: ${this.settings.store.volume}`),this.logger.log(`\u2699\uFE0F Mode: ${this.settings.store.mode}`),this.logger.log(`\u2699\uFE0F Message: ${this.settings.store.message}`),this.logger.log(`\u2699\uFE0F Total runs (hidden): ${this.settings.store.totalRuns}`);const s=this.get("adhoc.setting","default");this.logger.log(`Ad-hoc setting: ${s}`),this.on("example-event",i=>{this.logger.log("\u{1F4E8} Received example-event:",i),this.exampleData.eventsReceived++}),this.loaded=!0,this.logger.log("\u2705 load() complete - Plugin ready for start()")}async start(){this.logger.log("\u25B6\uFE0F start() called - Starting plugin operations..."),this.utils=window.customjs.utils,this.contextMenuApi=await window.customjs.pluginManager.waitForPlugin("context-menu-api"),this.navMenuApi=await window.customjs.pluginManager.waitForPlugin("nav-menu-api"),this.exampleData.startTime=Date.now(),this.setupUI();const t=this.settings.store.updateInterval;this.timerInterval=this.registerTimer(setInterval(()=>{this.counter++,this.settings.store.totalRuns++,this.settings.store.lastRunTime=Date.now(),this.logger.log(`\u23F1\uFE0F Timer tick #${this.counter}`),this.emit("timer-tick",{count:this.counter,timestamp:Date.now()})},t));const e=new MutationObserver(s=>{this.logger.log(`\u{1F441}\uFE0F DOM mutation detected: ${s.length} changes`)});if(this.registerObserver(e),e.observe(document.body,{childList:!0,subtree:!0,attributes:!1}),this.utils){const s=this.utils.getTimestamp();this.logger.log(`\u{1F550} Current timestamp: ${s}`)}this.started=!0,this.logger.log("\u2705 start() complete - Plugin running")}async onLogin(t){this.logger.log(`\u{1F510} onLogin() called - User: ${t?.displayName||"Unknown"}`),this.exampleData.loginTime=Date.now();const e=t?.id,s=t?.displayName,i=t?.$trustLevel,g=t?.friends?.length||0;this.logger.log(`\u{1F464} User ID: ${e}`),this.logger.log(`\u{1F464} Display Name: ${s}`),this.logger.log(`\u{1F464} Trust Level: ${i}`),this.logger.log(`\u{1F464} Friends: ${g}`);const u=window.$pinia?.location?.lastLocation?.location;this.logger.log(`\u{1F4CD} Current location: ${u||"Unknown"}`);const l=window.$pinia?.friends;l&&this.logger.log(`\u{1F465} Online friends: ${l.onlineFriends?.length||0}`);const c=this.getConfig("steam.id","not-set");this.logger.log(`\u2699\uFE0F Steam ID from config: ${c}`),this.setConfig("template.lastLogin",Date.now()),this.settings.store.username=s||"Unknown",this.logger.log(`\u2699\uFE0F Updated username to: ${this.settings.store.username}`),this.logger.log("\u{1F4BE} Setting automatically saved to localStorage"),this.logger.log("\u2705 onLogin() complete")}async stop(){this.logger.log("\u23F9\uFE0F stop() called - Cleaning up..."),this.removeUI(),this.exampleData={startTime:null,loginTime:null,eventsReceived:0},await super.stop(),this.logger.log("\u2705 stop() complete - Plugin stopped")}setupUI(){this.logger.log("\u{1F3A8} Setting up UI..."),this.contextMenuApi&&(this.contextMenuApi.addUserItem("template-action",{text:"\u{1F527} Template Action",icon:"el-icon-star",onClick:e=>this.handleUserClick(e)}),this.logger.log("\u{1F4DD} Added context menu item")),this.navMenuApi&&(this.navMenuApi.addItem("template",{label:"Template",icon:"ri-file-code-line",content:this.createContent()}),this.logger.log("\u{1F4DD} Added navigation menu item"));const t=document.querySelector(".some-button-selector");t&&(this.registerListener(t,"click",()=>this.logger.log("\u{1F5B1}\uFE0F Button clicked!"),{once:!1}),this.logger.log("\u{1F518} Registered button click listener")),this.subscribe("USER",({currentUser:e})=>{this.logger.log(`\u{1F4CA} User store changed: ${e?.displayName}`)}),this.logger.log("\u{1F4CA} Subscribed to user store changes"),this.logger.log("\u2705 UI setup complete")}removeUI(){this.logger.log("\u{1F5D1}\uFE0F Removing UI..."),this.contextMenuApi&&this.contextMenuApi.removeUserItem("template-action"),this.navMenuApi&&this.navMenuApi.removeItem("template"),this.logger.log("\u2705 UI removed")}createContent(){const t=document.createElement("div");return t.style.padding="20px",t.innerHTML=`
      <h2>\u{1F527} Template Plugin</h2>
      <p>This is example content for the navigation tab.</p>
      <p><strong>Counter:</strong> <span id="template-counter">0</span></p>
      <p><strong>Events Received:</strong> <span id="template-events">0</span></p>
      <hr>
      <h3>\u2699\uFE0F Settings (Equicord-style)</h3>
      <p><strong>Update Interval:</strong> ${this.settings.store.updateInterval}ms</p>
      <p><strong>Username:</strong> ${this.settings.store.username}</p>
      <p><strong>Desktop Notifications:</strong> ${this.settings.store.showDesktop}</p>
      <p><strong>Sound Enabled:</strong> ${this.settings.store.soundEnabled}</p>
      <p><strong>Volume:</strong> ${this.settings.store.volume}</p>
      <p><strong>Mode:</strong> ${this.settings.store.mode}</p>
      <p><strong>Message:</strong> ${this.settings.store.message}</p>
      <hr>
      <h3>\u{1F4CA} Hidden Stats</h3>
      <p><strong>Total Runs:</strong> ${this.settings.store.totalRuns}</p>
      <p><strong>Last Run:</strong> ${new Date(this.settings.store.lastRunTime).toLocaleString()}</p>
      <hr>
      <button id="template-test-btn" class="el-button el-button--primary">
        \u{1F9EA} Test Button
      </button>
      <button id="template-emit-btn" class="el-button el-button--success">
        \u{1F4E1} Emit Event
      </button>
      <button id="template-save-btn" class="el-button el-button--info">
        \u{1F4BE} Save Settings
      </button>
    `,setTimeout(()=>{const e=t.querySelector("#template-test-btn");e&&this.registerListener(e,"click",()=>{this.logger.log("\u{1F9EA} Test button clicked!"),this.emit("button-clicked",{timestamp:Date.now()}),this.utils&&this.logger.showSuccess("Template plugin test button clicked!")});const s=t.querySelector("#template-emit-btn");s&&this.registerListener(s,"click",()=>{this.logger.log("\u{1F4E1} Emit button clicked - emitting example-event"),this.emit("example-event",{message:"Hello from template!",timestamp:Date.now()})});const i=t.querySelector("#template-save-btn");i&&this.registerListener(i,"click",async()=>{this.logger.log("\u{1F4BE} Settings are auto-saved!"),this.utils&&this.logger.showSuccess("All settings are automatically saved")})},0),t}handleUserClick(t){this.logger.log("\u{1F464} User context menu clicked:",t),this.utils&&this.logger.showInfo(`Template action for: ${t.displayName}`),this.emit("user-clicked",t)}doSomething(t){return this.logger.log(`\u{1F527} doSomething() called with: ${t}`),`Processed: ${t}`}getStats(){return{enabled:this.enabled,loaded:this.loaded,started:this.started,counter:this.counter,startTime:this.exampleData.startTime,loginTime:this.exampleData.loginTime,eventsReceived:this.exampleData.eventsReceived,uptime:this.exampleData.startTime?Date.now()-this.exampleData.startTime:0}}};a(o,"TemplatePlugin");let n=o;window.customjs.__LAST_PLUGIN_CLASS__=n;})();
