(()=>{var h=Object.defineProperty;var c=(m,t)=>h(m,"name",{value:t,configurable:!0});const u=class u extends Plugin{constructor(){super({name:"\u{1F4E8} Auto Invite Manager",description:"Automatic user invitation system with location tracking and custom messages",author:"Bluscream",build:"1728847200",tags:["Automation","Social"],dependencies:["https://github.com/vrcx-plugin-system/plugins/raw/refs/heads/main/dist/context-menu-api.js"]}),this.autoInviteUsers=new Map,this.lastInvitedTo=null,this.lastJoined=null,this.lastDestinationCheck=null,this.gameLogHookRetries=0}getActionButtons(){return[{label:"Clear All",color:"warning",icon:"ri-mail-forbid-line",title:"Clear all auto-invite users from the list",callback:async()=>{const t=this.autoInviteUsers.size;if(t===0){this.logger.showInfo("Auto Invite list is already empty");return}confirm(`Remove all ${t} user(s) from Auto Invite list?`)&&this.clearAllAutoInvites()}}]}async load(){const t=window.customjs.SettingType;this.settings=this.defineSettings({customInviteMessage:{type:t.STRING,description:"Message to send when inviting users automatically",placeholder:"Auto-invite from VRCX",default:"Auto-invite from VRCX",variables:{"{userId}":"Target user ID being invited","{userName}":"Target user display name","{userDisplayName}":"Target user display name","{worldName}":"Current world name","{worldId}":"Current world ID","{instanceId}":"Current instance ID","{myUserId}":"Your user ID","{myUserName}":"Your display name","{myDisplayName}":"Your display name","{now}":"Formatted date/time","{date}":"Current date","{time}":"Current time","{timestamp}":"Unix timestamp","{iso}":"ISO 8601 date/time"}}}),this.logger.log(`\u2699\uFE0F Custom invite message: "${this.settings.store.customInviteMessage}"`),this.logger.log("Auto Invite plugin ready"),this.loaded=!0}async start(){this.utils=window.customjs.utils,this.contextMenuApi=await window.customjs.pluginManager.waitForPlugin("context-menu-api"),this.setupLocationTracking(),this.setupLocationStoreMonitor(),this.setupUserButton(),this.enabled=!0,this.started=!0,this.logger.log("Auto Invite plugin started, location tracking active")}async onLogin(t){}async stop(){this.logger.log("Stopping Auto Invite plugin");const t=window.customjs?.pluginManager?.getPlugin("context-menu-api");t&&(t.removeUserItem("autoInvite"),t.removeUserItem("clearAutoInvite")),this.autoInviteUsers.clear(),this.lastInvitedTo=null,await super.stop()}setupLocationTracking(){this.setupLocationAPIHook(),this.setupGameLogHook(),this.logger.log("Location tracking setup complete")}setupGameLogHook(){window.$pinia?.gameLog||window.$pinia?.location?this.logger.log("Using location store monitoring for travel detection"):this.gameLogHookRetries<3?(this.gameLogHookRetries++,setTimeout(()=>{this.logger.log(`Retrying store access (attempt ${this.gameLogHookRetries}/3)...`),this.setupGameLogHook()},3e3)):this.logger.warn("Max retries reached, relying on location store polling")}setupLocationAPIHook(){!window.customjs?.functions?.["$app.setCurrentUserLocation"]&&window.$app?.setCurrentUserLocation&&(this.registerPostHook("$app.setCurrentUserLocation",(t,e)=>{const[s,o]=e;setTimeout(async()=>{await this.onCurrentUserLocationChanged(s,o)},1e3)}),this.logger.log("Hooked into setCurrentUserLocation"))}setupLocationStoreMonitor(){const t=this.registerTimer(setInterval(()=>{this.checkLocationStoreChanges()},1e3));this.logger.log("Location store monitor started")}checkLocationStoreChanges(){try{const t=window.$pinia?.location;if(!t)return;const e=t.lastLocation?.location,s=t.lastLocationDestination;e==="traveling"&&s&&s!==this.lastDestinationCheck&&(this.logger.log(`Location store traveling detected: ${s}`),this.lastDestinationCheck=s,this.onLocationDestinationDetected(s))}catch{}}setupUserButton(){try{return this.autoInviteItem&&this.clearAutoInviteItem?!0:this.contextMenuApi?(this.autoInviteItem=this.contextMenuApi.addUserItem("autoInvite",{text:"Auto Invite",icon:"el-icon-message",onClick:t=>this.toggleAutoInvite(t)}),this.clearAutoInviteItem=this.contextMenuApi.addUserItem("clearAutoInvite",{text:"Clear AutoInvite",icon:"el-icon-delete",onClick:()=>this.clearAllAutoInvites()}),this.logger.log("Auto Invite context menu buttons added"),!0):(this.logger.warn("Context Menu API not available"),!1)}catch(t){return this.logger.error("Error setting up Auto Invite buttons:",t),(!this.autoInviteItem||!this.clearAutoInviteItem)&&setTimeout(()=>this.setupUserButton(),2e3),!1}}async onLocationDestinationDetected(t){this.autoInviteUsers.size>0&&!this.utils.isEmpty(t)&&this.lastInvitedTo!==t&&await this.sendInvitesToUsers(t)}async onCurrentUserLocationChanged(t,e){if(this.logger.log(`Location change: ${t} (traveling to: ${e})`),t==="traveling")this.autoInviteUsers.size>0&&!this.utils.isEmpty(e)&&this.lastInvitedTo!==e&&await this.sendInvitesToUsers(e);else if(t&&t!=="offline"&&t!=="private"){this.lastJoined=t,this.logger.log(`User arrived at: ${t}`);const s=window.customjs?.plugins?.find(o=>o.metadata?.id==="registry-overrides");if(s?.triggerEvent){const n=t.includes("~public")||t.includes("~hidden")?"INSTANCE_SWITCH_PUBLIC":"INSTANCE_SWITCH_PRIVATE";s.triggerEvent(n)}}}async sendInvitesToUsers(t){if(this.autoInviteUsers.size===0)return;let e=t,s=t.split(":")[0],o="Unknown World";try{o=await window.$app.getWorldName(s)}catch(i){this.logger.warn(`Failed to get world name: ${i.message}`)}const n=Array.from(this.autoInviteUsers.values()).map(i=>i.displayName).join(", ");this.logger.log(`Inviting ${this.autoInviteUsers.size} user(s) to "${o}" (${e})`);try{const i=this.get("messages.customInviteMessage","Auto-invite from VRCX"),d=Array.from(this.autoInviteUsers.values()).map(a=>{let r=null;i&&(r=this.processInviteMessageTemplate(i,a,o,e)),!r&&this.settings.store.customInviteMessage&&(r=this.processInviteMessageTemplate(this.settings.store.customInviteMessage,a,o,e));const g={instanceId:e,worldId:s,worldName:o};return r&&(g.message=r),window.request.notificationRequest.sendInvite(g,a.id)});await Promise.all(d),this.lastInvitedTo=t,this.logger.log(`\u2713 Successfully sent invites to: ${n}`)}catch(i){this.logger.error(`Failed to send invites: ${i.message}`)}}processInviteMessageTemplate(t,e,s,o){const n=window.$pinia?.user?.currentUser,i=new Date;return t.replace("{userId}",e.id||"").replace("{userName}",e.displayName||"").replace("{userDisplayName}",e.displayName||"").replace("{worldName}",s||"").replace("{worldId}",o.split(":")[0]||"").replace("{instanceId}",o||"").replace("{myUserId}",n?.id||"").replace("{myUserName}",n?.displayName||"").replace("{myDisplayName}",n?.displayName||"").replace("{now}",this.utils?.formatDateTime?.()||i.toISOString()).replace("{date}",i.toLocaleDateString()).replace("{time}",i.toLocaleTimeString()).replace("{timestamp}",i.getTime().toString()).replace("{iso}",i.toISOString())}toggleAutoInvite(t){if(this.contextMenuApi){if(this.utils.isEmpty(t)){this.logger.showError("Invalid user");return}this.autoInviteUsers.has(t.id)?(this.autoInviteUsers.delete(t.id),this.logger.log(`Removed ${t.displayName} from Auto Invite list`),this.logger.showInfo(`Removed ${t.displayName} from Auto Invite list`)):(this.autoInviteUsers.set(t.id,t),this.logger.log(`Added ${t.displayName} to Auto Invite list`),this.logger.showSuccess(`Added ${t.displayName} to Auto Invite list`)),this.updateAutoInviteButtonText()}}updateAutoInviteButtonText(){if(this.contextMenuApi)if(this.autoInviteUsers.size===0)this.contextMenuApi.updateUserItem("autoInvite",{text:"Auto Invite",icon:"el-icon-message"});else if(this.autoInviteUsers.size===1){const t=Array.from(this.autoInviteUsers.values())[0];this.contextMenuApi.updateUserItem("autoInvite",{text:`Auto Invite: ${t.displayName}`,icon:"el-icon-message"})}else this.contextMenuApi.updateUserItem("autoInvite",{text:`Auto Invite (${this.autoInviteUsers.size} users)`,icon:"el-icon-message"})}clearAllAutoInvites(){if(this.autoInviteUsers.size===0){this.logger.showInfo("Auto Invite list is already empty");return}const t=this.autoInviteUsers.size;this.autoInviteUsers.clear(),this.lastInvitedTo=null,this.logger.log(`Cleared ${t} user(s) from Auto Invite list`),this.logger.showSuccess(`Cleared ${t} user(s) from Auto Invite list`),this.updateAutoInviteButtonText()}getAutoInviteUsers(){return this.autoInviteUsers}getAutoInviteUsersList(){return Array.from(this.autoInviteUsers.values())}addAutoInviteUser(t){!t||!t.id||(this.autoInviteUsers.set(t.id,t),this.logger.log(`Auto-invite user added: ${t?.displayName}`),this.updateAutoInviteButtonText())}removeAutoInviteUser(t){if(this.autoInviteUsers.has(t)){const e=this.autoInviteUsers.get(t);this.autoInviteUsers.delete(t),this.logger.log(`Auto-invite user removed: ${e?.displayName}`),this.updateAutoInviteButtonText()}}clearAutoInviteUsers(){this.clearAllAutoInvites()}getCustomInviteMessage(){return this.settings.store.customInviteMessage}async setCustomInviteMessage(t){this.settings.store.customInviteMessage=t||"Auto-invite from VRCX",t===null?this.logger.log("Custom invite message disabled"):this.logger.log(`Custom invite message updated: "${t}"`)}};c(u,"AutoInvitePlugin");let l=u;window.customjs.__LAST_PLUGIN_CLASS__=l;})();
