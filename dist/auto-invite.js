(()=>{var p=Object.defineProperty;var h=(I,e)=>p(I,"name",{value:e,configurable:!0});const m=class m extends CustomModule{constructor(){super({name:"Auto Invite \u{1F4E8}",description:"Automatic user invitation system with location tracking and custom messages",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Automation","Social"],required_dependencies:["context-menu-api"]}),this.autoInviteUsers=new Map,this.lastInvitedTo=null,this.lastJoined=null,this.lastDestinationCheck=null,this.gameLogHookRetries=0,this.actionButtons=[{title:"Clear All",color:"warning",icon:"ri-mail-forbid-line",description:"Clear all auto-invite users from the list",callback:async()=>{const e=this.autoInviteUsers.size;if(e===0){this.logger.showInfo("Auto Invite list is already empty");return}await this.showConfirmDialog("Clear Auto Invite List",`Remove all ${e} user(s) from Auto Invite list?`,"Remove All","Cancel")&&this.clearAllAutoInvites()}}]}async load(){this.registerEvent("user-added",{description:"Fired when a user is added to auto-invite list",payload:{userId:"string - User ID",displayName:"string - Display name",timestamp:"number - Unix timestamp"}}),this.registerEvent("user-removed",{description:"Fired when a user is removed from auto-invite list",payload:{userId:"string - User ID",timestamp:"number - Unix timestamp"}}),this.registerEvent("invite-sent",{description:"Fired when an invite is sent to a user",payload:{userId:"string - User ID",displayName:"string - Display name",worldId:"string - World ID",instanceId:"string - Instance ID",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!1});const e=window.customjs.types.SettingType;this.settings=this.defineSettings({useCustomInviteMessage:{type:e.BOOLEAN,description:"Use custom invite messages via invite-message-api (falls back to direct message if unavailable)",default:!0},customInviteMessage:{type:e.STRING,description:"Message to send when inviting users automatically",placeholder:"Auto-invite from VRCX",default:"Auto-invite from VRCX",variables:{"{userId}":"Target user ID being invited","{userName}":"Target user display name","{userDisplayName}":"Target user display name","{worldName}":"Current world name","{worldId}":"Current world ID","{instanceId}":"Current instance ID","{myUserId}":"Your user ID","{myUserName}":"Your display name","{myDisplayName}":"Your display name","{now}":"Formatted date/time","{date}":"Current date","{time}":"Current time","{timestamp}":"Unix timestamp","{iso}":"ISO 8601 date/time"}}}),this.logger.log(`\u2699\uFE0F Custom invite message: "${this.settings.store.customInviteMessage}"`),this.logger.log("Auto Invite plugin ready"),this.loaded=!0}async start(){this.utils=window.customjs.utils,this.contextMenuApi=await window.customjs.waitForModule("context-menu-api"),this.setupLocationTracking(),this.setupLocationStoreMonitor(),this.setupUserButton(),this.enabled=!0,this.started=!0,this.logger.log("Auto Invite plugin started, location tracking active")}async onLogin(e){}async stop(){this.logger.log("Stopping Auto Invite plugin");const e=window.customjs?.getModule("context-menu-api");e&&(e.removeUserItem("autoInvite"),e.removeUserItem("clearAutoInvite")),this.autoInviteUsers.clear(),this.lastInvitedTo=null,await super.stop()}setupLocationTracking(){this.setupLocationAPIHook(),this.setupGameLogHook(),this.logger.log("Location tracking setup complete")}setupGameLogHook(){window.$pinia?.gameLog||window.$pinia?.location?this.logger.log("Using location store monitoring for travel detection"):this.gameLogHookRetries<3?(this.gameLogHookRetries++,setTimeout(()=>{this.logger.log(`Retrying store access (attempt ${this.gameLogHookRetries}/3)...`),this.setupGameLogHook()},3e3)):this.logger.warn("Max retries reached, relying on location store polling")}setupLocationAPIHook(){!window.customjs?.functions?.["$app.setCurrentUserLocation"]&&window.$app?.setCurrentUserLocation&&(this.registerPostHook("$app.setCurrentUserLocation",(e,t)=>{const[i,s]=t;setTimeout(async()=>{await this.onCurrentUserLocationChanged(i,s)},1e3)}),this.logger.log("Hooked into setCurrentUserLocation"))}setupLocationStoreMonitor(){const e=this.registerTimer(setInterval(()=>{this.checkLocationStoreChanges()},1e3));this.logger.log("Location store monitor started")}checkLocationStoreChanges(){try{const e=window.$pinia?.location;if(!e)return;const t=e.lastLocation?.location,i=e.lastLocationDestination;t==="traveling"&&i&&i!==this.lastDestinationCheck&&(this.logger.log(`Location store traveling detected: ${i}`),this.lastDestinationCheck=i,this.onLocationDestinationDetected(i))}catch{}}setupUserButton(){try{return this.autoInviteItem&&this.clearAutoInviteItem?!0:this.contextMenuApi?(this.autoInviteItem=this.contextMenuApi.addUserItem("autoInvite",{text:"Auto Invite",icon:"ri-mail-send-line",pluginId:"auto-invite",onClick:e=>this.toggleAutoInvite(e)}),this.clearAutoInviteItem=this.contextMenuApi.addUserItem("clearAutoInvite",{text:"Clear AutoInvite",icon:"ri-delete-bin-line",pluginId:"auto-invite",onClick:()=>this.clearAllAutoInvites()}),this.logger.log("Auto Invite context menu buttons added"),!0):(this.logger.warn("Context Menu API not available"),!1)}catch(e){const t=e instanceof Error?e.message:String(e);return this.logger.error(`Error setting up Auto Invite buttons: ${t}`),(!this.autoInviteItem||!this.clearAutoInviteItem)&&setTimeout(()=>this.setupUserButton(),2e3),!1}}async onLocationDestinationDetected(e){this.autoInviteUsers.size>0&&!this.utils.isEmpty(e)&&this.lastInvitedTo!==e&&await this.sendInvitesToUsers(e)}async onCurrentUserLocationChanged(e,t){if(this.logger.log(`Location change: ${e} (traveling to: ${t})`),e==="traveling")this.autoInviteUsers.size>0&&!this.utils.isEmpty(t)&&this.lastInvitedTo!==t&&await this.sendInvitesToUsers(t);else if(e&&e!=="offline"&&e!=="private"){this.lastJoined=e,this.logger.log(`User arrived at: ${e}`);const i=window.customjs?.modules?.find(s=>s.metadata?.id==="registry-overrides");if(i?.triggerEvent){const n=e.includes("~public")||e.includes("~hidden")?"INSTANCE_SWITCH_PUBLIC":"INSTANCE_SWITCH_PRIVATE";i.triggerEvent(n)}}}async sendInvitesToUsers(e){if(this.autoInviteUsers.size===0)return;let t=e,i=e.split(":")[0],s="Unknown World";try{window.utils?.getWorldName&&(s=await window.utils.getWorldName(e)||s)}catch(o){this.logger.warn(`Failed to get world name: ${o.message}`)}const n=Array.from(this.autoInviteUsers.values()).map(o=>o.displayName).join(", ");this.logger.log(`Inviting ${this.autoInviteUsers.size} user(s) to "${s}" (${t})`);try{const o=this.get("messages.customInviteMessage","Auto-invite from VRCX"),u=this.settings.store.useCustomInviteMessage!==!1,g=window.customjs.getModule("invite-message-api"),v=Array.from(this.autoInviteUsers.values()).map(async a=>{if(a.location===e)return this.logger.log(`Skipping ${a.displayName} - already in target instance`),Promise.resolve();let r=null;o&&(r=this.processInviteMessageTemplate(o,a,s,t)),!r&&this.settings.store.customInviteMessage&&(r=this.processInviteMessageTemplate(this.settings.store.customInviteMessage,a,s,t)),await this.sendGroupInviteIfNeeded(a.id,a.displayName,e);const d={instanceId:t,worldId:i,worldName:s};if(u&&r&&g?.requestInviteMessage){this.logger.log(`Formatted Custom Invite message: ${r}`);try{const l=await g.requestInviteMessage(r);l&&l.message?(d.messageSlot=l.message.slot,this.logger.log(`Using invite message slot ${l.message.slot} for ${a.displayName}: "${r}"`)):this.logger.warn(`Invite message slot unavailable, sending invite without message to ${a.displayName}`)}catch(l){this.logger.warn(`Failed to use invite-message-api: ${l.message}, sending without message`)}}else r&&!g&&(d.message=r);return window.request.notificationRequest.sendInvite(d,a.id)});await Promise.all(v),this.lastInvitedTo=e,this.logger.log(`\u2713 Successfully sent invites to: ${n}`)}catch(o){this.logger.error(`Failed to send invites: ${o.message}`)}}async sendGroupInviteIfNeeded(e,t,i){const s=window.utils.parseLocation(i);if(!s.groupId||s.groupAccessType==="public")return!1;try{const n=await window.request.groupRequest.getGroups({userId:e});if(n?.json&&n.json.some(u=>u.id===s.groupId))return!1;try{return await window.request.groupRequest.sendGroupInvite({groupId:s.groupId,userId:e}),this.logger.log(`\u2713 Sent group invite for ${s.groupId} to ${t}`),!0}catch{return!1}}catch{return!1}}processInviteMessageTemplate(e,t,i,s){const n=window.$pinia?.user?.currentUser,o=new Date;return e.replace("{userId}",t.id||"").replace("{userName}",t.displayName||"").replace("{userDisplayName}",t.displayName||"").replace("{worldName}",i||"").replace("{worldId}",s.split(":")[0]||"").replace("{instanceId}",s||"").replace("{myUserId}",n?.id||"").replace("{myUserName}",n?.displayName||"").replace("{myDisplayName}",n?.displayName||"").replace("{now}",this.utils?.formatDateTime?.()||o.toISOString()).replace("{date}",o.toLocaleDateString()).replace("{time}",o.toLocaleTimeString()).replace("{timestamp}",o.getTime().toString()).replace("{iso}",o.toISOString())}toggleAutoInvite(e){if(this.contextMenuApi){if(this.utils.isEmpty(e)){this.logger.showError("Invalid user");return}this.autoInviteUsers.has(e.id)?(this.autoInviteUsers.delete(e.id),this.logger.log(`Removed ${e.displayName} from Auto Invite list`),this.logger.showInfo(`Removed ${e.displayName} from Auto Invite list`)):(this.autoInviteUsers.set(e.id,e),this.logger.log(`Added ${e.displayName} to Auto Invite list`),this.logger.showSuccess(`Added ${e.displayName} to Auto Invite list`)),this.updateAutoInviteButtonText()}}updateAutoInviteButtonText(){if(this.contextMenuApi)if(this.autoInviteUsers.size===0)this.contextMenuApi.updateUserItem("autoInvite",{text:"Auto Invite",icon:"el-icon-message"});else if(this.autoInviteUsers.size===1){const e=Array.from(this.autoInviteUsers.values())[0];this.contextMenuApi.updateUserItem("autoInvite",{text:`Auto Invite: ${e.displayName}`,icon:"el-icon-message"})}else this.contextMenuApi.updateUserItem("autoInvite",{text:`Auto Invite (${this.autoInviteUsers.size} users)`,icon:"el-icon-message"})}clearAllAutoInvites(){if(this.autoInviteUsers.size===0){this.logger.showInfo("Auto Invite list is already empty");return}const e=this.autoInviteUsers.size;this.autoInviteUsers.clear(),this.lastInvitedTo=null,this.logger.log(`Cleared ${e} user(s) from Auto Invite list`),this.logger.showSuccess(`Cleared ${e} user(s) from Auto Invite list`),this.updateAutoInviteButtonText()}getAutoInviteUsers(){return this.autoInviteUsers}getAutoInviteUsersList(){return Array.from(this.autoInviteUsers.values())}addAutoInviteUser(e){!e||!e.id||(this.autoInviteUsers.set(e.id,e),this.logger.log(`Auto-invite user added: ${e?.displayName}`),this.updateAutoInviteButtonText())}removeAutoInviteUser(e){if(this.autoInviteUsers.has(e)){const t=this.autoInviteUsers.get(e);this.autoInviteUsers.delete(e),this.logger.log(`Auto-invite user removed: ${t?.displayName}`),this.updateAutoInviteButtonText()}}clearAutoInviteUsers(){this.clearAllAutoInvites()}getCustomInviteMessage(){return this.settings.store.customInviteMessage}async setCustomInviteMessage(e){this.settings.store.customInviteMessage=e||"Auto-invite from VRCX",e===null?this.logger.log("Custom invite message disabled"):this.logger.log(`Custom invite message updated: "${e}"`)}};h(m,"AutoInvitePlugin");let c=m;window.customjs.__LAST_PLUGIN_CLASS__=c;})();
