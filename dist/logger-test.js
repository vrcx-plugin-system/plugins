(()=>{var M=Object.defineProperty;var y=(N,t)=>M(N,"name",{value:t,configurable:!0});const h=class h extends CustomModule{constructor(){super({name:"Logger Tester \u{1F9EA}",description:"Test different VRCX notification and logging methods",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["Debug","Utility"],dependencies:["nav-menu-api"]}),this.navMenuApi=null,this.testMessage="Test notification from Logger Tester"}async load(){this.logger.log("Logger Tester ready"),this.loaded=!0}async start(){if(this.navMenuApi=await window.customjs.waitForModule("nav-menu-api"),!this.navMenuApi){this.logger.error("Nav Menu API plugin not found");return}this.navMenuApi.addItem("logger-tester",{label:"Logger Test",icon:"ri-bug-line",content:()=>this.createTestInterface(),position:-1}),this.enabled=!0,this.started=!0}createTestInterface(){const t=document.createElement("div");t.style.cssText=`
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
    `;const c=document.createElement("h2");c.style.cssText="color: #e0e0e0; margin-bottom: 20px;",c.textContent="VRCX Logger & Notification Tester";const g=document.createElement("p");g.style.cssText="color: #b0b0b0; margin-bottom: 20px;",g.textContent="Test different notification methods available in VRCX. Enter a message and click the buttons to see which methods work.";const p=document.createElement("label");p.style.cssText="display: block; color: #e0e0e0; margin-bottom: 8px; font-weight: 500;",p.textContent="Test Message:";const s=document.createElement("textarea");s.className="el-textarea__inner",s.value=this.testMessage,s.rows=3,s.style.cssText=`
      width: 100%;
      padding: 10px;
      border: 1px solid #5a5a5a;
      border-radius: 4px;
      font-size: 14px;
      background: #1e1e1e;
      color: #e0e0e0;
      resize: vertical;
      margin-bottom: 20px;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    `,s.addEventListener("input",()=>{this.testMessage=s.value});const i=document.createElement("div");i.id="test-results",i.style.cssText=`
      background: #2a2a2a;
      border: 1px solid #404040;
      border-radius: 4px;
      padding: 15px;
      margin-top: 20px;
      max-height: 400px;
      overflow-y: auto;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      font-size: 12px;
      display: none;
    `;const f=y((e,n,r="")=>{const a=document.createElement("div");a.style.cssText=`
        padding: 4px 0;
        color: ${n?"#4caf50":"#f44336"};
      `,a.textContent=`${n?"\u2713":"\u2717"} ${e}${r?" - "+r:""}`,i.appendChild(a),i.style.display="block"},"logResult"),b=y(()=>{i.innerHTML="",i.style.display="none"},"clearResults"),$=[{title:"Element Plus (via globalProperties)",buttons:[{label:"$message.success()",color:"#67c23a",test:async()=>{const e=window.$app?.config?.globalProperties?.$message;if(e?.success)return e.success(this.testMessage),{success:!0};throw new Error("Not available")}},{label:"$message.warning()",color:"#e6a23c",test:async()=>{const e=window.$app?.config?.globalProperties?.$message;if(e?.warning)return e.warning(this.testMessage),{success:!0};throw new Error("Not available")}},{label:"$message.error()",color:"#f56c6c",test:async()=>{const e=window.$app?.config?.globalProperties?.$message;if(e?.error)return e.error(this.testMessage),{success:!0};throw new Error("Not available")}},{label:"$message.info()",color:"#409eff",test:async()=>{const e=window.$app?.config?.globalProperties?.$message;if(e?.info)return e.info(this.testMessage),{success:!0};throw new Error("Not available")}},{label:"$notify.success()",color:"#67c23a",test:async()=>{const e=window.$app?.config?.globalProperties?.$notify;if(e?.success)return e.success({title:"Logger Test",message:this.testMessage}),{success:!0};throw new Error("Not available")}},{label:"$notify.warning()",color:"#e6a23c",test:async()=>{const e=window.$app?.config?.globalProperties?.$notify;if(e?.warning)return e.warning({title:"Logger Test",message:this.testMessage}),{success:!0};throw new Error("Not available")}},{label:"$notify.error()",color:"#f56c6c",test:async()=>{const e=window.$app?.config?.globalProperties?.$notify;if(e?.error)return e.error({title:"Logger Test",message:this.testMessage}),{success:!0};throw new Error("Not available")}},{label:"$notify.info()",color:"#409eff",test:async()=>{const e=window.$app?.config?.globalProperties?.$notify;if(e?.info)return e.info({title:"Logger Test",message:this.testMessage}),{success:!0};throw new Error("Not available")}}]},{title:"AppApi Notifications",buttons:[{label:"Desktop Notification",color:"#9c27b0",test:async()=>{if(window.AppApi?.DesktopNotification)return await window.AppApi.DesktopNotification("Logger Test",this.testMessage),{success:!0,details:"Called (may not show in Electron build or if Windows notifications disabled)"};throw new Error("AppApi.DesktopNotification not available")}},{label:"Browser Notification API",color:"#673ab7",test:async()=>{if("Notification"in window){if(Notification.permission==="granted")return new Notification("Logger Test",{body:this.testMessage}),{success:!0,details:"Browser notification sent"};if(Notification.permission!=="denied"){if(await Notification.requestPermission()==="granted")return new Notification("Logger Test",{body:this.testMessage}),{success:!0,details:"Permission granted, notification sent"};throw new Error("Permission denied by user")}else throw new Error("Notification permission denied")}throw new Error("Browser Notification API not available")}},{label:"XSOverlay (VR)",color:"#ff9800",test:async()=>{if(window.AppApi?.XSNotification)return await window.AppApi.XSNotification("Logger Test",this.testMessage,3e3,1,""),{success:!0};throw new Error("AppApi.XSNotification not available")}},{label:"OVRToolkit (VR)",color:"#ff5722",test:async()=>{if(window.AppApi?.OVRTNotification)return await window.AppApi.OVRTNotification(!0,!0,"Logger Test",this.testMessage,3e3,1,null),{success:!0};throw new Error("AppApi.OVRTNotification not available")}}]},{title:"Pinia Notification Store (Direct)",buttons:[{label:"playNoty (GPS)",color:"#00bcd4",test:async()=>{if(window.$pinia?.notification?.playNoty)return window.$pinia.notification.playNoty({type:"GPS",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",location:"wrld_test:123456",worldName:"\u{1F9EA} Test World",time:0,isFriend:!0,isFavorite:!1}),{success:!0};throw new Error("$pinia.notification.playNoty not available")}},{label:"playNoty (Online)",color:"#4caf50",test:async()=>{if(window.$pinia?.notification?.playNoty)return window.$pinia.notification.playNoty({type:"Online",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",isFriend:!0,isFavorite:!1}),{success:!0};throw new Error("$pinia.notification.playNoty not available")}},{label:"playNoty (OnPlayerJoined)",color:"#8bc34a",test:async()=>{if(window.$pinia?.notification?.playNoty)return window.$pinia.notification.playNoty({type:"OnPlayerJoined",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",isFriend:!0,isFavorite:!1}),{success:!0};throw new Error("$pinia.notification.playNoty not available")}},{label:"queueGameLogNoty",color:"#ff9800",test:async()=>{if(window.$pinia?.notification?.queueGameLogNoty)return window.$pinia.notification.queueGameLogNoty({type:"Event",created_at:new Date().toJSON(),data:this.testMessage}),{success:!0};throw new Error("$pinia.notification.queueGameLogNoty not available")}},{label:"queueFeedNoty",color:"#03a9f4",test:async()=>{if(window.$pinia?.notification?.queueFeedNoty)return window.$pinia.notification.queueFeedNoty({type:"GPS",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",location:"wrld_test:12345",worldName:"\u{1F9EA} Test World",isFriend:!0,isFavorite:!1}),{success:!0};throw new Error("$pinia.notification.queueFeedNoty not available")}}]},{title:"Noty Library (VRCX Login Messages)",buttons:[{label:"Noty Success",color:"#67c23a",test:async()=>{if(typeof Noty<"u")return new Noty({type:"success",text:this.testMessage}).show(),{success:!0};throw new Error("Noty library not available")}},{label:"Noty Info",color:"#409eff",test:async()=>{if(typeof Noty<"u")return new Noty({type:"info",text:this.testMessage}).show(),{success:!0};throw new Error("Noty library not available")}},{label:"Noty Warning",color:"#e6a23c",test:async()=>{if(typeof Noty<"u")return new Noty({type:"warning",text:this.testMessage}).show(),{success:!0};throw new Error("Noty library not available")}},{label:"Noty Error",color:"#f56c6c",test:async()=>{if(typeof Noty<"u")return new Noty({type:"error",text:this.testMessage}).show(),{success:!0};throw new Error("Noty library not available")}},{label:"Noty Alert",color:"#ff9800",test:async()=>{if(typeof Noty<"u")return new Noty({type:"alert",text:this.testMessage}).show(),{success:!0};throw new Error("Noty library not available")}}]},{title:"Browser Native",buttons:[{label:"alert()",color:"#607d8b",test:async()=>(alert(this.testMessage),{success:!0,details:"Alert shown"})},{label:"confirm()",color:"#795548",test:async()=>({success:!0,details:confirm(this.testMessage+`

Click OK or Cancel`)?"User clicked OK":"User clicked Cancel"})}]},{title:"Console Logging",buttons:[{label:"logger.log()",color:"#888888",test:async()=>(this.logger.log(this.testMessage),{success:!0,details:"Check console"})},{label:"logger.warn()",color:"#e6a23c",test:async()=>(this.logger.warn(this.testMessage),{success:!0,details:"Check console"})},{label:"logger.error()",color:"#f56c6c",test:async()=>(this.logger.error(this.testMessage),{success:!0,details:"Check console"})}]}];t.appendChild(c),t.appendChild(g),t.appendChild(p),t.appendChild(s),$.forEach(e=>{const n=document.createElement("div");n.style.cssText="margin-bottom: 20px;";const r=document.createElement("h3");r.style.cssText=`
        color: #409eff;
        font-size: 16px;
        margin-bottom: 12px;
        padding-bottom: 8px;
        border-bottom: 2px solid #404040;
      `,r.textContent=e.title;const a=document.createElement("div");a.style.cssText=`
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
      `,e.buttons.forEach(l=>{const o=document.createElement("button");o.className="el-button el-button--small",o.style.cssText=`
          padding: 10px 15px;
          background: ${l.color};
          border: none;
          border-radius: 4px;
          color: white;
          cursor: pointer;
          font-size: 13px;
          font-weight: 500;
          transition: all 0.2s;
        `,o.textContent=l.label,o.addEventListener("click",async()=>{b();const v=new Date().toLocaleTimeString();f(`Testing: ${l.label}`,!0,v);try{const w=await l.test();f(l.label,!0,w.details||"Notification sent")}catch(w){f(l.label,!1,w.message)}}),o.addEventListener("mouseenter",()=>{o.style.opacity="0.8",o.style.transform="scale(1.02)"}),o.addEventListener("mouseleave",()=>{o.style.opacity="1",o.style.transform="scale(1)"}),a.appendChild(o)}),n.appendChild(r),n.appendChild(a),t.appendChild(n)});const u=document.createElement("div");u.style.cssText="margin-top: 30px;";const d=document.createElement("button");return d.className="el-button el-button--large el-button--primary",d.style.cssText=`
      width: 100%;
      padding: 15px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
    `,d.innerHTML='<i class="ri-play-circle-line"></i> Test All',d.addEventListener("click",async()=>{await this.runAllTests(f,b)}),u.appendChild(d),t.appendChild(u),t.appendChild(i),t}async runAllTests(t,c){c();const g=new Date().toLocaleTimeString();t("Starting all tests...",!0,g);const p=[{name:"\u{1F9EA} $message.success()",fn:async()=>{window.$app?.config?.globalProperties?.$message?.success(this.testMessage)}},{name:"\u{1F9EA} $message.warning()",fn:async()=>{window.$app?.config?.globalProperties?.$message?.warning(this.testMessage)}},{name:"\u{1F9EA} $message.error()",fn:async()=>{window.$app?.config?.globalProperties?.$message?.error(this.testMessage)}},{name:"\u{1F9EA} $message.info()",fn:async()=>{window.$app?.config?.globalProperties?.$message?.info(this.testMessage)}},{name:"\u{1F9EA} $notify.success()",fn:async()=>{window.$app?.config?.globalProperties?.$notify?.success({title:"Logger Test",message:this.testMessage})}},{name:"\u{1F9EA} $notify.warning()",fn:async()=>{window.$app?.config?.globalProperties?.$notify?.warning({title:"Logger Test",message:this.testMessage})}},{name:"\u{1F9EA} $notify.error()",fn:async()=>{window.$app?.config?.globalProperties?.$notify?.error({title:"Logger Test",message:this.testMessage})}},{name:"\u{1F9EA} $notify.info()",fn:async()=>{window.$app?.config?.globalProperties?.$notify?.info({title:"Logger Test",message:this.testMessage})}},{name:"\u{1F9EA} logger.showSuccess()",fn:async()=>{this.logger.showSuccess(this.testMessage)}},{name:"\u{1F9EA} logger.showInfo()",fn:async()=>{this.logger.showInfo(this.testMessage)}},{name:"\u{1F9EA} logger.showWarning()",fn:async()=>{this.logger.showWarning(this.testMessage)}},{name:"\u{1F9EA} logger.showError()",fn:async()=>{this.logger.showError(this.testMessage)}},{name:"\u{1F9EA} logger.notifySuccess()",fn:async()=>{this.logger.notifySuccess(this.testMessage)}},{name:"\u{1F9EA} logger.notifyInfo()",fn:async()=>{this.logger.notifyInfo(this.testMessage)}},{name:"\u{1F9EA} logger.notifyWarning()",fn:async()=>{this.logger.notifyWarning(this.testMessage)}},{name:"\u{1F9EA} logger.notifyError()",fn:async()=>{this.logger.notifyError(this.testMessage)}},{name:"\u{1F9EA} logger.notifyAll()",fn:async()=>{await this.logger.notifyAll(this.testMessage)}},{name:"\u{1F9EA} logger.addGameLog()",fn:async()=>{this.logger.addGameLog({type:"Event",created_at:new Date().toJSON(),data:this.testMessage})}},{name:"\u{1F9EA} $pinia.notification.playNoty (GPS)",fn:async()=>{if(window.$pinia?.notification?.playNoty)window.$pinia.notification.playNoty({type:"GPS",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",location:"wrld_test:123456",worldName:"\u{1F9EA} Test World",time:0,isFriend:!0,isFavorite:!1});else throw new Error("playNoty not available")}},{name:"\u{1F9EA} $pinia.notification.playNoty (Online)",fn:async()=>{if(window.$pinia?.notification?.playNoty)window.$pinia.notification.playNoty({type:"Online",created_at:new Date().toJSON(),displayName:"\u{1F9EA} Test User",userId:"usr_test",isFriend:!0,isFavorite:!1});else throw new Error("playNoty not available")}},{name:"\u{1F9EA} Noty Success",fn:async()=>{if(typeof Noty<"u")new Noty({type:"success",text:this.testMessage}).show();else throw new Error("Noty not available")}},{name:"\u{1F9EA} Noty Info",fn:async()=>{if(typeof Noty<"u")new Noty({type:"info",text:this.testMessage}).show();else throw new Error("Noty not available")}},{name:"\u{1F9EA} Noty Warning",fn:async()=>{if(typeof Noty<"u")new Noty({type:"warning",text:this.testMessage}).show();else throw new Error("Noty not available")}},{name:"\u{1F9EA} Noty Error",fn:async()=>{if(typeof Noty<"u")new Noty({type:"error",text:this.testMessage}).show();else throw new Error("Noty not available")}},{name:"\u{1F9EA} AppApi.DesktopNotification",fn:async()=>{if(window.AppApi?.DesktopNotification)await window.AppApi.DesktopNotification("Logger Test",this.testMessage);else throw new Error("Not available")}},{name:"\u{1F9EA} Browser Notification API",fn:async()=>{if("Notification"in window&&Notification.permission==="granted")new Notification("Logger Test",{body:this.testMessage});else throw new Error("Browser notifications not available or permission denied")}}];for(const s of p)try{await s.fn(),t(s.name,!0,"Sent")}catch(i){t(s.name,!1,i.message)}t("All tests complete!",!0,"")}async stop(){this.navMenuApi&&this.navMenuApi.removeItem("logger-tester"),await super.stop()}};y(h,"TestLoggerPlugin");let m=h;window.customjs.__LAST_PLUGIN_CLASS__=m;})();
