(()=>{var v=Object.create;var u=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var c=(o,e)=>u(o,"name",{value:e,configurable:!0});var p=(o,e,s,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of f(e))!w.call(o,r)&&r!==s&&u(o,r,{get:()=>e[r],enumerable:!(t=M(e,r))||t.enumerable});return o};var g=(o,e,s)=>(s=o!=null?v(m(o)):{},p(e||!o||!o.__esModule?u(s,"default",{value:o,enumerable:!0}):s,o));const d=class d extends CustomModule{constructor(){super({name:"\u2709\uFE0F Invite Message API",description:"API for managing and rotating custom invite messages with cooldown tracking",authors:[{name:"Bluscream"}],tags:["API","Social","Library"],dependencies:[]}),this.inviteStore=null,this.COOLDOWN_MS=60*60*1e3,this.MAX_MESSAGE_LENGTH=64}async load(){this.logger.log("Invite Message API ready"),this.loaded=!0}async start(){if(this.inviteStore=window.$pinia?.invite,!this.inviteStore){this.logger.error("Invite store not found in $pinia");return}this.enabled=!0,this.started=!0,this.logger.log("Invite Message API started")}async onLogin(e){}async stop(){this.logger.log("Stopping Invite Message API"),this.inviteStore=null,await super.stop()}async ensureDataLoadedForType(e){if(this.inviteStore)try{let s=!1;switch(e){case"message":s=!this.inviteStore.inviteMessageTable?.data?.length;break;case"response":s=!this.inviteStore.inviteResponseMessageTable?.data?.length;break;case"request":s=!this.inviteStore.inviteRequestMessageTable?.data?.length;break;case"requestResponse":s=!this.inviteStore.inviteRequestResponseMessageTable?.data?.length;break}s&&await this.refreshMessages(e)}catch(s){this.logger.error(`Failed to load ${e} data:`,s)}}async refreshMessages(e){if(!this.inviteStore?.refreshInviteMessageTableData){this.logger.error("refreshInviteMessageTableData not available");return}return new Promise((s,t)=>{try{this.inviteStore.refreshInviteMessageTableData(e),setTimeout(s,500)}catch(r){t(r)}})}getRemainingCooldownMinutes(e){if(!e||!e.updatedAt)return 0;const s=Date.now(),t=Date.parse(e.updatedAt),r=s-t,i=this.COOLDOWN_MS-r;return i<=0?0:Math.ceil(i/6e4)}getNextAvailableMessage(e){if(!e||!e.length)return null;for(const s of e)if(this.getRemainingCooldownMinutes(s)===0)return s;return e.reduce((s,t)=>{const r=this.getRemainingCooldownMinutes(s);return this.getRemainingCooldownMinutes(t)<r?t:s})}findExistingMessage(e,s){if(!e||!e.length)return null;for(const t of e)if(t.message===s)return t;return null}async requestInviteMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("message");const t=this.inviteStore.inviteMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite messages available. Please configure them in your VRChat profile settings."),null;const r=this.findExistingMessage(t,e);if(r)return this.logger.log(`Message slot ${r.slot} already has the requested text`),{message:r,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const i=this.getNextAvailableMessage(t);if(!i)return this.logger.error("No invite messages found"),null;const n=this.getRemainingCooldownMinutes(i);if(n>0&&!s)return this.logger.warn(`All message slots are on cooldown. Next available in ${n} minutes`),null;try{const a=window.customjs?.functions?.inviteMessagesRequest||window.$app?.API?.inviteMessages;if(a)await a.editInviteMessage({message:e},"message",i.slot);else{const{default:l}=await import("/src/api/inviteMessages.js");if(l)await l.editInviteMessage({message:e},"message",i.slot);else throw new Error("inviteMessagesRequest API not available")}return i.message=e,i.updatedAt=new Date().toISOString(),await this.refreshMessages("message"),this.logger.log(`Successfully edited invite message slot ${i.slot}: "${e}"`),{message:i,cooldown:0,ready:!0,success:!0}}catch(a){throw this.logger.error("Failed to edit invite message:",a),a}}async requestInviteResponseMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("response");const t=this.inviteStore.inviteResponseMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite response messages available. Please configure them in your VRChat profile settings."),null;const r=this.findExistingMessage(t,e);if(r)return this.logger.log(`Response message slot ${r.slot} already has the requested text`),{message:r,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const i=this.getNextAvailableMessage(t);if(!i)return this.logger.error("No invite response messages found"),null;const n=this.getRemainingCooldownMinutes(i);if(n>0&&!s)return this.logger.warn(`All response message slots are on cooldown. Next available in ${n} minutes`),null;try{const a=window.customjs?.functions?.inviteMessagesRequest||window.$app?.API?.inviteMessages;if(a)await a.editInviteMessage({message:e},"response",i.slot);else{const{default:l}=await import("/src/api/inviteMessages.js");if(l)await l.editInviteMessage({message:e},"response",i.slot);else throw new Error("inviteMessagesRequest API not available")}return i.message=e,i.updatedAt=new Date().toISOString(),await this.refreshMessages("response"),this.logger.log(`Successfully edited invite response message slot ${i.slot}: "${e}"`),{message:i,cooldown:0,ready:!0,success:!0}}catch(a){throw this.logger.error("Failed to edit invite response message:",a),a}}async requestInviteRequestMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("request");const t=this.inviteStore.inviteRequestMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite request messages available. Please configure them in your VRChat profile settings."),null;const r=this.findExistingMessage(t,e);if(r)return this.logger.log(`Request message slot ${r.slot} already has the requested text`),{message:r,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const i=this.getNextAvailableMessage(t);if(!i)return this.logger.error("No invite request messages found"),null;const n=this.getRemainingCooldownMinutes(i);if(n>0&&!s)return this.logger.warn(`All request message slots are on cooldown. Next available in ${n} minutes`),null;try{const a=window.customjs?.functions?.inviteMessagesRequest||window.$app?.API?.inviteMessages;if(a)await a.editInviteMessage({message:e},"request",i.slot);else{const{default:l}=await import("/src/api/inviteMessages.js");if(l)await l.editInviteMessage({message:e},"request",i.slot);else throw new Error("inviteMessagesRequest API not available")}return i.message=e,i.updatedAt=new Date().toISOString(),await this.refreshMessages("request"),this.logger.log(`Successfully edited invite request message slot ${i.slot}: "${e}"`),{message:i,cooldown:0,ready:!0,success:!0}}catch(a){throw this.logger.error("Failed to edit invite request message:",a),a}}async requestInviteRequestResponseMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("requestResponse");const t=this.inviteStore.inviteRequestResponseMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite request response messages available. Please configure them in your VRChat profile settings."),null;const r=this.findExistingMessage(t,e);if(r)return this.logger.log(`Request response message slot ${r.slot} already has the requested text`),{message:r,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const i=this.getNextAvailableMessage(t);if(!i)return this.logger.error("No invite request response messages found"),null;const n=this.getRemainingCooldownMinutes(i);if(n>0&&!s)return this.logger.warn(`All request response message slots are on cooldown. Next available in ${n} minutes`),null;try{const a=window.customjs?.functions?.inviteMessagesRequest||window.$app?.API?.inviteMessages;if(a)await a.editInviteMessage({message:e},"requestResponse",i.slot);else{const{default:l}=await import("/src/api/inviteMessages.js");if(l)await l.editInviteMessage({message:e},"requestResponse",i.slot);else throw new Error("inviteMessagesRequest API not available")}return i.message=e,i.updatedAt=new Date().toISOString(),await this.refreshMessages("requestResponse"),this.logger.log(`Successfully edited invite request response message slot ${i.slot}: "${e}"`),{message:i,cooldown:0,ready:!0,success:!0}}catch(a){throw this.logger.error("Failed to edit invite request response message:",a),a}}getMessagesWithCooldown(e){if(!this.inviteStore)return[];let s;switch(e){case"message":s=this.inviteStore.inviteMessageTable?.data||[];break;case"response":s=this.inviteStore.inviteResponseMessageTable?.data||[];break;case"request":s=this.inviteStore.inviteRequestMessageTable?.data||[];break;case"requestResponse":s=this.inviteStore.inviteRequestResponseMessageTable?.data||[];break;default:return[]}return s.map(t=>({...t,cooldownMinutes:this.getRemainingCooldownMinutes(t),ready:this.getRemainingCooldownMinutes(t)===0}))}getStats(){const e={message:{total:0,ready:0,onCooldown:0},response:{total:0,ready:0,onCooldown:0},request:{total:0,ready:0,onCooldown:0},requestResponse:{total:0,ready:0,onCooldown:0}};return["message","response","request","requestResponse"].forEach(s=>{const t=this.getMessagesWithCooldown(s);e[s].total=t.length,e[s].ready=t.filter(r=>r.ready).length,e[s].onCooldown=t.filter(r=>!r.ready).length}),e}};c(d,"InviteMessageApiPlugin");let h=d;window.customjs.__LAST_PLUGIN_CLASS__=h;})();
