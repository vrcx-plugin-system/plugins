(()=>{var d=Object.defineProperty;var u=(h,e)=>d(h,"name",{value:e,configurable:!0});const g=class g extends CustomModule{constructor(){super({name:"Invite Message API \u2709\uFE0F",description:"API for managing and rotating custom invite messages with cooldown tracking",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["API","Social","Library"],required_dependencies:[]}),this.inviteStore=null,this.COOLDOWN_MS=60*60*1e3,this.MAX_MESSAGE_LENGTH=64}async load(){this.logger.log("Invite Message API ready"),this.loaded=!0}async start(){if(this.inviteStore=window.$pinia?.invite,!this.inviteStore){this.logger.error("Invite store not found in $pinia");return}this.enabled=!0,this.started=!0,this.logger.log("Invite Message API started")}async onLogin(e){}async stop(){this.logger.log("Stopping Invite Message API"),this.inviteStore=null,await super.stop()}async ensureDataLoadedForType(e){if(this.inviteStore)try{let s=!1;switch(e){case"message":s=!this.inviteStore.inviteMessageTable?.data?.length;break;case"response":s=!this.inviteStore.inviteResponseMessageTable?.data?.length;break;case"request":s=!this.inviteStore.inviteRequestMessageTable?.data?.length;break;case"requestResponse":s=!this.inviteStore.inviteRequestResponseMessageTable?.data?.length;break}s&&await this.refreshMessages(e)}catch(s){const t=s instanceof Error?s.message:String(s);this.logger.error(`Failed to load ${e} data: ${t}`)}}async refreshMessages(e){if(!this.inviteStore?.refreshInviteMessageTableData){this.logger.error("refreshInviteMessageTableData not available");return}return new Promise((s,t)=>{try{this.inviteStore.refreshInviteMessageTableData(e),setTimeout(s,500)}catch(o){t(o)}})}getRemainingCooldownMinutes(e){if(!e||!e.updatedAt)return 0;const s=Date.now(),t=Date.parse(e.updatedAt),o=s-t,r=this.COOLDOWN_MS-o;return r<=0?0:Math.ceil(r/6e4)}getNextAvailableMessage(e){if(!e||!e.length)return null;for(const s of e)if(this.getRemainingCooldownMinutes(s)===0)return s;return e.reduce((s,t)=>{const o=this.getRemainingCooldownMinutes(s);return this.getRemainingCooldownMinutes(t)<o?t:s})}findExistingMessage(e,s){if(!e||!e.length)return null;for(const t of e)if(t.message===s)return t;return null}async requestInviteMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("message");const t=this.inviteStore.inviteMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite messages available. Please configure them in your VRChat profile settings."),null;const o=this.findExistingMessage(t,e);if(o)return this.logger.log(`Message slot ${o.slot} already has the requested text`),{message:o,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const r=this.getNextAvailableMessage(t);if(!r)return this.logger.error("No invite messages found"),null;const a=this.getRemainingCooldownMinutes(r);if(a>0&&!s)return this.logger.warn(`All message slots are on cooldown. Next available in ${a} minutes`),null;try{const i=window.request?.inviteMessagesRequest;if(!i)throw new Error("inviteMessagesRequest API not available");return await i.editInviteMessage({message:e},"message",r.slot),r.message=e,r.updatedAt=new Date().toISOString(),await this.refreshMessages("message"),this.logger.log(`Successfully edited invite message slot ${r.slot}: "${e}"`),{message:r,cooldown:0,ready:!0,success:!0}}catch(i){const n=i instanceof Error?i.message:String(i);throw this.logger.error(`Failed to edit invite message: ${n}`),i}}async requestInviteResponseMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("response");const t=this.inviteStore.inviteResponseMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite response messages available. Please configure them in your VRChat profile settings."),null;const o=this.findExistingMessage(t,e);if(o)return this.logger.log(`Response message slot ${o.slot} already has the requested text`),{message:o,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const r=this.getNextAvailableMessage(t);if(!r)return this.logger.error("No invite response messages found"),null;const a=this.getRemainingCooldownMinutes(r);if(a>0&&!s)return this.logger.warn(`All response message slots are on cooldown. Next available in ${a} minutes`),null;try{const i=window.request?.inviteMessagesRequest;if(!i)throw new Error("inviteMessagesRequest API not available");return await i.editInviteMessage({message:e},"response",r.slot),r.message=e,r.updatedAt=new Date().toISOString(),await this.refreshMessages("response"),this.logger.log(`Successfully edited invite response message slot ${r.slot}: "${e}"`),{message:r,cooldown:0,ready:!0,success:!0}}catch(i){const n=i instanceof Error?i.message:String(i);throw this.logger.error(`Failed to edit invite response message: ${n}`),i}}async requestInviteRequestMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("request");const t=this.inviteStore.inviteRequestMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite request messages available. Please configure them in your VRChat profile settings."),null;const o=this.findExistingMessage(t,e);if(o)return this.logger.log(`Request message slot ${o.slot} already has the requested text`),{message:o,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const r=this.getNextAvailableMessage(t);if(!r)return this.logger.error("No invite request messages found"),null;const a=this.getRemainingCooldownMinutes(r);if(a>0&&!s)return this.logger.warn(`All request message slots are on cooldown. Next available in ${a} minutes`),null;try{const i=window.request?.inviteMessagesRequest;if(!i)throw new Error("inviteMessagesRequest API not available");return await i.editInviteMessage({message:e},"request",r.slot),r.message=e,r.updatedAt=new Date().toISOString(),await this.refreshMessages("request"),this.logger.log(`Successfully edited invite request message slot ${r.slot}: "${e}"`),{message:r,cooldown:0,ready:!0,success:!0}}catch(i){const n=i instanceof Error?i.message:String(i);throw this.logger.error(`Failed to edit invite request message: ${n}`),i}}async requestInviteRequestResponseMessage(e,s=!1){if(!this.inviteStore)return this.logger.error("Invite store not available"),null;if(e.length>this.MAX_MESSAGE_LENGTH)return this.logger.error(`Message too long: ${e.length} characters (max ${this.MAX_MESSAGE_LENGTH})`),null;await this.ensureDataLoadedForType("requestResponse");const t=this.inviteStore.inviteRequestResponseMessageTable?.data;if(!t||!t.length)return this.logger.error("No invite request response messages available. Please configure them in your VRChat profile settings."),null;const o=this.findExistingMessage(t,e);if(o)return this.logger.log(`Request response message slot ${o.slot} already has the requested text`),{message:o,cooldown:0,ready:!0,success:!0,alreadyExists:!0};const r=this.getNextAvailableMessage(t);if(!r)return this.logger.error("No invite request response messages found"),null;const a=this.getRemainingCooldownMinutes(r);if(a>0&&!s)return this.logger.warn(`All request response message slots are on cooldown. Next available in ${a} minutes`),null;try{const i=window.request?.inviteMessagesRequest;if(!i)throw new Error("inviteMessagesRequest API not available");return await i.editInviteMessage({message:e},"requestResponse",r.slot),r.message=e,r.updatedAt=new Date().toISOString(),await this.refreshMessages("requestResponse"),this.logger.log(`Successfully edited invite request response message slot ${r.slot}: "${e}"`),{message:r,cooldown:0,ready:!0,success:!0}}catch(i){throw this.logger.error("Failed to edit invite request response message:",i),i}}getMessagesWithCooldown(e){if(!this.inviteStore)return[];let s;switch(e){case"message":s=this.inviteStore.inviteMessageTable?.data||[];break;case"response":s=this.inviteStore.inviteResponseMessageTable?.data||[];break;case"request":s=this.inviteStore.inviteRequestMessageTable?.data||[];break;case"requestResponse":s=this.inviteStore.inviteRequestResponseMessageTable?.data||[];break;default:return[]}return s.map(t=>({...t,cooldownMinutes:this.getRemainingCooldownMinutes(t),ready:this.getRemainingCooldownMinutes(t)===0}))}getStats(){const e={message:{total:0,ready:0,onCooldown:0},response:{total:0,ready:0,onCooldown:0},request:{total:0,ready:0,onCooldown:0},requestResponse:{total:0,ready:0,onCooldown:0}};return["message","response","request","requestResponse"].forEach(s=>{const t=this.getMessagesWithCooldown(s);e[s].total=t.length,e[s].ready=t.filter(o=>o.ready).length,e[s].onCooldown=t.filter(o=>!o.ready).length}),e}};u(g,"InviteMessageApiPlugin");let l=g;window.customjs.__LAST_PLUGIN_CLASS__=l;})();
