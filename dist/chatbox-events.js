(()=>{var c=Object.defineProperty;var l=(d,e)=>c(d,"name",{value:e,configurable:!0});const a=class a extends CustomModule{constructor(){super({name:"ChatBox Events \u{1F4AC}",description:"Send social events and API errors to VRChat chatbox via OSC Bridge",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["ChatBox","Events","OSC","Notifications"],required_dependencies:["osc-bridge"]}),this.lastSentMessages=new Map}async load(){const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F4AC} General",description:"General chatbox event settings"},social:{name:"\u{1F465} Social Events",description:"Player join/leave notifications"},moderation:{name:"\u{1F6AB} Moderation Events",description:"Block/mute notifications"},api:{name:"\u26A0\uFE0F API Errors",description:"VRChat API error notifications"},vrcStatus:{name:"\u{1F310} VRChat Status",description:"VRChat service status alerts"}}),this.settings=this.defineSettings({enabled:{type:e.BOOLEAN,description:"Enable chatbox events",category:"general",default:!0},deduplicateSeconds:{type:e.NUMBER,description:"Minimum seconds between duplicate messages",category:"general",default:5,min:0,max:60},messagePrefix:{type:e.STRING,description:"Prefix for all chatbox messages (e.g., '[VRCX]')",category:"general",default:"[VRCX] "},playerJoined:{type:e.BOOLEAN,description:"Show when friends join",category:"social",default:!0},playerLeft:{type:e.BOOLEAN,description:"Show when friends leave",category:"social",default:!0},onlyFriends:{type:e.BOOLEAN,description:"Only show events for friends (not all players)",category:"social",default:!0},playerBlocked:{type:e.BOOLEAN,description:"Show when you block someone",category:"moderation",default:!0},playerUnblocked:{type:e.BOOLEAN,description:"Show when you unblock someone",category:"moderation",default:!1},playerMuted:{type:e.BOOLEAN,description:"Show when you mute someone",category:"moderation",default:!0},playerUnmuted:{type:e.BOOLEAN,description:"Show when you unmute someone",category:"moderation",default:!1},apiErrors:{type:e.BOOLEAN,description:"Show VRChat API errors in chatbox",category:"api",default:!0},apiErrorMinSeverity:{type:e.SELECT,description:"Minimum error severity to show",category:"api",default:"warning",options:[{label:"All (includes 429 rate limits)",value:"all"},{label:"Warning (client errors)",value:"warning"},{label:"Error (critical only)",value:"error"}]},vrcStatusAlerts:{type:e.BOOLEAN,description:"Show VRChat service status issues in chatbox",category:"vrcStatus",default:!0},vrcStatusRecovery:{type:e.BOOLEAN,description:"Show when VRChat services recover",category:"vrcStatus",default:!1}}),this.loaded=!0,this.logger.log("ChatBox Events plugin loaded")}async start(){if(this.oscBridge=window.customjs.getModule("osc-bridge"),!this.oscBridge){this.logger.error("OSC Bridge module not found - ChatBox Events disabled");return}this.setupGameLogMonitoring(),this.setupApiErrorMonitoring(),this.setupVrcStatusMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("ChatBox Events started and monitoring events")}setupGameLogMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(!this.settings.store.enabled||!e||e.length===0)return;const t=e[e.length-1];this.handleGameLogEntry(t)}),this.logger.log("GameLog store subscription registered")}setupApiErrorMonitoring(){this.registerPreHook("$throw",e=>{if(!this.settings.store.enabled||!this.settings.store.apiErrors)return;const[t,r,s]=e;t&&t>=400&&this.handleApiError(t,r,s)}),this.logger.log("API error monitoring registered")}setupVrcStatusMonitoring(){this.subscribe("VRCSTATUS",({statusText:e})=>{this.settings.store.enabled&&this.settings.store.vrcStatusAlerts&&this.handleVrcStatusChange(e)}),this.logger.log("VRChat status monitoring registered")}handleGameLogEntry(e){if(e)try{switch(e.type){case"OnPlayerJoined":this.settings.store.playerJoined&&this.handlePlayerJoined(e);break;case"OnPlayerLeft":this.settings.store.playerLeft&&this.handlePlayerLeft(e);break}}catch(t){const r=t instanceof Error?t.message:String(t);this.logger.error(`Error handling game log entry: ${r}`)}}async handlePlayerJoined(e){const t=e.displayName||"Unknown",r=e.userId;if(this.settings.store.onlyFriends&&r&&!await this.isFriend(r))return;const s=`${t} joined`;this.sendToChatBox(s)}async handlePlayerLeft(e){const t=e.displayName||"Unknown",r=e.userId;if(this.settings.store.onlyFriends&&r&&!await this.isFriend(r))return;const s=`${t} left`;this.sendToChatBox(s)}async isFriend(e){const t=window.$pinia?.user?.currentUser?.friends;return!t||!Array.isArray(t)?!1:t.includes(e)}handleApiError(e,t,r){const s=this.getErrorSeverity(e),i=this.settings.store.apiErrorMinSeverity;if(i==="error"&&s!=="error"||i==="warning"&&s==="all")return;let n="";e===429?n="Rate limited by VRChat API":e===401?n="API authentication failed":e===403?n="API access forbidden":e===404?n="API endpoint not found":e>=500?n="VRChat API server error":n=`API error ${e}`,r&&this.settings.store.apiErrorMinSeverity==="all"&&(n+=` (${r.split("/")[0]})`),this.sendToChatBox(n)}getErrorSeverity(e){return e>=500?"error":e===429?"all":e>=400?"warning":"all"}handleVrcStatusChange(e){e?this.sendToChatBox(`VRChat issue: ${e}`):this.settings.store.vrcStatusRecovery&&this.sendToChatBox("VRChat services operational")}sendToChatBox(e){const r=(this.settings.store.messagePrefix||"")+e,s=this.settings.store.deduplicateSeconds;if(s>0){const i=this.lastSentMessages.get(r);if(i&&Date.now()-i<s*1e3)return;this.lastSentMessages.set(r,Date.now())}try{this.oscBridge&&typeof this.oscBridge.sendChatBox=="function"?this.oscBridge.sendChatBox(r):this.logger.warn("OSC Bridge not available or sendChatBox method missing")}catch(i){const n=i instanceof Error?i.message:String(i);this.logger.error(`Failed to send chatbox message: ${n}`)}}async stop(){this.lastSentMessages.clear(),await super.stop(),this.logger.log("ChatBox Events stopped")}};l(a,"ChatBoxEventsPlugin");let o=a;window.customjs.__LAST_PLUGIN_CLASS__=o;})();
