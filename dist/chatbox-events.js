(()=>{var g=Object.defineProperty;var d=(h,e)=>g(h,"name",{value:e,configurable:!0});const l=class l extends CustomModule{constructor(){super({name:"ChatBox Events \u{1F4AC}",description:"Send social events and API errors to VRChat chatbox via OSC Bridge",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["ChatBox","Events","OSC","Notifications"],required_dependencies:["osc-bridge"]}),this.lastSentMessages=new Map,this.vrcoscData={variables:{player_name:{key:"player_name",name:"Player Name",value:""},player_id:{key:"player_id",name:"Player ID",value:""},api_error:{key:"api_error",name:"API Error Message",value:""},api_code:{key:"api_code",name:"API Error Code",value:0},status_text:{key:"status_text",name:"VRChat Status",value:""}},events:{player_joined:{key:"player_joined",name:"Player Joined",defaultText:"Player {vrcx_player_name} joined"},player_left:{key:"player_left",name:"Player Left",defaultText:"Player {vrcx_player_name} left"},api_error:{key:"api_error",name:"API Error",defaultText:"API Error: {vrcx_api_error}"},vrc_status_operational:{key:"vrc_status_operational",name:"VRChat Services Operational",defaultText:"VRChat: {vrcx_status_text}"},vrc_status_issue:{key:"vrc_status_issue",name:"VRChat Services Issue",defaultText:"VRChat: {vrcx_status_text}"}},states:{}}}async load(){const e=window.customjs.types.SettingType;this.categories=this.defineSettingsCategories({general:{name:"\u{1F4AC} General",description:"General chatbox event settings"},social:{name:"\u{1F465} Social Events",description:"Player join/leave notifications"},moderation:{name:"\u{1F6AB} Moderation Events",description:"Block/mute notifications"},api:{name:"\u26A0\uFE0F API Errors",description:"VRChat API error notifications"},vrcStatus:{name:"\u{1F310} VRChat Status",description:"VRChat service status alerts"}}),this.settings=this.defineSettings({enabled:{type:e.BOOLEAN,description:"Enable chatbox events",category:"general",default:!0},deduplicateSeconds:{type:e.NUMBER,description:"Minimum seconds between duplicate messages",category:"general",default:5,min:0,max:60},messagePrefix:{type:e.STRING,description:"Prefix for all chatbox messages (e.g., '[VRCX]')",category:"general",default:"[VRCX] "},playerJoined:{type:e.BOOLEAN,description:"Show when friends join",category:"social",default:!0},playerLeft:{type:e.BOOLEAN,description:"Show when friends leave",category:"social",default:!0},onlyFriends:{type:e.BOOLEAN,description:"Only show events for friends (not all players)",category:"social",default:!0},playerBlocked:{type:e.BOOLEAN,description:"Show when you block someone",category:"moderation",default:!0},playerUnblocked:{type:e.BOOLEAN,description:"Show when you unblock someone",category:"moderation",default:!1},playerMuted:{type:e.BOOLEAN,description:"Show when you mute someone",category:"moderation",default:!0},playerUnmuted:{type:e.BOOLEAN,description:"Show when you unmute someone",category:"moderation",default:!1},apiErrors:{type:e.BOOLEAN,description:"Show VRChat API errors in chatbox",category:"api",default:!0},apiErrorMinSeverity:{type:e.SELECT,description:"Minimum error severity to show",category:"api",default:"warning",options:[{label:"All (includes 429 rate limits)",value:"all"},{label:"Warning (client errors)",value:"warning"},{label:"Error (critical only)",value:"error"}]},vrcStatusAlerts:{type:e.BOOLEAN,description:"Show VRChat service status issues in chatbox",category:"vrcStatus",default:!0},vrcStatusRecovery:{type:e.BOOLEAN,description:"Show when VRChat services recover",category:"vrcStatus",default:!1}}),this.actionButtons=[{title:"Create VRCOSC Data",color:"primary",icon:"ri-signal-tower-line",description:"Create Variables, States and Events required so you can set them up in VRCOSC",callback:async()=>{await this.createVRCOSCData()}}],this.loaded=!0,this.logger.log("ChatBox Events plugin loaded")}async start(){if(this.oscBridge=window.customjs.getModule("osc-bridge"),!this.oscBridge){this.logger.error("OSC Bridge module not found - ChatBox Events disabled");return}this.setupGameLogMonitoring(),this.setupApiErrorMonitoring(),this.setupVrcStatusMonitoring(),this.enabled=!0,this.started=!0,this.logger.log("ChatBox Events started and monitoring (events will auto-create on first trigger)")}async createVRCOSCData(){if(!this.oscBridge&&(this.oscBridge=window.customjs.getModule("osc-bridge"),!this.oscBridge)){this.logger.showError("OSC Bridge module not found - cannot create VRCOSC data");return}this.logger.showInfo("Creating VRCOSC variables, states, and events...");let e=0,t=0;try{for(const o of Object.values(this.vrcoscData.variables))try{await this.oscBridge.setChatVariable(o.key,o.value),e++}catch(n){this.logger.error(`Failed to create variable '${o.name}': ${n}`),t++}for(const o of Object.values(this.vrcoscData.states))try{await this.oscBridge.createChatState(o.key,o.defaultText),e++}catch(n){this.logger.error(`Failed to create state '${o.name}': ${n}`),t++}for(const o of Object.values(this.vrcoscData.events))try{await this.oscBridge.createChatEvent(o.key,o.defaultText),e++}catch(n){this.logger.error(`Failed to create event '${o.name}': ${n}`),t++}const r=[],s=Object.keys(this.vrcoscData.variables).length,a=Object.keys(this.vrcoscData.states).length,i=Object.keys(this.vrcoscData.events).length;s>0&&r.push(`${s} variables`),a>0&&r.push(`${a} states`),i>0&&r.push(`${i} events`),this.logger.showSuccess(`Created ${e} VRCOSC items${t>0?` (${t} failed)`:""}`),this.logger.log(`\u2713 ${r.join(", ")}`)}catch(r){const s=r instanceof Error?r.message:String(r);this.logger.showError(`Failed to create VRCOSC data: ${s}`)}}setupGameLogMonitoring(){this.subscribe("GAMELOG",({gameLogSessionTable:e})=>{if(!this.settings.store.enabled||!e||e.length===0)return;const t=e[e.length-1];this.handleGameLogEntry(t)}),this.logger.log("GameLog store subscription registered")}setupApiErrorMonitoring(){this.registerPreHook("$throw",e=>{if(!this.settings.store.enabled||!this.settings.store.apiErrors)return;const[t,r,s]=e;t&&t>=400&&this.handleApiError(t,r,s)}),this.logger.log("API error monitoring registered")}setupVrcStatusMonitoring(){this.subscribe("VRCSTATUS",({statusText:e})=>{this.settings.store.enabled&&this.settings.store.vrcStatusAlerts&&this.handleVrcStatusChange(e)}),this.logger.log("VRChat status monitoring registered")}handleGameLogEntry(e){if(e)try{switch(e.type){case"OnPlayerJoined":this.settings.store.playerJoined&&this.handlePlayerJoined(e);break;case"OnPlayerLeft":this.settings.store.playerLeft&&this.handlePlayerLeft(e);break}}catch(t){const r=t instanceof Error?t.message:String(t);this.logger.error(`Error handling game log entry: ${r}`)}}async handlePlayerJoined(e){const t=e.displayName||"Unknown",r=e.userId||"";this.settings.store.onlyFriends&&r&&!await this.isFriend(r)||(await this.oscBridge.setChatVariable(this.vrcoscData.variables.player_name.key,t),await this.oscBridge.setChatVariable(this.vrcoscData.variables.player_id.key,r),await this.oscBridge.triggerChatEvent(this.vrcoscData.events.player_joined.key,this.vrcoscData.events.player_joined.defaultText))}async handlePlayerLeft(e){const t=e.displayName||"Unknown",r=e.userId||"";this.settings.store.onlyFriends&&r&&!await this.isFriend(r)||(await this.oscBridge.setChatVariable(this.vrcoscData.variables.player_name.key,t),await this.oscBridge.setChatVariable(this.vrcoscData.variables.player_id.key,r),await this.oscBridge.triggerChatEvent(this.vrcoscData.events.player_left.key,this.vrcoscData.events.player_left.defaultText))}async isFriend(e){const t=window.$pinia?.user?.currentUser?.friends;return!t||!Array.isArray(t)?!1:t.includes(e)}async handleApiError(e,t,r){const s=this.getErrorSeverity(e),a=this.settings.store.apiErrorMinSeverity;if(a==="error"&&s!=="error"||a==="warning"&&s==="all")return;let i="";e===429?i="Rate limited":e===401?i="Auth failed":e===403?i="Access forbidden":e===404?i="Not found":e>=500?i="Server error":i=`Error ${e}`,await this.oscBridge.setChatVariable(this.vrcoscData.variables.api_error.key,i),await this.oscBridge.setChatVariable(this.vrcoscData.variables.api_code.key,e),await this.oscBridge.triggerChatEvent(this.vrcoscData.events.api_error.key,this.vrcoscData.events.api_error.defaultText)}getErrorSeverity(e){return e>=500?"error":e===429?"all":e>=400?"warning":"all"}async handleVrcStatusChange(e){e?(await this.oscBridge.setChatVariable(this.vrcoscData.variables.status_text.key,e),await this.oscBridge.triggerChatEvent(this.vrcoscData.events.vrc_status_issue.key,this.vrcoscData.events.vrc_status_issue.defaultText)):this.settings.store.vrcStatusRecovery&&(await this.oscBridge.setChatVariable(this.vrcoscData.variables.status_text.key,"Services operational"),await this.oscBridge.triggerChatEvent(this.vrcoscData.events.vrc_status_operational.key,this.vrcoscData.events.vrc_status_operational.defaultText))}sendToChatBox(e){const r=(this.settings.store.messagePrefix||"")+e,s=this.settings.store.deduplicateSeconds;if(s>0){const a=this.lastSentMessages.get(r);if(a&&Date.now()-a<s*1e3)return;this.lastSentMessages.set(r,Date.now())}try{this.oscBridge&&typeof this.oscBridge.sendChatBox=="function"?this.oscBridge.sendChatBox(r):this.logger.warn("OSC Bridge not available or sendChatBox method missing")}catch(a){const i=a instanceof Error?a.message:String(a);this.logger.error(`Failed to send chatbox message: ${i}`)}}async stop(){this.lastSentMessages.clear(),await super.stop(),this.logger.log("ChatBox Events stopped")}};d(l,"ChatBoxEventsPlugin");let c=l;window.customjs.__LAST_PLUGIN_CLASS__=c;})();
