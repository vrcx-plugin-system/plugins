(()=>{var T=Object.defineProperty;var P=(E,r)=>T(E,"name",{value:r,configurable:!0});const n=class n extends CustomModule{constructor(){super({name:"Dialog Events API \u{1F4E2}",description:"Tracks and emits events when VRCX native dialogs are opened",authors:[{name:"Bluscream",description:"VRCX Plugin System Maintainer",userId:"usr_08082729-592d-4098-9a21-83c8dd37a844"}],tags:["API","Core","Dialog","Events","Library"],required_dependencies:[]})}async load(){this.registerEvent("ShowUserDialog",{description:"Fired when a user dialog is opened",payload:{userId:"string - User ID that was opened",dialog:"object - Full dialog reference (userDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!1,logToConsole:!0}),this.registerEvent("ShowGroupDialog",{description:"Fired when a group dialog is opened",payload:{groupId:"string - Group ID that was opened",dialog:"object - Full dialog reference (groupDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowModerateGroupDialog",{description:"Fired when group moderation dialog is opened",payload:{userId:"string - User ID being moderated",dialog:"object - Full dialog reference (moderateGroupDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowGroupMemberModerationDialog",{description:"Fired when group member moderation dialog is opened",payload:{groupId:"string - Group ID",userId:"string - User ID (optional)",dialog:"object - Full dialog reference (groupMemberModeration state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowWorldDialog",{description:"Fired when a world dialog is opened",payload:{worldId:"string - World ID or location tag",shortName:"string - Optional short name",dialog:"object - Full dialog reference (worldDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowAvatarDialog",{description:"Fired when an avatar dialog is opened",payload:{avatarId:"string - Avatar ID that was opened",dialog:"object - Full dialog reference (avatarDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowAvatarAuthorDialog",{description:"Fired when avatar author dialog is opened (may trigger ShowAvatarDialog or ShowUserDialog)",payload:{refUserId:"string - Reference user ID",ownerUserId:"string - Owner user ID",currentAvatarImageUrl:"string - Avatar image URL",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowLaunchDialog",{description:"Fired when a VRChat launch dialog is opened",payload:{location:"string - Location tag",shortName:"string - Optional short name",dialog:"object - Full dialog reference (launchDialogData state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowWorldImportDialog",{description:"Fired when world favorites import dialog is opened",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowAvatarImportDialog",{description:"Fired when avatar favorites import dialog is opened",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowFriendImportDialog",{description:"Fired when friend import dialog is opened",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowFavoriteDialog",{description:"Fired when favorite management dialog is opened",payload:{type:"string - Favorite type (world/avatar)",objectId:"string - Object ID",dialog:"object - Full dialog reference (favoriteDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowFullscreenImageDialog",{description:"Fired when fullscreen image viewer is opened",payload:{imageUrl:"string - Image URL",fileName:"string - File name",dialog:"object - Full dialog reference (fullscreenImageDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowGalleryDialog",{description:"Fired when gallery dialog is opened",payload:{dialog:"object - Gallery dialog state",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowRegistryBackupDialog",{description:"Fired when registry backup dialog is opened",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowVRCXUpdateDialog",{description:"Fired when VRCX update dialog is opened",payload:{dialog:"object - Full dialog reference (VRCXUpdateDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowChangeLogDialog",{description:"Fired when changelog dialog is opened",payload:{dialog:"object - Full dialog reference (changeLogDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowAvatarProviderDialog",{description:"Fired when avatar provider dialog is opened",payload:{timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowPreviousInstancesInfoDialog",{description:"Fired when previous instances info dialog is opened",payload:{instanceId:"string - Instance ID",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.registerEvent("ShowEditInviteMessageDialog",{description:"Fired when edit invite message dialog is opened",payload:{dialog:"object - Full dialog reference (editInviteMessageDialog state)",timestamp:"number - Unix timestamp"},broadcastIPC:!0,logToConsole:!0}),this.logger.log("Dialog Events API ready - 21 dialog events registered"),this.loaded=!0}async start(){this.setupDialogWatchers(),this.enabled=!0,this.started=!0,this.logger.log("Dialog Events API started - watching native dialogs")}setupDialogWatchers(){let r=!1,d=!1,g=!1,m=!1,p=!1,h=!1,c=!1,u=!1,b=!1,I=!1,w=!1,D=!1,v=!1,f=!1,C=!1,V=!1,U=!1,S=!1,F=!1;this.subscribe("USER",({userDialog:e})=>{const i=e?.visible&&e?.id;i&&!r&&this.emit("ShowUserDialog",{userId:e.id,dialog:e,timestamp:Date.now()}),r=!!i}),this.subscribe("WORLD",({worldDialog:e})=>{const i=e?.visible&&e?.id;i&&!d&&this.emit("ShowWorldDialog",{worldId:e.id,shortName:e.$location?.shortName||"",dialog:e,timestamp:Date.now()}),d=!!i}),this.subscribe("AVATAR",({avatarDialog:e})=>{const i=e?.visible&&e?.id;i&&!g&&this.emit("ShowAvatarDialog",{avatarId:e.id,dialog:e,timestamp:Date.now()}),g=!!i}),this.registerPreHook("$pinia.avatar.showAvatarAuthorDialog",e=>{const[i,t,s]=e;this.emit("ShowAvatarAuthorDialog",{refUserId:i||"",ownerUserId:t||"",currentAvatarImageUrl:s||"",timestamp:Date.now()})}),this.subscribe("GROUP",({groupDialog:e,moderateGroupDialog:i,groupMemberModeration:t})=>{const s=e?.visible&&e?.id;s&&!m&&this.emit("ShowGroupDialog",{groupId:e.id,dialog:e,timestamp:Date.now()}),m=!!s;const a=i?.visible&&i?.userId;a&&!p&&this.emit("ShowModerateGroupDialog",{userId:i.userId,dialog:i,timestamp:Date.now()}),p=!!a;const o=t?.visible&&t?.id;o&&!h&&this.emit("ShowGroupMemberModerationDialog",{groupId:t.id,userId:t.openWithUserId||"",dialog:t,timestamp:Date.now()}),h=!!o}),this.subscribe("LAUNCH",({launchDialogData:e})=>{const i=e?.visible&&e?.tag;i&&!c&&this.emit("ShowLaunchDialog",{location:e.tag,shortName:e.shortName||"",dialog:e,timestamp:Date.now()}),c=!!i}),this.subscribe("GALLERY",e=>{const i=!!e.galleryDialogVisible;i&&!u&&this.emit("ShowGalleryDialog",{dialog:e,timestamp:Date.now()}),u=i;const t=!!e.fullscreenImageDialog?.visible;t&&!b&&this.emit("ShowFullscreenImageDialog",{imageUrl:e.fullscreenImageDialog.imageUrl,fileName:e.fullscreenImageDialog.fileName||"",dialog:e.fullscreenImageDialog,timestamp:Date.now()}),b=t}),this.subscribe("FAVORITE",({favoriteDialog:e,worldImportDialogVisible:i,avatarImportDialogVisible:t,friendImportDialogVisible:s})=>{const a=!!e?.visible;a&&!I&&this.emit("ShowFavoriteDialog",{type:e.type,objectId:e.objectId,dialog:e,timestamp:Date.now()}),I=a;const o=!!i;o&&!w&&this.emit("ShowWorldImportDialog",{timestamp:Date.now()}),w=o;const y=!!t;y&&!D&&this.emit("ShowAvatarImportDialog",{timestamp:Date.now()}),D=y;const A=!!s;A&&!v&&this.emit("ShowFriendImportDialog",{timestamp:Date.now()}),v=A}),this.subscribe("INSTANCE",({previousInstancesInfoDialogVisible:e,previousInstancesInfoDialogInstanceId:i})=>{const t=e&&i;t&&!f&&this.emit("ShowPreviousInstancesInfoDialog",{instanceId:i,timestamp:Date.now()}),f=!!t}),this.subscribe("VRCX",({isRegistryBackupDialogVisible:e})=>{const i=!!e;i&&!C&&this.emit("ShowRegistryBackupDialog",{timestamp:Date.now()}),C=i}),this.subscribe("VRCXUPDATER",({VRCXUpdateDialog:e,changeLogDialog:i})=>{const t=!!e?.visible;t&&!V&&this.emit("ShowVRCXUpdateDialog",{dialog:e,timestamp:Date.now()}),V=t;const s=!!i?.visible;s&&!U&&this.emit("ShowChangeLogDialog",{dialog:i,timestamp:Date.now()}),U=s}),this.subscribe("INVITE",({editInviteMessageDialog:e})=>{const i=!!e?.visible;i&&!S&&this.emit("ShowEditInviteMessageDialog",{dialog:e,timestamp:Date.now()}),S=i}),this.subscribe("AVATARPROVIDER",({isAvatarProviderDialogVisible:e})=>{const i=!!e;i&&!F&&this.emit("ShowAvatarProviderDialog",{timestamp:Date.now()}),F=i}),this.logger.log("Dialog watchers registered via store subscriptions")}async stop(){this.logger.log("Stopping Dialog Events API"),this.enabled=!1,this.started=!1}async unload(){this.logger.log("Unloading Dialog Events API"),this.loaded=!1}};P(n,"DialogEventsApiPlugin");let l=n;window.customjs.__LAST_PLUGIN_CLASS__=l;})();
