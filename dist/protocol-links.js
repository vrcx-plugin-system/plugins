(()=>{var l=Object.defineProperty;var n=(s,o)=>l(s,"name",{value:o,configurable:!0});const r=class r extends Plugin{constructor(){super({name:"\u{1F517} VRCX Protocol Links",description:"Adds context menu items to copy VRCX protocol links for users, avatars, worlds, groups, and instances",authors:[{name:"Bluscream"}],build:"1760847215",tags:["Utility","Integration"],dependencies:["https://github.com/vrcx-plugin-system/plugins/raw/refs/heads/main/dist/context-menu-api.js"]})}async load(){this.logger.log("Protocol Links plugin ready"),this.loaded=!0}async start(){if(this.utils=window.customjs.utils,this.contextMenuApi=await window.customjs.pluginManager.waitForPlugin("context-menu-api"),!this.contextMenuApi){this.logger.error("Context Menu API plugin not found after waiting");return}this.setupContextMenuItems(),this.enabled=!0,this.started=!0,this.logger.log("Protocol Links plugin started, menu items added")}async onLogin(o){}async stop(){this.logger.log("Stopping Protocol Links plugin"),this.removeContextMenuItems(),await super.stop()}setupContextMenuItems(){if(!this.contextMenuApi){this.logger.error("Context Menu API plugin not available");return}this.contextMenuApi.addUserItem("copy-user-link",{text:"Copy User Link",icon:"el-icon-link",onClick:o=>this.copyUserLink(o)}),this.contextMenuApi.addUserItem("copy-user-import",{text:"Copy User Import Link",icon:"el-icon-download",onClick:o=>this.copyUserImportLink(o)}),this.contextMenuApi.addAvatarItem("copy-avatar-link",{text:"Copy Avatar Link",icon:"el-icon-link",onClick:o=>this.copyAvatarLink(o)}),this.contextMenuApi.addAvatarItem("copy-avatar-import",{text:"Copy Avatar Import Link",icon:"el-icon-download",onClick:o=>this.copyAvatarImportLink(o)}),this.contextMenuApi.addWorldItem("copy-world-link",{text:"Copy World Link",icon:"el-icon-link",onClick:o=>this.copyWorldLink(o)}),this.contextMenuApi.addWorldItem("copy-world-import",{text:"Copy World Import Link",icon:"el-icon-download",onClick:o=>this.copyWorldImportLink(o)}),this.contextMenuApi.addGroupItem("copy-group-link",{text:"Copy Group Link",icon:"el-icon-link",onClick:o=>this.copyGroupLink(o)}),this.logger.log("All context menu items added")}removeContextMenuItems(){this.contextMenuApi&&(this.contextMenuApi.removeUserItem("copy-user-link"),this.contextMenuApi.removeUserItem("copy-user-import"),this.contextMenuApi.removeAvatarItem("copy-avatar-link"),this.contextMenuApi.removeAvatarItem("copy-avatar-import"),this.contextMenuApi.removeWorldItem("copy-world-link"),this.contextMenuApi.removeWorldItem("copy-world-import"),this.contextMenuApi.removeGroupItem("copy-group-link"),this.logger.log("All context menu items removed"))}copyUserLink(o){if(!o||!o.id){this.logger.showError("No user data available");return}this.utils.copyToClipboard(`vrcx://user/${o.id}`,"User link")}copyUserImportLink(o){if(!o||!o.id){this.logger.showError("No user data available");return}this.utils.copyToClipboard(`vrcx://import/friend/${o.id}`,"User import link")}copyAvatarLink(o){if(!o||!o.id){this.logger.showError("No avatar data available");return}this.utils.copyToClipboard(`vrcx://avatar/${o.id}`,"Avatar link")}copyAvatarImportLink(o){if(!o||!o.id){this.logger.showError("No avatar data available");return}this.utils.copyToClipboard(`vrcx://import/avatar/${o.id}`,"Avatar import link")}copyWorldLink(o){if(!o||!o.id){this.logger.showError("No world data available");return}this.utils.copyToClipboard(`vrcx://world/${o.id}`,"World link")}copyWorldImportLink(o){if(!o||!o.id){this.logger.showError("No world data available");return}this.utils.copyToClipboard(`vrcx://import/world/${o.id}`,"World import link")}copyGroupLink(o){if(!o||!o.id){this.logger.showError("No group data available");return}this.utils.copyToClipboard(`vrcx://group/${o.id}`,"Group link")}addAvatarDatabaseProvider(o){this.utils.copyToClipboard(`vrcx://addavatardb/${o}`,"Avatar database provider link")}createMultiImportLink(o,t){if(!Array.isArray(t)||t.length===0){this.logger.showError("No IDs provided for import");return}const e=["avatar","world","friend"];if(!e.includes(o)){this.logger.showError(`Invalid import type. Must be one of: ${e.join(", ")}`);return}const a=`vrcx://import/${o}/${t.join(",")}`;this.utils.copyToClipboard(a,`${o} import link (${t.length} items)`)}};n(r,"ProtocolLinksPlugin");let i=r;window.customjs.__LAST_PLUGIN_CLASS__=i;})();
