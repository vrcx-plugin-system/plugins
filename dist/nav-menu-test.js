(()=>{var x=Object.defineProperty;var p=(C,t)=>x(C,"name",{value:t,configurable:!0});const b=class b extends Plugin{constructor(){super({name:"\u{1F9EA} Nav Menu API Test",description:"Test plugin to verify nav-menu-api functionality with extensive debug logging",author:"Bluscream",build:"0",tags:["Debug","Experimental"],dependencies:["https://github.com/vrcx-plugin-system/plugins/raw/refs/heads/main/dist/nav-menu-api.js"]}),this.navMenuApi=null,this.tabShowCount=0,this.tabHideCount=0,this.buttonClickCount=0}async load(){this.logger.log("\u{1F4E6} Nav Menu Test Plugin ready"),this.loaded=!0}async start(){if(this.logger.log("\u{1F680} Starting Nav Menu Test Plugin..."),this.logger.log("\u23F3 Waiting for nav-menu-api plugin..."),this.navMenuApi=await window.customjs.pluginManager.waitForPlugin("nav-menu-api"),!this.navMenuApi){this.logger.error("\u274C Nav Menu API plugin not found after waiting");return}this.logger.log("\u2705 nav-menu-api plugin found!"),this.logger.log("\u{1F9EA} TEST 1: Adding tab item with content..."),this.navMenuApi.addItem("test-tab",{label:"Test Tab",icon:"ri-flask-line",content:()=>this.createTestTabContent(),before:"settings",onShow:()=>this.onTestTabShown(),onHide:()=>this.onTestTabHidden()}),this.logger.log("\u2705 TEST 1: Tab item added"),this.logger.log("\u{1F9EA} TEST 2: Adding button item without content..."),this.navMenuApi.addItem("test-button",{label:"Test Button",icon:"ri-flashlight-line",onClick:()=>this.onTestButtonClick(),after:"test-tab"}),this.logger.log("\u2705 TEST 2: Button item added"),this.logger.log("\u{1F9EA} TEST 3: Checking registered items...");const t=this.navMenuApi.hasItem("test-tab"),e=this.navMenuApi.hasItem("test-button");this.logger.log(`\u2705 TEST 3: test-tab exists: ${t}, test-button exists: ${e}`),this.logger.log("\u{1F9EA} TEST 4: Getting all items...");const s=this.navMenuApi.getAllItems();this.logger.log(`\u2705 TEST 4: Found ${s.length} total custom items`),s.forEach(n=>{this.logger.log(`  - ${n.id}: ${n.label} (content: ${!!n.content})`)}),this.enabled=!0,this.started=!0,this.logger.log("\u{1F389} Nav Menu Test Plugin started successfully")}createTestTabContent(){this.logger.log("\u{1F3A8} createTestTabContent() called");const t=document.createElement("div");t.style.cssText=`
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
    `;const e=document.createElement("h2");e.textContent="\u{1F9EA} Nav Menu API Test Results",e.style.cssText="margin: 0 0 20px 0; font-size: 24px; font-weight: 600;",t.appendChild(e);const s=document.createElement("div");s.style.cssText=`
      background: #f8f9fa;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
    `;const n=document.createElement("h3");n.textContent="\u{1F4CA} Test Statistics",n.style.cssText="margin: 0 0 15px 0; font-size: 18px;",s.appendChild(n);const i=document.createElement("ul");i.style.cssText="list-style: none; padding: 0; margin: 0;",[{label:"Tab Shows",value:this.tabShowCount},{label:"Tab Hides",value:this.tabHideCount},{label:"Button Clicks",value:this.buttonClickCount}].forEach(l=>{const o=document.createElement("li");o.style.cssText="padding: 8px 0; border-bottom: 1px solid #dee2e6;",o.innerHTML=`<strong>${l.label}:</strong> <span id="stat-${l.label.toLowerCase().replace(" ","-")}">${l.value}</span>`,i.appendChild(o)}),s.appendChild(i),t.appendChild(s);const d=document.createElement("div");d.style.cssText=`
      background: #e7f3ff;
      border: 2px solid #2196f3;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
    `;const g=document.createElement("h3");g.textContent="\u{1F4CB} Test Instructions",g.style.cssText="margin: 0 0 15px 0; font-size: 18px; color: #2196f3;",d.appendChild(g);const h=document.createElement("ol");h.style.cssText="margin: 0; padding-left: 20px; line-height: 1.8;",["Click the 'Test Button' in the nav menu - it should flash briefly","Switch to another tab (e.g., Feed) - onHide should fire","Switch back to 'Test Tab' - onShow should fire","Check browser console for detailed logs","Watch the statistics above update with each action"].forEach(l=>{const o=document.createElement("li");o.textContent=l,h.appendChild(o)}),d.appendChild(h),t.appendChild(d);const a=document.createElement("button");a.className="el-button el-button--primary",a.style.cssText="width: 100%; margin-top: 20px;",a.innerHTML='<i class="ri-refresh-line"></i> Update Statistics Display',this.registerListener(a,"click",()=>{this.logger.log("\u{1F504} Updating statistics display..."),this.updateStatsDisplay(t)}),t.appendChild(a);const u=document.createElement("div");u.style.cssText=`
      background: #f8f9fa;
      border-radius: 8px;
      padding: 20px;
      margin-top: 20px;
    `;const r=document.createElement("h3");r.textContent="\u{1F4DD} Recent Events",r.style.cssText="margin: 0 0 15px 0; font-size: 18px;",u.appendChild(r);const c=document.createElement("pre");return c.id="test-console-output",c.style.cssText=`
      background: #2d2d2d;
      color: #00ff88;
      padding: 15px;
      border-radius: 4px;
      font-family: 'Consolas', monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
      margin: 0;
    `,c.textContent=`Waiting for events...
`,u.appendChild(c),t.appendChild(u),this.logger.log("\u2705 Test tab content created"),t}onTestTabShown(){this.tabShowCount++,this.logger.log(`\u{1F3AF} TEST TAB SHOWN (count: ${this.tabShowCount})`),this.logger.log(`  - Tab has been shown ${this.tabShowCount} time(s)`),this.logger.log(`  - Current menu index: ${window.$pinia?.ui?.menuActiveIndex}`),this.updateStatsDisplay(),this.addConsoleEvent(`onShow fired (${this.tabShowCount})`)}onTestTabHidden(){this.tabHideCount++,this.logger.log(`\u{1F44B} TEST TAB HIDDEN (count: ${this.tabHideCount})`),this.logger.log(`  - Tab has been hidden ${this.tabHideCount} time(s)`),this.logger.log(`  - Current menu index: ${window.$pinia?.ui?.menuActiveIndex}`),this.updateStatsDisplay(),this.addConsoleEvent(`onHide fired (${this.tabHideCount})`)}onTestButtonClick(){this.buttonClickCount++,this.logger.log(`\u{1F518} TEST BUTTON CLICKED (count: ${this.buttonClickCount})`),this.logger.log(`  - Button has been clicked ${this.buttonClickCount} time(s)`),this.logger.log(`  - Current menu index: ${window.$pinia?.ui?.menuActiveIndex}`),this.logger.log("  - Menu should NOT have changed (button-only item)"),this.updateStatsDisplay(),this.addConsoleEvent(`Button clicked (${this.buttonClickCount})`),this.logger.showSuccess(`Test button clicked ${this.buttonClickCount} times!`)}updateStatsDisplay(t){const e=p(T=>document.getElementById(T),"getStatElement"),s=e("stat-tab-shows"),n=e("stat-tab-hides"),i=e("stat-button-clicks");s&&(s.textContent=this.tabShowCount),n&&(n.textContent=this.tabHideCount),i&&(i.textContent=this.buttonClickCount),this.logger.log(`\u{1F4CA} Updated stats display: shows=${this.tabShowCount}, hides=${this.tabHideCount}, clicks=${this.buttonClickCount}`)}addConsoleEvent(t){const e=document.getElementById("test-console-output");if(e){const n=`[${new Date().toLocaleTimeString()}] ${t}
`;e.textContent+=n,e.scrollTop=e.scrollHeight,this.logger.log(`\u{1F4DD} Added console event: ${t}`)}}async stop(){this.logger.log("\u{1F6D1} Stopping Nav Menu Test Plugin"),this.navMenuApi&&(this.logger.log("\u{1F9F9} Removing test-tab item..."),this.navMenuApi.removeItem("test-tab"),this.logger.log("\u{1F9F9} Removing test-button item..."),this.navMenuApi.removeItem("test-button"),this.logger.log("\u2705 All test items removed")),await super.stop()}};p(b,"NavMenuTestPlugin");let m=b;window.customjs.__LAST_PLUGIN_CLASS__=m;})();
