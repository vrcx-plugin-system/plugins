(()=>{var h=Object.defineProperty;var r=(c,e)=>h(c,"name",{value:e,configurable:!0});const l=class l extends Plugin{constructor(){super({name:"\u{1F396}\uFE0F User Badge Pipeline Patch",description:"Adds support for user-badge-assigned pipeline events and displays badge notifications",authors:[{name:"Bluscream"}],build:"1760847188",tags:["Bugfix","Notifications","Patch","Fix"],dependencies:[]}),this.patched=!1,this.originalHandler=null}async load(){this.logger.log("User Badge Pipeline Patch plugin loaded"),this.loaded=!0}async start(){this.waitForStores(),this.enabled=!0,this.started=!0,this.logger.log("User Badge Pipeline Patch plugin started")}waitForStores(){const e=r(()=>{try{if(window.$pinia&&window.$pinia._s){this.setupPipelineHandler(),this.logger.log("\u2713 Stores available, pipeline handler ready");return}}catch{}setTimeout(e,500)},"checkStores");e()}setupPipelineHandler(){try{const e=console.log,i=this;console.log=function(...t){if(t.length>=2&&t[0]==="Unknown pipeline type"&&typeof t[1]=="object"&&t[1]?.type==="user-badge-assigned"){i.handleBadgeAssignment(t[1]);return}return e.apply(console,t)},this.originalHandler=e,this.patched=!0,this.logger.log("\u2713 Successfully patched console.log for pipeline events"),this.logger.showSuccess("User badge pipeline patch applied - badge notifications will now work!")}catch(e){this.logger.error(`Failed to patch pipeline handler: ${e.message}`)}}handleBadgeAssignment(e){try{const{content:i}=e;if(!i||!i.badge){this.logger.warn("Badge assignment event missing badge data");return}const t=i.badge;this.logger.log(`\u{1F3C5} Badge Earned: ${t.badgeName||"Unknown Badge"}`),console.log("user-badge-assigned",i);const a=window.$pinia._s.get("Notification"),o=window.$pinia._s.get("SharedFeed"),g=window.$pinia._s.get("Ui");if(!a||!o||!g){this.logger.warn("Stores not available, showing basic notification instead"),this.showBasicNotification(t);return}const s={type:"user.badge.assigned",badgeId:t.badgeId,badgeName:t.badgeName,badgeDescription:t.badgeDescription,badgeImageUrl:t.badgeImageUrl,message:`Badge Earned: ${t.badgeName}`,created_at:new Date().toJSON()},n=a.notificationTable?.filters?.[0]?.value;(!n||n.length===0||n.includes(s.type))&&g.notifyMenu("notification"),typeof a.queueNotificationNoty=="function"&&a.queueNotificationNoty(s),a.notificationTable?.data&&a.notificationTable.data.push(s),typeof o.updateSharedFeed=="function"&&o.updateSharedFeed(!0),this.logger.showSuccess(`\u{1F3C5} Badge Earned: ${t.badgeName}`,t.badgeDescription)}catch(i){this.logger.error(`Error handling badge assignment: ${i.message}`),console.error(i)}}showBasicNotification(e){try{this.logger.showInfo(`\u{1F3C5} Badge Earned: ${e.badgeName}`,e.badgeDescription)}catch(i){this.logger.error(`Failed to show notification: ${i.message}`)}}async stop(){if(this.patched&&this.originalHandler)try{console.log=this.originalHandler,this.patched=!1,this.originalHandler=null,this.logger.log("Restored original console.log")}catch(e){this.logger.error(`Failed to restore console.log: ${e.message}`)}await super.stop()}isPatchApplied(){return this.patched}getStats(){return{patched:this.patched,enabled:this.enabled,started:this.started}}};r(l,"UserBadgePipelinePatchPlugin");let d=l;window.customjs.__LAST_PLUGIN_CLASS__=d;})();
